SPXSQ		SP9Q	OSP0





X














=WCP/M

=WOperating System

=WManual










=Copyright (c) 1982

=Digital Research
=P.O. Box 579
=160 Central Avenue
=Pacific Grove, CA 93950
=(408) 649-3896
=TWX 910 360 5001




=All Rights Reserved












XQ	SP9Q	DSP0





X=WCOPYRIGHT

Q	SPMCopyright (c) 1976, 1977, 1978, 1979, 1982, 1983,
XQ	SPMand 1984 by Digital Research Inc.  All rights
XQ	SPMreserved.  No part of this publication may be
XQ	SPMreproduced, transmitted, transcribed, stored in a
XQ	SPMretrieval system, or translated into any language or
XQ	SPMcomputer language, in any form or by any means,
XQ	SPMelectronic, mechanical, magnetic, optical, chemical,
XQ	SPMmanual or otherwise, without the prior written
XQ	SPMpermission of Digital Research Inc., Post Office Box
XQ	SP579, Pacific Grove, California, 93950.

Q	SPMThus, readers are granted permission to include the
XQ	SPMexample programs, either in whole or in part, in
XQ	SPtheir own programs.


=WDISCLAIMER

Q	SPMDigital Research Inc. makes no representations or
XQ	SPMwarranties with respect to the contents hereof and
XQ	SPMspecifically disclaims any implied warranties of
XQ	SPMmerchantability or fitness for any particular
XQ	SPMpurpose.  Further, Digital Research Inc. reserves
XQ	SPMthe right to revise this publication and to make
XQ	SPMchanges from time to time in the content hereof
XQ	SPMwithout obligation of Digital Research Inc. to
XQ	SPnotify any person of such revision or changes.


=WTRADEMARKS

Q	SPMCP/M, CP/NET, and Digital Research and its logo are
XQ	SPMregistered trademarks of Digital Research.  ASM,
XQ	SPMDESPOOL, DDT, LINK-80, MAC, MP/M, PL/I-80 and SID
XQ	SPMare trademarks of Digital Research.  IBM is a
XQ	SPMregistered trademark of International Business
XQ	SPMMachines.  Intel is a registered trademark of Intel
XQ	SPMCorporation.  TI Silent 700 is a trademark of Texas
XQ	SPMInstruments Incorporated.  Zilog and Z80 are
XQ	SPregistered trademarks of Zilog, Inc.



Q	SPMThe ECP/M Operating System ManualR was prepared using
XQ	SPMthe Digital Research TEX Text Formatter and printed
XQ	SPin the United States of America.


=*********************************
=*   First Edition:  1976        *
=*  Second Edition:  July 1982   *
=*   Third Edition:  March 1983  *
=*  Fourth Edition:  March 1984  *
=*********************************
XQ	SP9Q	LSP0




X=WTable of Contents



Q	SPW1  CP/M Features and Facilities

Q	SP   1.1  Introduction  . . . . . . . . . . . . . . . . . . .   1-1

Q	SP   1.2  Functional Description  . . . . . . . . . . . . . .   1-3

Q	SP        1.2.1  General Command Structure  . . . . . . . . .   1-3
Q	SP        1.2.2  File References  . . . . . . . . . . . . . .   1-3

Q	SP   1.3  Switching Disks . . . . . . . . . . . . . . . . . .   1-5
Q	SP   1.4  Built-in Commands . . . . . . . . . . . . . . . . .   1-6

Q	SP        1.4.1  ERA Command  . . . . . . . . . . . . . . . .   1-6
Q	SP        1.4.2  DIR Command  . . . . . . . . . . . . . . . .   1-7
Q	SP        1.4.3  REN Command  . . . . . . . . . . . . . . . .   1-8
Q	SP        1.4.4  SAVE Command . . . . . . . . . . . . . . . .   1-8
Q	SP        1.4.5  TYPE Command . . . . . . . . . . . . . . . .   1-9
Q	SP        1.4.6  USER Command . . . . . . . . . . . . . . . .   1-9

Q	SP   1.5  Line Editing and Output Control . . . . . . . . . .  1-10

Q	SP   1.6  Transient Commands  . . . . . . . . . . . . . . . .  1-11

Q	SP        1.6.1  STAT Command . . . . . . . . . . . . . . . .  1-12
Q	SP        1.6.2  ASM Command  . . . . . . . . . . . . . . . .  1-18
Q	SP        1.6.3  LOAD Command . . . . . . . . . . . . . . . .  1-19
Q	SP        1.6.4  PIP  . . . . . . . . . . . . . . . . . . . .  1-20
Q	SP        1.6.5  ED Command . . . . . . . . . . . . . . . . .  1-29
Q	SP        1.6.6  SYSGEN Command . . . . . . . . . . . . . . .  1-31
Q	SP        1.6.7  SUBMIT Command . . . . . . . . . . . . . . .  1-33
Q	SP        1.6.8  DUMP Command . . . . . . . . . . . . . . . .  1-35
Q	SP        1.6.9  MOVCPM Command . . . . . . . . . . . . . . .  1-35

Q	SP   1.7  BDOS Error Messages . . . . . . . . . . . . . . . .  1-37

Q	SP   1.8  CP/M Operation on the Model 800 . . . . . . . . . .  1-38


Q	SPW2  The CP/M Editor

Q	SP   2.1  Introduction to ED  . . . . . . . . . . . . . . . .   2-1

Q	SP        2.1.1  ED Operation . . . . . . . . . . . . . . . .   2-1
Q	SP        2.1.2  Text Transfer Functions  . . . . . . . . . .   2-3
Q	SP        2.1.3  Memory Buffer Organization . . . . . . . . .   2-4
Q	SP        2.1.4  Line Numbers and ED Start-up . . . . . . . .   2-5
Q	SP        2.1.5  Memory Buffer Operation  . . . . . . . . . .   2-6
Q	SP        2.1.6  Command Strings  . . . . . . . . . . . . . .   2-7
Q	SP        2.1.7  Text Search and Alteration . . . . . . . . .  2-10
Q	SP        2.1.8  Source Libraries . . . . . . . . . . . . . .  2-13
Q	SP        2.1.9  Repetitive Command Execution . . . . . . . .  2-14


M                               iiiX




X=WTable of Contents

=&W(continued)



Q	SP&   2.2  ED Error Conditions . . . . . . . . . . . . . . . .  2-14

Q	SP   2.3  Control Characters and Commands . . . . . . . . . .  2-16


Q	SPW3  CP/M Assembler

Q	SP&   3.1  Introduction  . . . . . . . . . . . . . . . . . . .   3-1

Q	SP   3.2  Program Format  . . . . . . . . . . . . . . . . . .   3-3

Q	SP   3.3  Forming the Operand . . . . . . . . . . . . . . . .   3-4

Q	SP        3.3.1  Labels . . . . . . . . . . . . . . . . . . .   3-4
Q	SP        3.3.2  Numeric Constants  . . . . . . . . . . . . .   3-5
Q	SP        3.3.3  Reserved Words . . . . . . . . . . . . . . .   3-5
Q	SP        3.3.4  String Constants . . . . . . . . . . . . . .   3-6
Q	SP        3.3.5  Arithmetic and Logical Operators . . . . . .   3-7
Q	SP        3.3.6  Precedence of Operators  . . . . . . . . . .   3-8

Q	SP   3.4  Assembler Directives  . . . . . . . . . . . . . . .   3-9

Q	SP        3.4.1  The ORG Directive  . . . . . . . . . . . . .  3-10
Q	SP        3.4.2  The END Directive  . . . . . . . . . . . . .  3-10
Q	SP        3.4.3  The EQU Directive  . . . . . . . . . . . . .  3-11
Q	SP        3.4.4  The SET Directive  . . . . . . . . . . . . .  3-11
Q	SP        3.4.5  The IF and ENDIF Directives  . . . . . . . .  3-12
Q	SP        3.4.6  The DB Directive . . . . . . . . . . . . . .  3-13
Q	SP        3.4.7  The DW Directive . . . . . . . . . . . . . .  3-14
Q	SP        3.4.8  The DS Directive . . . . . . . . . . . . . .  3-14

Q	SP   3.5  Operation Codes . . . . . . . . . . . . . . . . . .  3-15

Q	SP        3.5.1  Jumps, Calls, and Returns  . . . . . . . . .  3-15
Q	SP        3.5.2  Immediate Operand Instructions . . . . . . .  3-17
Q	SP        3.5.3  Increment and Decrement Instructions . . . .  3-17
Q	SP        3.5.4  Data Movement Instructions . . . . . . . . .  3-18
Q	SP        3.5.5  Arithmetic Logic Unit Operations . . . . . .  3-19
Q	SP        3.5.6  Control Instructions . . . . . . . . . . . .  3-21

Q	SP   3.6  Error Messages  . . . . . . . . . . . . . . . . . .  3-21

Q	SP   3.7  A Sample Session  . . . . . . . . . . . . . . . . .  3-23








M                               ivX




X=WTable of Contents

=&W(continued)



Q	SP&W4  CP/M Dynamic Debugging Tool

Q	SP&   4.1  Introduction  . . . . . . . . . . . . . . . . . . .   4-1

Q	SP   4.2  DDT Commands  . . . . . . . . . . . . . . . . . . .   4-3

Q	SP        4.2.1  The A (Assembly) Command . . . . . . . . . .   4-3
Q	SP        4.2.2  The D (Display) Command  . . . . . . . . . .   4-4
Q	SP        4.2.3  The F (Fill) Command . . . . . . . . . . . .   4-5
Q	SP        4.2.4  The G (Go) Command . . . . . . . . . . . . .   4-5
Q	SP        4.2.5  The I (Input) Command  . . . . . . . . . . .   4-6
Q	SP        4.2.6  The L (List) Command . . . . . . . . . . . .   4-6
Q	SP        4.2.7  The M (Move) Command . . . . . . . . . . . .   4-7
Q	SP        4.2.8  The R (Read) Command . . . . . . . . . . . .   4-7
Q	SP        4.2.9  The S (Set) Command  . . . . . . . . . . . .   4-8
Q	SP        4.2.1- The T (Trace) Command  . . . . . . . . . . .   4-8
Q	SP        4.2.11 The U (Untrace) Command  . . . . . . . . . .   4-9
Q	SP        4.2.12 The X (Examine) Command  . . . . . . . . . .   4-9

Q	SP   4.3  Implementation Notes  . . . . . . . . . . . . . . .  4-10

Q	SP   4.4  A Sample Program  . . . . . . . . . . . . . . . . .  4-11


Q	SPW5  CP/M 2 System Interface

Q	SP&   5.1  Introduction  . . . . . . . . . . . . . . . . . . .   5-1

Q	SP   5.2  Operating System Call Conventions . . . . . . . . .   5-3

Q	SP   5.3  A Sample File-to-File Copy Program  . . . . . . . .  5-35

Q	SP   5.4  A Sample File Dump Utility  . . . . . . . . . . . .  5-38

Q	SP   5.5  A Sample Random Access Program  . . . . . . . . . .  5-42

Q	SP   5.6  System Function Summary . . . . . . . . . . . . . .  5-50


Q	SPW6  CP/M 2 Alteration

Q	SP&   6.1  Introduction  . . . . . . . . . . . . . . . . . . .   6-1

Q	SP   6.2  First-level System Regeneration . . . . . . . . . .   6-2

Q	SP   6.3  Second-level System Generation  . . . . . . . . . .   6-5

Q	SP   6.4  Sample GETSYS and PUTSYS Programs . . . . . . . . .   6-9



M                               vX




X=WTable of Contents

=&W(continued)



Q	SP&   6.5  Disk Organization . . . . . . . . . . . . . . . . .  6-11

Q	SP   6.6  The BIOS Entry Points . . . . . . . . . . . . . . .  6-13

Q	SP   6.7  A Sample BIOS . . . . . . . . . . . . . . . . . . .  6-21

Q	SP   6.8  A Sample Cold Start Loader  . . . . . . . . . . . .  6-21

Q	SP   6.9  Reserved Locations in Page Zero . . . . . . . . . .  6-22

Q	SP   6.10  Disk Parameter Tables  . . . . . . . . . . . . . .  6-23

Q	SP   6.11  The DISKDEF Macro Library  . . . . . . . . . . . .  6-28

Q	SP   6.12  Sector Blocking and Deblocking . . . . . . . . . .  6-32




































M                               viX




X=WAppendixes



Q	SP&WA  &Basic Input/Output System (BIOS)  . . . . . . . . . . .   A-1


Q	SPWB  &A Skeletal CBIOS  . . . . . . . . . . . . . . . . . . .   B-1


Q	SPWC  &A Skeletal GETSYS/PUTSYS Program  . . . . . . . . . . .   C-1


Q	SPWD  &The Model 800 Cold Start Loader for CP/M 2  . . . . . .   D-1


Q	SPWE  &A Skeletal Cold Start Loader  . . . . . . . . . . . . .   E-1


Q	SPWF  &CP/M Disk Definition Library  . . . . . . . . . . . . .   F-1


Q	SPWG  &Blocking and Deblocking Algorithms  . . . . . . . . . .   G-1


Q	SPWH  &Glossary  . . . . . . . . . . . . . . . . . . . . . . .   H-1


Q	SPWI  &CP/M Error Messages . . . . . . . . . . . . . . . . . .   I-1




























M                               viiX




X=WTables, Figures, and Listings



Q	SP&WTables

Q	SP&     1-1.   Line-editing Control Characters . . . . . . . .  1-10
Q	SP     1-2.   CP/M Transient Commands . . . . . . . . . . . .  1-11
Q	SP     1-3.   Physical Devices  . . . . . . . . . . . . . . .  1-14
Q	SP     1-4.   PIP Parameters  . . . . . . . . . . . . . . . .  1-24

Q	SP     2-1.   ED Text Transfer Commands . . . . . . . . . . .   2-3
Q	SP     2-2.   Editing Commands  . . . . . . . . . . . . . . .   2-6
Q	SP     2-3.   Line-editing Controls . . . . . . . . . . . . .   2-7
Q	SP     2-4.   Error Message Symbols . . . . . . . . . . . . .  2-13
Q	SP     2-5.   ED Control Characters . . . . . . . . . . . . .  2-14
Q	SP     2-6.   ED Commands . . . . . . . . . . . . . . . . . .  2-15

Q	SP     3-1.   Reserved Characters . . . . . . . . . . . . . .   3-6
Q	SP     3-2.   Arithmetic and Logical Operators  . . . . . . .   3-7
Q	SP     3-3.   Assembler Directives  . . . . . . . . . . . . .   3-9
Q	SP     3-4.   Jumps, Calls, and Returns . . . . . . . . . . .  3-15
Q	SP     3-5.   Immediate Operand Instructions  . . . . . . . .  3-16
Q	SP     3-6.   Increment and Decrement Instructions  . . . . .  3-17
Q	SP     3-7.   Data Movement Instructions  . . . . . . . . . .  3-17
Q	SP     3-8.   Arithmetic Logic Unit Operations  . . . . . . .  3-18
Q	SP     3-9.   Error Codes . . . . . . . . . . . . . . . . . .  3-20
Q	SP     3-10.  Error Messages  . . . . . . . . . . . . . . . .  3-21

Q	SP     4-1.   Line-editing Controls . . . . . . . . . . . . .   4-2
Q	SP     4-2.   DDT Commands  . . . . . . . . . . . . . . . . .   4-2
Q	SP     4-3.   CPU Registers . . . . . . . . . . . . . . . . .   4-9

Q	SP     5-1.   CP/M Filetypes  . . . . . . . . . . . . . . . .   5-6
Q	SP     5-2.   File Control Block Fields . . . . . . . . . . .   5-7
Q	SP     5-3.   Edit Control Characters . . . . . . . . . . . .  5-20

Q	SP     6-1.   Standard Memory Size Values . . . . . . . . . .   6-2
Q	SP     6-2.   Common Values for CP/M Systems  . . . . . . . .   6-7
Q	SP     6-3.   CP/M Disk Sector Allocation . . . . . . . . . .  6-11
Q	SP     6-4.   IOBYTE Field Values . . . . . . . . . . . . . .  6-15
Q	SP     6-5.   BIOS Entry Points . . . . . . . . . . . . . . .  6-16
Q	SP     6-6.   Reserved Locations in Page Zero . . . . . . . .  6-21
Q	SP     6-7.   Disk Parameter Headers  . . . . . . . . . . . .  6-23
Q	SP     6-8.   BSH and BLM Values  . . . . . . . . . . . . . .  6-25
Q	SP     6-9.   EXM Values  . . . . . . . . . . . . . . . . . .  6-25
Q	SP     6-10.  BLS Tabluation  . . . . . . . . . . . . . . . .  6-26

Q	SP     I-1.   CP/M Error Messages . . . . . . . . . . . . . .   I-1


Q	SPWFigures

Q	SP&     2-1.   Overall ED Operation  . . . . . . . . . . . . .   2-2
Q	SP     2-2.   Memory Buffer Organization  . . . . . . . . . .   2-2


M                               viiiX




X=WTables, Figures, and Listings

=&W(continued)



Q	SP&WFigures

Q	SP&     2-3.   Logical Organization of Memory Buffer . . . . .   2-4

Q	SP     5-1.   CP/M Memory Organization  . . . . . . . . . . .   5-1
Q	SP     5-2.   File Control Block Format . . . . . . . . . . .   5-7

Q	SP     6-1.   IOBYTE Fields . . . . . . . . . . . . . . . . .  6-15
Q	SP     6-2.   Disk Parameter Header Format  . . . . . . . . .  6-22
Q	SP     6-3.   Disk Parameter Header Table . . . . . . . . . .  6-23
Q	SP     6-4.   Disk Parameter Block Format . . . . . . . . . .  6-24
Q	SP     6-5.   AL0 and AL1 . . . . . . . . . . . . . . . . . .  6-25


Q	SPWListings

Q	SP&     6-1.   GETSYS Program  . . . . . . . . . . . . . . . .   6-9
Q	SP     6-2.   BIOS Entry Points . . . . . . . . . . . . . . .  6-13

































M                               ixX




X=WSection 1

=WCP/M Features and Facilities



Q	SP&W1.1  Introduction

Q	SPM&CP/M  is a monitor control program for microcomputer system
XQ	SPMdevelopment that uses floppy disks or Winchester hard disks for
XQ	SPMbackup storage.  Using a computer system based on the Intel  8080
XQ	SPMmicrocomputer, CP/M provides an environment for program
XQ	SPMconstruction, storage, and editing, along with assembly and program
XQ	SPMcheck-out facilities.  CP/M can be easily altered to execute with
XQ	SPMany computer configuration that uses a Zilog  Z80  or an Intel 8080
XQ	SPMCentral Processing Unit (CPU) and has at least 20K bytes of main
XQ	SPMmemory with up to 16 disk drives.  A detailed discussion of the
XQ	SPMmodifications required for any particular hardware environment is
XQ	SPMgiven in Section 6.  Although the standard Digital Research version
XQ	SPMoperates on a single-density Intel Model 800, microcomputer
XQ	SPMdevelopment system several different hardware manufacturers support
XQ	SPtheir own input-output (I/O) drivers for CP/M.

Q	SPMThe CP/M monitor provides rapid access to programs through a
XQ	SPMcomprehensive file management package.  The file subsystem supports
XQ	SPMa named file structure, allowing dynamic allocation of file space as
XQ	SPMwell as sequential and random file access.  Using this file system,
XQ	SPMa large number of programs can be stored in both source and machine-
XQ	SPexecutable form.

Q	SPMCP/M 2 is a high-performance, single console operating system
XQ	SPMthat uses table-driven techniques to allow field reconfiguration to
XQ	SPMmatch a wide variety of disk capacities.  All fundamental file
XQ	SPMrestrictions are removed, maintaining upward compatibility from
XQ	SPprevious versions of release 1.

Q	SPMFeatures of CP/M 2 include field specification of one to
XQ	SPMsixteen logical drives, each containing up to eight megabytes.  Any
XQ	SPMparticular file can reach the full drive size with the capability of
XQ	SPMexpanding to thirty-two megabytes in future releases.  The directory
XQ	SPMsize can be field-configured to contain any reasonable number of
XQ	SPMentries, and each file is optionally tagged with Read-Only and
XQ	SPMsystem attributes.  Users of CP/M 2 are physically separated by user
XQ	SPMnumbers, with facilities for file copy operations from one user area
XQ	SPMto another.  Powerful relative-record random access functions are
XQ	SPMpresent in CP/M 2 that provide direct access to any of the 65536
XQ	SPrecords of an eight-megabyte file.

Q	SPMCP/M also supports ED, a powerful context editor, ASM , an
XQ	SPMIntel-compatible assembler, and DDT , debugger subsystems.  Optional
XQ	SPMsoftware includes a powerful Intel-compatible macro assembler,
XQ	SPMsymbolic debugger, along with various high-level languages.  When
XQ	SPMcoupled with CP/M's Console Command Processor (CCP), the resulting
XQ	SPfacilities equal or exceed similar large computer facilities.



M                               1-1X

MCP/M Operating System Manual                    1.1  Introduction


XQ	SPCP/M is logically divided into several distinct parts:

Q	SPo BIOS (Basic I/O System), hardware-dependent
Q	SPo BDOS (Basic Disk Operating System)
Q	SPo CCP (Console Command Processor)
Q	SPo TPA (Transient Program Area)

Q	SPMThe BIOS provides the primitive operations necessary to access
XQ	SPMthe disk drives and to interface standard peripherals:  teletype,
XQ	SPMCRT, paper tape reader/punch, and user-defined peripherals.  You can
XQ	SPMtailor peripherals for any particular hardware environment by
XQ	SPMpatching this portion of CP/M.  The BDOS provides disk management by
XQ	SPMcontrolling one or more disk drives containing independent file
XQ	SPMdirectories.  The BDOS implements disk allocation strategies that
XQ	SPMprovide fully dynamic file construction while minimizing head
XQ	SPMmovement across the disk during access.  The BDOS has entry points
XQ	SPMthat include the following primitive operations, which the program
XQ	SPaccesses:

Q	SPo SEARCH looks for a particular disk file by name.
Q	SPo OPEN opens a file for further operations.
Q	SPo CLOSE closes a file after processing.
Q	SPo RENAME changes the name of a particular file.
Q	SPo READ reads a record from a particular file.
Q	SPo WRITE writes a record to a particular file.
Q	SPo MSELECT selects a particular disk drive for further operations.
X
Q	SPMThe CCP provides a symbolic interface between your console and
XQ	SPMthe remainder of the CP/M system.  The CCP reads the console device
XQ	SPMand processes commands, which include listing the file directory,
XQ	SPMprinting the contents of files, and controlling the operation of
XQ	SPMtransient programs, such as assemblers, editors, and debuggers.  The
XQ	SPMstandard commands that are available in the CCP are listed in
XQ	SPSection 1.2.1.

Q	SPMThe last segment of CP/M is the area called the Transient
XQ	SPMProgram Area (TPA).  The TPA holds programs that are loaded from the
XQ	SPMdisk under command of the CCP.  During program editing, for example,
XQ	SPMthe TPA holds the CP/M text editor machine code and data areas.
XQ	SPMSimilarly, programs created under CP/M can be checked out by loading
XQ	SPand executing these programs in the TPA.

Q	SPMAny or all of the CP/M component subsystems can be overlaid by
XQ	SPMan executing program.  That is, once a user's program is loaded into
XQ	SPMthe TPA, the CCP, BDOS, and BIOS areas can be used as the program's
XQ	SPMdata area.  A bootstrap loader is programmatically accessible
XQ	SPMwhenever the BIOS portion is not overlaid; thus, the user program
XQ	SPMneed only branch to the bootstrap loader at the end of execution and
XQ	SPthe complete CP/M monitor is reloaded from disk.

Q	SPMThe CP/M operating system is partitioned into distinct modules,
XQ	SPMincluding the BIOS portion that defines the hardware environment in
XQ	SPMwhich CP/M is executing.  Thus, the standard system is easily
XQ	SPMmodified to any nonstandard environment by changing the peripheral
XQ	SPdrivers to handle the custom system.


M                               1-2X

MCP/M Operating System Manual          1.2  Functional Description


XQ	SPW1.2  Functional Description

Q	SPMY&ou interact with CP/M primarily through the CCP, which reads
XQ	SPMand interprets commands entered through the console.  In general,
XQ	SPMthe CCP addresses one of several disks that are on-line.  The
XQ	SPMstandard system addresses up to sixteen different disk drives.
XQ	SPMThese disk drives are labeled A through P.  A disk is logged-in if
XQ	SPMthe CCP is currently addressing the disk.  To clearly indicate which
XQ	SPMdisk is the currently logged disk, the CCP always prompts the
XQ	SPMoperator with the disk name followed by the symbol >, indicating
XQ	SPMthat the CCP is ready for another command.  Upon initial start-up,
XQ	SPMthe CP/M system is loaded from disk A, and the CCP displays the
XQ	SPfollowing message:

Q	SPCP/M VER x.x

Q	SPMwhere x.x is the CP/M version number.  All CP/M systems are
XQ	SPMinitially set to operate in a 20K memory space, but can be easily
XQ	SPMreconfigured to fit any memory size on the host system (see Section
XQ	SPM1.6.9).  Following system sign-on, CP/M automatically logs in disk
XQ	SPMA, prompts you with the symbol A>, indicating that CP/M is currently
XQ	SPMaddressing disk A, and waits for a command.  The commands are
XQ	SPMimplemented at two levels:  built-in commands and transient
XQ	SPcommands.


Q	SPW1.2.1  General Command Structure

Q	SPMB&uilt-in commands are a part of the CCP program, while
XQ	SPMtransient commands are loaded into the TPA from disk and executed.
XQ	SPThe following are built-in commands:

Q	SPo ERA erases specified files.
Q	SPo DIR lists filenames in the directory.
Q	SPo REN renames the specified file.
Q	SPo SAVE saves memory contents in a file.
Q	SPo TYPE types the contents of a file on the logged disk.

Q	SPMMost of the commands reference a particular file or group of files.
XQ	SPThe form of a file reference is specified in Section 1.2.2.


Q	SPW1.2.2  File References

Q	SPMA& file reference identifies a particular file or group of files
XQ	SPMon a particular disk attached to CP/M.  These file references are
XQ	SPMeither unambiguous (ufn) or ambiguous (afn).  An unambiguous file
XQ	SPMreference uniquely identifies a single file, while an ambiguous file
XQ	SPreference is satisfied by a number of different files.

Q	SPMFile references consist of two parts:  the primary filename and
XQ	SPMthe filetype.  Although the filetype is optional, it usually is
XQ	SPMgeneric.  For example, the filetype ASM is used to denote that the
XQ	SPMfile is an assembly language source file, while the primary filename
XQ	SPMdistinguishes each particular source file.  The two names are
XQ	SPseparated by a period, as shown in the following example:

M                               1-3X

MCP/M Operating System Manual          1.2  Functional Description


XQ	SPfilename.typ

Q	SPMIn this example, filename is the primary filename of eight
XQ	SPMcharacters or less, and typ is the filetype of no more than three
XQ	SPcharacters.  As mentioned above, the name

Q	SPfilename

Q	SPMis also allowed and is equivalent to a filetype consisting of three
XQ	SPMblanks.  The characters used in specifying an unambiguous file
XQ	SPreference cannot contain any of the following special characters:

Q	SP< > . , ; : = ? * [ ] _ % | ( ) / \

Q	SPMwhile all alphanumerics and remaining special characters are
XQ	SPallowed.

Q	SPMAn ambiguous file reference is used for directory search and
XQ	SPMpattern matching.  The form of an ambiguous file reference is
XQ	SPMsimilar to an unambiguous reference, except the symbol ? can be
XQ	SPMinterspersed throughout the primary and secondary names.  In various
XQ	SPMcommands throughout CP/M, the ? symbol matches any character of a
XQ	SPfilename in the ? position.  Thus, the ambiguous reference

Q	SPX?Z.C?M

Q	SPmatches the following unambiguous filenames

Q	SPXYZ.COM

Q	SPand

Q	SPX3Z.CAM

Q	SPMThe * wildcard character can also be used in an ambiguous file
XQ	SPMreference.  The * character replaces all or part of a filename or
XQ	SPfiletype.  Note that

Q	SP*.*

Q	SPequals the ambiguous file reference

Q	SP????????.???

Q	SPwhile

Q	SPfilename.*

Q	SPand

Q	SP*.typ

Q	SPare abbreviations for

Q	SPfilename.???


M                               1-4X

MCP/M Operating System Manual          1.2  Functional Description


X
Q	SPand

Q	SP????????.typ

Q	SPrespectively.  As an example,

Q	SPA>WDIR *.*

Q	SPMi&s interpreted by the CCP as a command to list the names of all disk
XQ	SPMfiles in the directory.  The following example searches only for a
XQ	SPfile by the name X.Y:

Q	SPA>WDIR X,Y

Q	SPS&imilarly, the command

Q	SPA>WDIR X?Y.C?M

Q	SPMc&auses a search for all unambiguous filenames on the disk that
XQ	SPsatisfy this ambiguous reference.

Q	SPMThe following file references are valid unambiguous file
XQ	SPreferences:

Q	SPX
Q	SPX.Y
Q	SPXYZ
Q	SPXYZ.COM
Q	SPGAMMA
Q	SPGAMMA.1

Q	SPMAs an added convenience, the programmer can generally specify
XQ	SPMthe disk drive name along with the filename.  In this case, the
XQ	SPMdrive name is given as a letter A through P followed by a colon (:).
XQ	SPMThe specified drive is then logged-in before the file operation
XQ	SPMoccurs.  Thus, the following are valid file references with disk
XQ	SPname prefixes:

Q	SPA:X.Y
Q	SPP:XYZ.COM
Q	SPB:XYZ
Q	SPB:X.A?M
Q	SPC:GAMMA
Q	SPC:*.ASM

Q	SPMAll alphabetic lower-case letters in file and drive names are
XQ	SPtranslated to upper-case when they are processed by the CCP.


Q	SPW1.3  Switching Disks

Q	SPMT&he operator can switch the currently logged disk by typing the
XQ	SPMdisk drive name, A through P, followed by a colon when the CCP is
XQ	SPMwaiting for console input.  The following sequence of prompts and
XQ	SPcommands can occur after the CP/M system is loaded from disk A:

M                               1-5X

MCP/M Operating System Manual                 1.3  Switching Disks


X
Q	SPCP/M VER 2.2
Q	SPA>WDIR                     &List all files on disk A.
Q	SPA:SAMPLE ASM SAMPLE PRN
Q	SPA>WB:                      &Switch to disk B.
Q	SPB>WDIR *.ASM               &List all ASM files on B.
Q	SPB:DUMP ASM FILES ASM
Q	SPb>WA:                      &Switch back to A.


Q	SPW1.4  Built-in Commands

Q	SPMT&he file and device reference forms described can now be used
XQ	SPMto fully specify the structure of the built-in commands.  Assume the
XQ	SPfollowing abbreviations in the description below:

Q	SPufn   unambiguous file reference
Q	SPafn   ambiguous file reference

Q	SPMRecall that the CCP always translates lower-case characters to
XQ	SPMupper-case characters internally.  Thus, lower-case alphabetics are
XQ	SPMtreated as if they are upper-case in command names and file
XQ	SPreferences.


Q	SPW1.4.1  ERA Command

Q	SPESyntax:R

Q	SPRERA afn

Q	SPMThe ERA (erase) command removes files from the currently
XQ	SPMlogged-in disk, for example, the disk name currently prompted by
XQ	SPMCP/M preceding the >.  The files that are erased are those that
XQ	SPMsatisfy the ambiguous file reference afn.  The following examples
XQ	SPillustrate the use of ERA:


Q	SPERA X.Y         MThe file named X.Y on the currently logged
XQ	#SPMdisk is removed from the disk directory and
XQ	#SPthe space is returned.

Q	SPERA X.*         MAll files with primary name X are removed
XQ	#SPfrom the current disk.

Q	SPERA *.ASM       MAll files with secondary name ASM are
XQ	#SPremoved from the current disk.

Q	SPERA X?Y.C?M     MAll files on the current disk that satisfy
XQ	#SPMthe ambiguous reference X?Y.C?M are
XQ	#SPdeleted.






M                               1-6X

MCP/M Operating System Manual               1.4  Built-in Commands


XQ	SPERA *.*         MErase all files on the current disk.  In
XQ	#SPMthis case, the CCP prompts the console with
XQ	#SPthe message

Q	#SPALL FILES (Y/N)?

Q	#SPMwhich requires a Y response before files
XQ	#SPare actually removed.

Q	SPERA b:*.PRN     MAll files on drive B that satisfy the
XQ	#SPMambiguous reference ????????.PRN are
XQ	#SPMdeleted, independently of the currently
XQ	#SPlogged disk.



Q	SPW1.4.2  DIR Command

Q	SPESyntax:R

Q	SPRDIR afn

Q	SPMThe DIR (directory) command causes the names of all files that
XQ	SPMsatisfy the ambiguous filename afn to be listed at the console
XQ	SPdevice.  As a special case, the command

Q	SPDIR

Q	SPMlists the files on the currently logged disk (the command DIR is
XQ	SPMequivalent to the command DIR *.*).  The following are valid DIR
XQ	SPcommands:

Q	SPDIR X.Y
Q	SPDIR X?Z.C?M
Q	SPDIR ??.Y

Q	SPMSimilar to other CCP commands, the afn can be preceded by a
XQ	SPMdrive name.  The following DIR commands cause the selected drive to
XQ	SPbe addressed before the directory search takes place:

Q	SPDIR B:
Q	SPDIR B:X.Y
Q	SPDIR B:*.A?M

Q	SPMIf no files on the selected disk satisfy the directory request,
XQ	SPthe message NO FILE appears at the console.











M                               1-7X

MCP/M Operating System Manual               1.4  Built-in Commands


XQ	SPW1.4.3  REN Command

Q	SPESyntax:R

Q	SPRREN ufn1=ufn2

Q	SPMThe REN (rename) command allows you to change the names of
XQ	SPMfiles on disk.  The file satisfying ufn2 is changed to ufn1.  The
XQ	SPMcurrently logged disk is assumed to contain the file to rename
XQ	SPM(ufn2).  You can also type a left-directed arrow instead of the
XQ	SPMequal sign if the console supports this graphic character.  The
XQ	SPfollowing are examples of the REN command:


Q	SPREN X.Y=Q.R            The file Q.R is changed to X.Y.

Q	SPREN XYZ.COM=XYZ.XXX    MThe file XYZ.XXX is changed to
XQ	*SPXYZ.COM.


Q	SPMThe operator precedes either ufn1 or ufn2 (or both) by an
XQ	SPMoptional drive address.  If ufn1 is preceded by a drive name, then
XQ	SPMufn2 is assumed to exist on the same drive.  Similarly, if ufn2 is
XQ	SPMpreceded by a drive name, then ufn1 is assumed to exist on the drive
XQ	SPMas well.  The same drive must be specified in both cases if both
XQ	SPMufn1 and ufn2 are preceded by drive names.  The following REN
XQ	SPcommands illustrate this format:


Q	SPREN A:X.ASM=Y.ASM      MThe file Y.ASM is changed to X.ASM
XQ	*SPon drive A.

Q	SPREN B:ZAP.BAS=ZOT.BAS  MThe file ZOT.BAS is changed to
XQ	*SPZAP.BAS on drive B.

Q	SPREN B:A.ASM=B:A.BAK    MThe file A.BAK is renamed to A.ASM
XQ	*SPon drive B.


Q	SPMIf ufn1 is already present, the REN command responds with the
XQ	SPMerror FILE EXISTS and not perform the change.  If ufn2 does not
XQ	SPMexist on the specified disk, the message NO FILE is printed at the
XQ	SPconsole.


Q	SPW1.4.4  SAVE Command

Q	SPESyntax:R

Q	SPRSAVE n ufn

Q	SPMThe SAVE command places n pages (256-byte blocks) onto disk
XQ	SPMfrom the TPA and names this file ufn.  In the CP/M distribution
XQ	SPMsystem, the TPA starts at 100H (hexadecimal) which is the second
XQ	SPMpage of memory.  The SAVE command must specify 2 pages of memory if


M                               1-M8XX

MCP/M Operating System Manual               1.4  Built-in Commands


XQ	SPMthe user's program occupies the area from 100H through 2FFH.  The
XQ	SPMmachine code file can be subsequently loaded and executed.  The
XQ	SPfollowing are examples of the SAVE command:


Q	SPSAVE 3X.COM            Copies 100H through 3FFH to X.COM.

Q	SPSAVE 40 Q              MCopies 100H through 28FFH to Q.
XQ	*SPMNote that 28 is the page count in
XQ	*SPM28FFH, and that 28H = 2*16+8=40
XQ	*SPdecimal.

Q	SPSAVE 4 X.Y             Copies 100H through 4FFH to X.Y.


Q	SPMThe SAVE command can also specify a disk drive in the ufn portion of
XQ	SPthe command, as shown in the following example:

Q	SPSAVE 10 B:ZOT.COM      MCopies 10 pages, 100H through 0AFFH,
XQ	*SPto the file ZOT.COM on drive B.



Q	SPW1.4.5  TYPE Command

Q	SPESyntax:R

Q	SPRTYPE ufn

Q	SPMThe TYPE command displays the content of the ASCII source file
XQ	SPMufn on the currently logged disk at the console device.  The
XQ	SPfollowing are valid TYPE commands:

Q	SPTYPE X.Y
Q	SPTYPE X.PLM
Q	SPTYPE XXX

Q	SPMThe TYPE command expands tabs, CTRL-I characters, assuming tab
XQ	SPMpositions are set at every eighth column.  The ufn can also
XQ	SPreference a drive name.

Q	SPTYPE B:X.PRN    The file X.PRN from drive B is displayed.


Q	SPW1.4.6  USER Command

Q	SPESyntax:R

Q	SPRUSER n

Q	SPMThe USER command allows maintenance of separate files in the
XQ	SPMsame directory.  In the syntax line, n is an integer value in the
XQ	SPMrange 0 to 15.  On cold start, the operator is automatically logged
XQ	SPMinto user area number 0, which is compatible with standard CP/M 1
XQ	SPMdirectories.  You can issue the USER command at any time to move to


M                               1-M9XX

MCP/M Operating System Manual               1.4  Built-in Commands


XQ	SPManother logical area within the same directory.  Drives that are
XQ	SPMlogged-in while addressing one user number are automatically active
XQ	SPMwhen the operator moves to another.  A user number is simply a
XQ	SPMprefix that accesses particular directory entries on the active
XQ	SPdisks.

Q	SPMThe active user number is maintained until changed by a
XQ	SPMsubsequent USER command, or until a cold start when user 0 is again
XQ	SPassumed.


Q	SPW1.5  Line Editing and Output Control

Q	SPMThe CCP allows certain line-editing functions while typing
XQ	SPMcommand lines.  The CTRL-key sequences are obtained by pressing the
XQ	SPMcontrol and letter keys simultaneously.  Further, CCP command lines
XQ	SPMare generally up to 255 characters in length; they are not acted
XQ	SPupon until the carriage return key is pressed.


=WTable 1-1.  Line-editing Control Characters

Q	SP9Q	GSP0Q	SP&Character                      Meaning

Q	SPCTRL-C      MReboots CP/M system when pressed at start of
XQ	SPline.

Q	SPCTRL-E      MPhysical end of line; carriage is returned,
XQ	SPMbut line is not sent until the carriage
XQ	SPreturn key is pressed.

Q	SPCTRL-H      Backspaces one character position.

Q	SPCTRL-J      Terminates current input (line feed).

Q	SPCTRL-M      MTerminates current input (carriage return).
X
Q	SPCTRL-P      MCopies all subsequent console output to the
XQ	SPMcurrently assigned list device (see Section
XQ	SPM1.6.1).  Output is sent to the list device
XQ	SPMand the console device until the next CTRL-P
XQ	SPis pressed.

Q	SPCTRL-R      MRetypes current command line; types a clean
XQ	SPMline following character deletion with
XQ	SPrubouts.

Q	SPCTRL-S      MStops the console output temporarily.
XQ	SPMProgram execution and output continue when
XQ	SPMyou press any character at the console, for
XQ	SPMexample another CTRL-S.  This feature stops
XQ	SPMoutput on high speed consoles, such as CRTs,
XQ	SPMin order to view a segment of output before
XQ	SPcontinuing.
Q	SP9Q	LSP0


M                               1-10X

MCP/M Operating System Manual 1.5  Line Editing and Output Control


X=WTable 1-1.  (continued)

Q	SP9Q	GSP0Q	SP&Character                      Meaning

Q	SPCTRL-U      MDeletes the entire line typed at the
XQ	SPconsole.

Q	SPCTRL-X      Same as CTRL-U.

Q	SPCTRL-Z      MEnds input from the console (used in PIP and
XQ	SPED).

Q	SPRUB/DEL     MDeletes and echoes the last character typed
XQ	SPat the console.
Q	SP9Q	LSP0

Q	SPW1.6  Transient Commands

Q	SPMT&ransient commands are loaded from the currently logged disk
XQ	SPMand executed in the TPA.  The transient commands for execution under
XQ	SPMthe CCP are below.  Additional functions are easily defined by the
XQ	SPuser (see Section 1.6.3).


=WTable 1-2.  CP/M Transient Commands

Q	SP9Q	GSP0Q	SP&Command                      Function

Q	SPSTAT       MLists the number of bytes of storage remaining
XQ	SPMon the currently logged disk, provides
XQ	SPMstatistical information about particular
XQ	SPMfiles, and displays or alters device
XQ	SPassignment.

Q	SPASM        MLoads the CP/M assembler and assembles the
XQ	SPspecified program from disk.

Q	SPLOAD       MLoads the file in Intel HEX machine code
XQ	SPMformat and produces a file in machine
XQ	SPMexecutable form which can be loaded into the
XQ	SPMTPA.  This loaded program becomes a new
XQ	SPcommand under the CCP.

Q	SPDDT        MLoads the CP/M debugger into TPA and starts
XQ	SPexecution.

Q	SPPIP        MLoads the Peripheral Interchange Program for
XQ	SPMsubsequent disk file and peripheral transfer
XQ	SPoperations.

Q	SPED         MLoads and executes the CP/M text editor
XQ	SPprogram.

Q	SPSYSGEN     Creates a new CP/M system disk.



M                               1-11XQ	SP9Q	LSP0

MCP/M Operating System Manual              1.6  Transient Commands


X=WTable 1-2.  (continued)

Q	SP9Q	GSP0Q	SP&Command                      Function

Q	SPSUBMIT     MSubmits a file of commands for batch
XQ	SPprocessing.

Q	SPDUMP       Dumps the contents of a file in hex.

Q	SPMOVCPM     MRegenerates the CP/M system for a particular
XQ	SPmemory size.

Q	SP9Q	LSP0
Q	SPMTransient commands are specified in the same manner as built-in
XQ	SPMcommands, and additional commands are easily defined by the user.
XQ	SPMFor convenience, the transient command can be preceded by a drive
XQ	SPMname which causes the transient to be loaded from the specified
XQ	SPdrive into the TPA for execution.  Thus, the command

Q	SPB:STAT

Q	SPMcauses CP/M to temporarily log in drive B for the source of the STAT
XQ	SPMtransient, and then return to the original logged disk for
XQ	SPsubsequent processing.


Q	SPW1.6.1  STAT Command

Q	SPESyntax:R

Q	SPRSTAT
Q	SPSTAT "command line"

Q	SPMThe STAT command provides general statistical information about
XQ	SPMfile storage and device assignment.  Special forms of the command
XQ	SPMline allow the current device assignment to be examined and altered.
XQ	SPMThe various command lines that can be specified are shown with an
XQ	SPexplanation of each form to the right.


Q	SPSTAT            MIf you type an empty command line, the STAT
XQ	#SPMtransient calculates the storage remaining
XQ	#SPMon all active drives, and prints one of the
XQ	#SPfollowing messages:

Q	#SPd: R/W, SPACE:  nnnK

Q	#SPd: R/O, SPACE:  nnnK

Q	#SPMfor each active drive d:, where R/W
XQ	#SPMindicates the drive can be read or written,
XQ	#SPMand R/O indicates the drive is Read-Only (a
XQ	#SPMdrive becomes R/O by explicitly setting it
XQ	#SPMto Read-Only, as shown below, or by
XQ	#SPMinadvertently changing disks without


M                               1-M12XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	#SPMperforming a warm start).  The space
XQ	#SPMremaining on the disk in drive d: is given
XQ	#SPin kilobytes by nnn.

Q	SPSTAT d:         MIf a drive name is given, then the drive is
XQ	#SPMselected before the storage is computed.
XQ	#SPMThus, the command STAT B: could be issued
XQ	#SPMwhile logged into drive A, resulting in the
XQ	#SPmessage

Q	#SPBYTES REMAINING ON B:  nnnK

Q	SPSTAT afn        MThe command line can also specify a set of
XQ	#SPMfiles to be scanned by STAT.  The files
XQ	#SPMthat satisfy afn are listed in alphabetical
XQ	#SPMorder, with storage requirements for each
XQ	#SPfile under the heading:

Q	#SPRECS BYTES EXT D:FILENAME.TYP
Q	#SPrrrr bbbK ee d:filename.typ

Q	#SPMwhere rrrr is the number of 128-byte
XQ	#SPMrecords allocated to the file, bbb is the
XQ	#SPMnumber of kilobytes allocated to the file
XQ	#SPM(bbb=rrrr*128/1024), ee is the number of
XQ	#SPM16K extensions (ee=bbb/16), d is the drive
XQ	#SPMname containing the file (A...P), filename
XQ	#SPMis the eight-character primary filename,
XQ	#SPMand typ is the three-character filetype.
XQ	#SPMAfter listing the individual files, the
XQ	#SPstorage usage is summarized.

Q	SPSTAT d:afn      MThe drive name can be given ahead of the
XQ	#SPMafn.  The specified drive is first
XQ	#SPMselected, and the form STAT afn is
XQ	#SPexecuted.

Q	SPSTAT d:=R/O     MThis form sets the drive given by d to
XQ	#SPMRead-Only, remaining in effect until the
XQ	#SPMnext warm or cold start takes place.  When
XQ	#SPa disk is Read-Only, the message

Q	#SPBDOS ERR ON d:  Read-Only

Q	#SPMappears if there is an attempt to write to
XQ	#SPMthe Read-Only disk.  CP/M waits until a key
XQ	#SPMis pressed before performing an automatic
XQ	#SPMwarm start, at which time the disk becomes
XQ	#SPR/W.








M                               1-13X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPMThe STAT command allows you to control the physical-to-logical
XQ	SPMdevice assignment.  See the IOBYTE function described in Sections 5
XQ	SPMand 6.  There are four logical peripheral devices that are, at any
XQ	SPMparticular instant, each assigned one of several physical peripheral
XQ	SPdevices.  The following is a list of the four logical devices:


Q	SPo MCON: is the system console device, used by CCP for
XQ	SPcommunication with the operator.

Q	SPo RDR: is the paper tape reader device.

Q	SPo PUN: is the paper tape punch device.

Q	SPo LST: is the output list device.


Q	SPMThe actual devices attached to any particular computer system
XQ	SPMare driven by subroutines in the BIOS portion of CP/M.  Thus, the
XQ	SPMlogical RDR: device, for example, could actually be a high speed
XQ	SPMreader, teletype reader, or cassette tape.  To allow some
XQ	SPMflexibility in device naming and assignment, several physical
XQ	SPdevices are defined in Table 1-3.


=WTable 1-3.  Physical Devices
Q	SP9Q	GSP0
Q	SPDevice                       Meaning

Q	SPTTY:    Teletype device (slow speed console)

Q	SPCRT:    Cathode ray tube device (high speed console)

Q	SPBAT:    MBatch processing (console is current RDR:,
XQ	SPoutput goes to current LST: device)

Q	SPUC1:    User-defined console

Q	SPPTR:    Paper tape reader (high speed reader)

Q	SPUR1:    User-defined reader #1

Q	SPUR2:    User-defined reader #2

Q	SPPTP:    Paper tape punch (high speed punch)

Q	SPUP1:    User-defined punch #1

Q	SPUP2:    User-defined punch #2

Q	SPLPT:    Line printer

Q	SPUL1:    User-defined list device #1
Q	SP9Q	LSP0


M                               1-14X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPMIt is emphasized that the physical device names might not
XQ	SPMactually correspond to devices that the names imply.  That is, you
XQ	SPMcan implement the PTP: device as a cassette write operation.  The
XQ	SPMexact correspondence and driving subroutine is defined in the BIOS
XQ	SPMportion of CP/M.  In the standard distribution version of CP/M,
XQ	SPMthese devices correspond to their names on the Model 800 development
XQ	SPsystem.

Q	SPThe command,

Q	SPSTAT VAL:

Q	SPMproduces a summary of the available status commands, resulting in
XQ	SPthe output:

Q	SPTemp R/O Disk d:$R/O
Q	SPSet Indicator: filename.typ $R/O $R/W $SYS $DIR
Q	SPDisk Status: DSK: d:DSK
Q	SPIobyte Assign:

Q	SPMwhich gives an instant summary of the possible STAT commands and
XQ	SPshows the permissible logical-to-physical device assignments:

Q	SPCON: = TTY: CRT: BAT: UC1:
Q	SPRDR: = TTY: PTR: UR1: UR2:
Q	SPPUN: = TTY: PTP: UP1: UP2:
Q	SPLST: = TTY: CRT: LPT: UL1:

Q	SPMThe logical device to the left takes any of the four physical
XQ	SPMassignments shown to the right.  The current logical-to-physical
XQ	SPmapping is displayed by typing the command:

Q	SPSTAT DEV:

Q	SPMThis command produces a list of each logical device to the left and
XQ	SPMthe current corresponding physical device to the right.  For
XQ	SPexample, the list might appear as follows:

Q	SPCON: = CRT:
Q	SPRDR: = UR1:
Q	SPPUN: = PTP:
Q	SPLST: = TTY:

Q	SPMThe current logical-to-physical device assignment is changed by
XQ	SPtyping a STAT command of the form:

Q	SPSTAT ld1 = pd1, ld2 = pd2, ... , ldn = pdn

Q	SPMwhere ld1 through ldn are logical device names and pd1 through pdn
XQ	SPMare compatible physical device names.  For example, ldi and pdi
XQ	SPMappear on the same line in the VAL: command shown above.  The
XQ	SPMfollowing example shows valid STAT commands that change the current
XQ	SPlogical-to-physical device assignments:



M                               1-15X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPSTAT CON:=CRT:
Q	SPSTAT PUN:=TTY:, LST:=LPT:, RDR:=TTY:

Q	SPThe command form,

Q	SPSTAT d:filename.typ $S

Q	SPMwhere d: is an optional drive name and filename.typ is an
XQ	SPMunambiguous or ambiguous filename, produces the following output
XQ	SPdisplay format:


Q	SPSize        Recs      Bytes          Ext Acc

Q	SP   48        48         6K       1 R/O A:ED.COM
Q	SP   55        55        12K       1 R/O (A:PIP.COM)
Q	SP65536       128        16K       2 R/W A:X.DAT


Q	SPMwhere the $S parameter causes the Size field to be displayed.
XQ	SPMWithout the $S, the Size field is skipped, but the remaining fields
XQ	SPMare displayed.  The Size field lists the virtual file size in
XQ	SPMrecords, while the Recs field sums the number of virtual records in
XQ	SPMeach extent.  For files constructed sequentially, the Size and Recs
XQ	SPMfields are identical.  The Bytes field lists the actual number of
XQ	SPMbytes allocated to the corresponding file.  The minimum allocation
XQ	SPMunit is determined at configuration time; thus, the number of bytes
XQ	SPMcorresponds to the record count plus the remaining unused space in
XQ	SPMthe last allocated block for sequential files.  Random access files
XQ	SPMare given data areas only when written, so the Bytes field contains
XQ	SPMthe only accurate allocation figure.  In the case of random access,
XQ	SPMthe Size field gives the logical end-of-file record position and the
XQ	SPMRecs field counts the logical records of each extent.  Each of these
XQ	SPMextents, however, can contain unallocated holes even though they are
XQ	SPadded into the record count.

Q	SPMThe Ext field counts the number of physical extents allocated
XQ	SPMto the file.  The Ext count corresponds to the number of directory
XQ	SPMentries given to the file.  Depending on allocation size, there can
XQ	SPMbe up to 128K bytes (8 logical extents) directly addressed by a
XQ	SPMsingle directory entry.  In a special case, there are actually 256K
XQ	SPbytes that can be directly addressed by a physical extent.

Q	SPMThe Acc field gives the R/O or R/W file indicator, which you
XQ	SPcan change using the commands shown.  The four command forms,

Q	SPSTAT d:filename.typ $R/O
Q	SPSTAT d:filename.typ $R/W
Q	SPSTAT d:filename.typ $SYS
Q	SPSTAT d:filename.typ $DIR

Q	SPMset or reset various permanent file indicators.  The R/O indicator
XQ	SPMplaces the file, or set of files, in a Read-Only status until
XQ	SPMchanged by a subsequent STAT command.  The R/O status is recorded in
XQ	SPMthe directory with the file so that it remains R/O through


M                               1-M16XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMintervening cold start operations.  The R/W indicator places the
XQ	SPMfile in a permanent Read-Write status.  The SYS indicator attaches
XQ	SPMthe system indicator to the file, while the DIR command removes the
XQ	SPMsystem indicator.  The filename.typ may be ambiguous or unambiguous,
XQ	SPMbut files whose attributes are changed are listed at the console
XQ	SPwhen the change occurs.  The drive name denoted by d: is optional.

Q	SPMWhen a file is marked R/O, subsequent attempts to erase or
XQ	SPMwrite into the file produce the following BDOS message at your
XQ	SPscreen:

Q	SPBDOS Err on d: File R/O

Q	SPMlists the drive characteristics of the disk named by d: that is in
XQ	SPMthe range A:, B:,...,P:.  The drive characteristics are listed in
XQ	SPthe following format:

Q	SP            d: Drive Characteristics
Q	SP        65536: 128 Byte Record Capacity
Q	SP         8192: Kilobyte Drive Capacity
Q	SP          128: 32 Byte Directory Entries
Q	SP            0: Checked Directory Entries
Q	SP         1024: Records/Extent
Q	SP          128: Records/Block
Q	SP           58: Sectors/Track
Q	SP            2: Reserved Tracks

Q	SPMwhere d: is the selected drive, followed by the total record
XQ	SPMcapacity (65536 is an eight-megabyte drive), followed by the total
XQ	SPMcapacity listed in kilobytes.  The directory size is listed next,
XQ	SPMfollowed by the checked entries.  The number of checked entries is
XQ	SPMusually identical to the directory size for removable media, because
XQ	SPMthis mechanism is used to detect changed media during CP/M operation
XQ	SPMwithout an intervening warm start.  For fixed media, the number is
XQ	SPMusually zero, because the media are not changed without at least a
XQ	SPcold or warm start.

Q	SPMThe number of records per extent determines the addressing
XQ	SPMcapacity of each directory entry (1024 times 128 bytes, or 128K in
XQ	SPMthe previous example).  The number of records per block shows the
XQ	SPMbasic allocation size (in the example, 128 records/block times 128
XQ	SPMbytes per record, or 16K bytes per block).  The listing is then
XQ	SPMfollowed by the number of physical sectors per track and the number
XQ	SPof reserved tracks.

Q	SPMFor logical drives that share the same physical disk, the
XQ	SPMnumber of reserved tracks can be quite large because this mechanism
XQ	SPMis used to skip lower-numbered disk areas allocated to other logical
XQ	SPdisks.  The command form

Q	SPSTAT DSK:

Q	SPMproduces a drive characteristics table for all currently active
XQ	SPdrives.  The final STAT command form is



M                               1-17X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPSTAT USR:

Q	SPMwhich produces a list of the user numbers that have files on the
XQ	SPcurrently addressed disk.  The display format is

Q	SPActive User:   0
Q	SPActive Files:  0 1 3

Q	SPMwhere the first line lists the currently addressed user number, as
XQ	SPMset by the last CCP USER command, followed by a list of user numbers
XQ	SPMscanned from the current directory. In this case, the active user
XQ	SPMnumber is 0 (default at cold start) with three user numbers that
XQ	SPMhave active files on the current disk.  The operator can
XQ	SPMsubsequently examine the directories of the other user numbers by
XQ	SPMlogging in with USER 1 or USER 3 commands, followed by a DIR command
XQ	SPat the CCP level.


Q	SPW1.6.2  ASM Command

Q	SPESyntax:R

Q	SPRASM ufn

Q	SPMThe ASM command loads and executes the CP/M 8080 assembler.
XQ	SPMThe ufn specifies a source file containing assembly language
XQ	SPMstatements, where the filetype is assumed to be ASM and is not
XQ	SPspecified.  The following ASM commands are valid:

Q	SPASM X
Q	SPASM GAMMA

Q	SPMThe two-pass assembler is automatically executed.  Assembly errors
XQ	SPthat occur during the second pass are printed at the console.

Q	SPThe assembler produces a file:

Q	SPX.PRN

Q	SPMwhere X is the primary name specified in the ASM command.  The PRN
XQ	SPMfile contains a listing of the source program with embedded tab
XQ	SPMcharacters if present in the source program, along with the machine
XQ	SPMcode generated for each statement and diagnostic error messages, if
XQ	SPMany.  The PRN file is listed at the console using the TYPE command,
XQ	SPMor sent to a peripheral device using PIP (see Section 1.6.4).  Note
XQ	SPMthat the PRN file contains the original source program, augmented by
XQ	SPMmiscellaneous assembly information in the leftmost 16 columns; for
XQ	SPMexample, program addresses and hexadecimal machine code.  The PRN
XQ	SPMfile serves as a backup for the original source file.  If the source
XQ	SPMfile is accidentally removed or destroyed, the PRN file can be
XQ	SPMedited by removing the leftmost 16 characters of each line (see
XQ	SPMSection 2).  This is done by issuing a single editor macro command.
XQ	SPMThe resulting file is identical to the original source file and can
XQ	SPMbe renamed from PRN to ASM for subsequent editing and assembly.  The
XQ	SPfile


M                               1-18X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPX.HEX

Q	SPMis also produced, which contains 8080 machine language in Intel HEX
XQ	SPMformat suitable for subsequent loading and execution (see Section
XQ	SPM1.6.3).  For complete details of CP/M's assembly language program,
XQ	SPsee Section 3.

Q	SPMThe source file for assembly is taken from an alternate disk by
XQ	SPMprefixing the assembly language filename by a disk drive name.  The
XQ	SPcommand

Q	SPASM B:ALPHA

Q	SPMloads the assembler from the currently logged drive and processes
XQ	SPMthe source program ALPHA.ASM on drive B.  The HEX and PRN files are
XQ	SPalso placed on drive B in this case.


Q	SPW1.6.3  LOAD Command

Q	SPESyntax:R

Q	SPRLOAD ufn

Q	SPMThe LOAD command reads the file ufn, which is assumed to
XQ	SPMcontain HEX format machine code, and produces a memory image file
XQ	SPMthat can subsequently be executed.  The filename ufn is assumed to
XQ	SPbe of the form:

Q	SPX.HEX

Q	SPMand only the filename X need be specified in the command.  The LOAD
XQ	SPcommand creates a file named

Q	SPX.COM

Q	SPMthat marks it as containing machine executable code.  The file is
XQ	SPMactually loaded into memory and executed when the user types the
XQ	SPMfilename X immediately after the prompting character > printed by
XQ	SPthe CCP.

Q	SPMGenerally, the CCP reads the filename X following the prompting
XQ	SPMcharacter and looks for a built-in function name.  If no function
XQ	SPMname is found, the CCP searches the system disk directory for a file
XQ	SPby the name

Q	SPX.COM

Q	SPMIf found, the machine code is loaded into the TPA, and the program
XQ	SPMexecutes.  Thus, the user need only LOAD a hex file once; it can be
XQ	SPMsubsequently executed any number of times by typing the primary
XQ	SPMname.  This way, you can invent new commands in the CCP.
XQ	SPMInitialized disks contain the transient commands as COM files, which
XQ	SPMare optionally deleted.  The operation takes place on an alternate
XQ	SPdrive if the filename is prefixed by a drive name.  Thus,

M                               1-19X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPLOAD B:BETA

Q	SPMbrings the LOAD program into the TPA from the currently logged disk
XQ	SPand operates on drive B after execution begins.

Q	SPMWNote:  &the BETA.HEX file must contain valid Intel format hexadecimal
XQ	SPMmachine code records (as produced by the ASM program, for example)
XQ	SPMthat begin at 100H of the TPA.  The addresses in the hex records
XQ	SPMmust be in ascending order; gaps in unfilled memory regions are
XQ	SPMfilled with zeroes by the LOAD command as the hex records are read.
XQ	SPMThus, LOAD must be used only for creating CP/M standard COM files
XQ	SPMthat operate in the TPA.  Programs that occupy regions of memory
XQ	SPother than the TPA are loaded under DDT.


Q	SPW1.6.4  PIP

Q	SPESyntax:R

Q	SPRPIP
Q	SPPIP destination=source#1, source#2, ..., source #n

Q	SPMPIP is the CP/M Peripheral Interchange Program that implements
XQ	SPMthe basic media conversion operations necessary to load, print,
XQ	SPMpunch, copy, and combine disk files.  The PIP program is initiated
XQ	SPby typing one of the following forms:

Q	SPPIP
Q	SPPIP command line

Q	SPMIn both cases PIP is loaded into the TPA and executed.  In the first
XQ	SPMform, PIP reads command lines directly from the console, prompted
XQ	SPMwith the * character, until an empty command line is typed (for
XQ	SPMexample, a single carriage return is issued by the operator).  Each
XQ	SPMsuccessive command line causes some media conversion to take place
XQ	SPaccording to the rules shown below.

Q	SPMIn the second form, the PIP command is equivalent to the first,
XQ	SPMexcept that the single command line given with the PIP command is
XQ	SPMautomatically executed, and PIP terminates immediately with no
XQ	SPMfurther prompting of the console for input command lines.  The form
XQ	SPof each command line is

Q	SPdestination = source#1, source#2, ..., source#n

Q	SPMwhere destination is the file or peripheral device to receive the
XQ	SPMdata, and source#1, ..., source#n is a series of one or more files
XQ	SPor devices that are copied from left to right to the destination.

Q	SPMWhen multiple files are given in the command line (for example,
XQ	SPMn>1), the individual files are assumed to contain ASCII characters,
XQ	SPMwith an assumed CP/M end-of-file character (CTRL-Z) at the end of
XQ	SPMeach file (see the O parameter to override this assumption).  Lower-
XQ	SPMcase ASCII alphabetics are internally translated to upper-case to be


M                               1-M20XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMconsistent with CP/M file and device name conventions.  Finally, the
XQ	SPMtotal command line length cannot exceed 255 characters.  CTRL-E can
XQ	SPMbe used to force a physical carriage return for lines that exceed
XQ	SPthe console width.

Q	SPMThe destination and source elements are unambiguous references
XQ	SPMto CP/M source files with or without a preceding disk drive name.
XQ	SPMThat is, any file can be referenced with a preceding drive name (A:
XQ	SPMthrough P:) that defines the particular drive where the file can be
XQ	SPMobtained or stored.  When the drive name is not included, the
XQ	SPMcurrently logged disk is assumed.  The destination file can also
XQ	SPMappear as one or more of the source files, in which case the source
XQ	SPMfile is not altered until the entire concatenation is complete.  If
XQ	SPMit already exists, the destination file is removed if the command
XQ	SPMline is properly formed.  It is not removed if an error condition
XQ	SPMarises.  The following command lines, with explanations to the
XQ	SPright, are valid as input to PIP:


Q	SPX=Y                    MCopies to file X from file Y, where
XQ	*SPMX and Y are unambiguous filenames;
XQ	*SPY remains unchanged.

Q	SPX=Y,Z                  MConcatenates files Y and z and
XQ	*SPMcopies to file X, with Y and Z
XQ	*SPunchanged.

Q	SPX.ASM=Y.ASM,Z.ASM      MCreates the file X.ASM from the
XQ	*SPMconcatenation of the Y and Z.ASM
XQ	*SPfiles.

Q	SPNEW.ZOT=B:OLD.ZAP      MMoves a copy of OLD.ZAPP from drive
XQ	*SPMB to the currently logged disk;
XQ	*SPnames the file NEW.ZOT.

Q	SPB:A.U=B:B.V,A:C.W,D.X  MConcatenates file B.V from drive B
XQ	*SPMwith C.W from drive a and D.X from
XQ	*SPMthe logged disk; creates the file
XQ	*SPA.U on drive b.


Q	SPMFor convenience, PIP allows abbreviated commands for
XQ	SPMtransferring files between disk drives.  The abbreviated PIP forms
XQ	SPare

Q	SPPIP d:=afn
Q	SPPIP dU1D=dU2D:afn
Q	SPPIP ufn = dU2D:
Q	SPPIP dU1D:ufn = dU2D:

Q	SPMThe first form copies all files from the currently logged disk that
XQ	SPMsatisfy the afn to the same files on drive d, where d = A...P.  The
XQ	SPMsecond form is equivalent to the first, where the source for the
XQ	SPMcopy is drive dU2D, where dU2D = A...P.  The third form is equivalent to
XQ	SPMthe command PIP dU1D:ufn=dU2D:ufn which copies the file given by ufn


M                               1-M21XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMfrom drive dU2D to the file ufn on drive dU1D:.  The fourth form is
XQ	SPMequivalent to the third, where the source disk is explicitly given 
XQ	SPby dU2D:.

Q	SPMThe source and destination disks must be different in all of
XQ	SPMthese cases.  If an afn is specified, PIP lists each ufn that
XQ	SPMsatisfies the afn as it is being copied.  If a file exists by the
XQ	SPMsame name as the destination file, it is removed after successful
XQ	SPcompletion of the copy and replaced by the copied file.

Q	SPMThe following PIP commands give examples of valid disk-to-disk
XQ	SPcopy operations:


Q	SPB:=*.COM        MCopies all files that have the secondary
XQ	#SPMname COM to drive B from the current drive.
X
Q	SPA:=B:ZAP.*      MCopies all files that have the primary name
XQ	#SPZAP to drive A from drive B.

Q	SPZAP.ASM=B:      Same as ZAP.ASM=B:ZAP.ASM

Q	SPB:ZOT.COM=A:    Same as B:ZOT.COM=A:ZOT.COM

Q	SPB:=GAMMA.BAS    Same as B:GAMMA.BAS=GAMMA.BAS

Q	SPB:=A:GAMMA.BAS  Same as B:GAMMA.BAS=A:GAMMA.BAS


Q	SPMPIP allows reference to physical and logical devices that are
XQ	SPMattached to the CP/M system.  The device names are the same as given
XQ	SPMunder the STAT command, along with a number of specially named
XQ	SPMdevices.  The following is a list of logical devices given in the
XQ	SPSTAT command

Q	SPCON: (console)
Q	SPRDR: (reader)
Q	SPPUN: (punch)
Q	SPLST: (list)

Q	SPwhile the physical devices are

Q	SPTTY: (console), reader, punch, or list)
Q	SPCRT: (console, or list), UC1: (console)
Q	SPPTR: (reader), UR1: (reader), UR2: (reader)
Q	SPPTP: (punch), UP1: (punch), UP2: (punch)
Q	SPLPT: (list), UL1: (list)

Q	SPMThe BAT: physical device is not included, because this assignment is
XQ	SPMused only to indicate that the RDR: and LST: devices are used for
XQ	SPconsole input/output.

Q	SPMThe RDR, LST, PUN, and CON devices are all defined within the
XQ	SPMBIOS portion of CP/M, and are easily altered for any particular I/O
XQ	SPMsystem.  The current physical device mapping is defined by IOBYTE;


M                               1-M22XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMsee Section 6 for a discussion of this function.  The destination
XQ	SPMdevice must be capable of receiving data, for example, data cannot
XQ	SPMbe sent to the punch, and the source devices must be capable of
XQ	SPgenerating data, for example, the LST: device cannot be read.

Q	SPMThe following list describes additional device names that can
XQ	SPbe used in PIP commands.


Q	SPo MNUL: sends 40 nulls (ASCII 0s) to the device.  This can be
XQ	SPissued at the end of punched output.

Q	SPo MEOF: sends a CP/M end-of-file (ASCII CTRL-Z) to the destination
XQ	SPMdevice (sent automatically at the end of all ASCII data
XQ	SPtransfers through PIP).

Q	SPo MINP: is a special PIP input source that can be patched into the
XQ	SPMPIP program.  PIP gets the input data character-by-character,
XQ	SPMby CALLing location 103H, with data returned in location 109H
XQ	SP(parity bit must be zero).

Q	SPo MOUT: is a special PIP output destination that can be patched
XQ	SPMinto the PIP program.  PIP CALLs location 106H with data in
XQ	SPMregister C for each character to transmit.  Note that locations
XQ	SPM109H through 1FFH of the PIP memory image are not used and can
XQ	SPMbe replaced by special purpose drivers using DDT (see Section
XQ	SP4).

Q	SPo MPRN: is the same as LST:, except that tabs are expanded at
XQ	SPMevery eighth character position, lines are numbered, and page
XQ	SPMejects are inserted every 60 lines with an initial eject (same
XQ	SPas using PIP options [t8np]).


Q	SPMFile and device names can be interspersed in the PIP commands.
XQ	SPMIn each case, the specific device is read until end-of-file (CTRL-Z
XQ	SPMfor ASCII files, and end-of-data for non-ASCII disk files).  Data
XQ	SPMfrom each device or file are concatenated from left to right until
XQ	SPthe last data source has been read.

Q	SPMThe destination device or file is written using the data from
XQ	SPMthe source files, and an end-of-file character, CTRL-Z, is appended
XQ	SPMto the result for ASCII files.  If the destination is a disk file, a
XQ	SPMtemporary file is created ($$$ secondary name) that is changed to
XQ	SPMthe actual filename only on successful completion of the copy.
XQ	SPFiles with the extension COM are always assumed to be non-ASCII.

Q	SPMThe copy operation can be aborted at any time by pressing any
XQ	SPMkey on the keyboard.  PIP responds with the message ABORTED to
XQ	SPMindicate that the operation has not been completed.  If any
XQ	SPMoperation is aborted, or if an error occurs during processing, PIP
XQ	SPMremoves any pending commands that were set up while using the SUBMIT
XQ	SPcommand.




M                               1-23X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMPIP performs a special function if the destination is a disk
XQ	SPMfile with type HEX (an Intel hex-formatted machine code file), and
XQ	SPMthe source is an external peripheral device, such as a paper tape
XQ	SPMreader.  In this case, the PIP program checks to ensure that the
XQ	SPMsource file contains a properly formed hex file, with legal
XQ	SPhexadecimal values and checksum records.

Q	SPMWhen an invalid input record is found, PIP reports an error
XQ	SPMmessage at the console and waits for corrective action.  Usually,
XQ	SPMyou can open the reader and rerun a section of the tape (pull the
XQ	SPMtape back about 20 inches).  When the tape is ready for the reread,
XQ	SPMa single carriage return is typed at the console, and PIP attempts
XQ	SPManother read.  If the tape position cannot be properly read,
XQ	SPMcontinue the read by typing a return following the error message,
XQ	SPMand enter the record manually with the ED program after the disk
XQ	SPfile is constructed.

Q	SPMPIP allows the end-of-file to be entered from the console if
XQ	SPMthe source file is an RDR: device.  In this case, the PIP program
XQ	SPMreads the device and monitors the keyboard.  If CTRL-Z is typed at
XQ	SPthe keyboard, the read operation is terminated normally.

Q	SPThe following are valid PIP commands:


Q	SPPIP LST: = X.PRN

Q	#SPMCopies X.PRN to the LST device and
XQ	#SPterminates the PIP program.

Q	SPPIP

Q	#SPMStarts PIP for a sequence of commands.  PIP
XQ	#SPprompts with *.

Q	SP*CON:=X.ASM,Y.ASM,Z.ASM

Q	#SPMConcatenates three ASM files and copies to
XQ	#SPthe CON device.

Q	SP*X.HEX=CON:,Y.HEX,PTR:

Q	#SPMCreates a HEX file by reading the CON until
XQ	#SPMa CTRL-Z is typed, followed by data from
XQ	#SPMY.HEX and PTR until a CTRL-Z is
XQ	#SPencountered.

Q	SPPIP PUN:=NUL:,X.ASM,EOF:,NUL:

Q	#SPMSends 40 nulls to the punch device; copies
XQ	#SPMthe X.ASM file to the punch, followed by an
XQ	#SPMend-of-file, CTRL-Z, and 40 more null
XQ	#SPcharacters.

Q	SP(carriage return)

Q	#SPA single carriage return stops PIP.

M                               1-24X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPMYou can also specify one or more PIP parameters, enclosed in
XQ	SPMleft and right square brackets, separated by zero or more blanks.
XQ	SPMEach parameter affects the copy operation, and the enclosed list of
XQ	SPMparameters must immediately follow the affected file or device.
XQ	SPMGenerally, each parameter can be followed by an optional decimal
XQ	SPMinteger value (the S and Q parameters are exceptions).  Table 1-4
XQ	SPdescribes valid PIP parameters.


=WTable 1-4.  PIP Parameters
Q	SP9Q	GSP0
Q	SPParameter                      Meaning

Q	SPB         MBlocks mode transfer.  Data are buffered by
XQ	SPMPIP until an ASCII x-off character, CTRL-S,
XQ	SPMis received from the source device.  This
XQ	SPMallows transfer of data to a disk file from a
XQ	SPMcontinuous reading device, such as a cassette
XQ	SPMreader.  Upon receipt of the x-off, PIP
XQ	SPMclears the disk buffers and returns for more
XQ	SPMinput data.  The amount of data that can be
XQ	SPMbuffered depends on the memory size of the
XQ	SPMhost system.  PIP issues an error message if
XQ	SPthe buffers overflow.

Q	SPDn        MDeletes characters that extend past column n
XQ	SPMin the transfer of data to the destination
XQ	SPMfrom the character source.  This parameter is
XQ	SPMgenerally used to truncate long lines that
XQ	SPMare sent to a narrow printer or console
XQ	SPdevice.

Q	SPE         MEchoes all transfer operations to the console
XQ	SPas they are being performed.

Q	SPF         MFilters form-feeds from the file.  All
XQ	SPMembedded form-feeds are removed.  The P
XQ	SPMparameter can be used simultaneously to
XQ	SPinsert new form-feeds.

Q	SPGn        MGets file from user number n (n in the range
XQ	SP0-15).

Q	SPH         MTransfers HEX data.  All data are checked for
XQ	SPMproper Intel hex file format.  Nonessential
XQ	SPMcharacters between hex records are removed
XQ	SPMduring the copy operation.  The console is
XQ	SPMprompted for corrective action in case errors
XQ	SPoccur.

Q	SPI         MIgnores :00 records in the transfer of Intel
XQ	SPMhex format file.  The I parameter
XQ	SPautomatically sets the H parameter.



M                               1-25XQ	SP9Q	LSP0

MCP/M Operating System Manual              1.6  Transient Commands


X=WTable 1-4.  (continued)
Q	SP9Q	GSP0
Q	SPParameter                      Meaning

Q	SPL         MTranslates upper-case alphabetics to lower-
XQ	SPcase.

Q	SPN         MAdds line numbers to each line transferred to
XQ	SPMthe destination, starting at one and
XQ	SPMincrementing by 1.  Leading zeroes are
XQ	SPMsuppressed, and the number is followed by a
XQ	SPMcolon.  If N2 is specified, leading zeroes
XQ	SPMare included and a tab is inserted following
XQ	SPMthe number.  The tab is expanded if T is set.
X
Q	SPO         MTransfers non-ASCII object files.  The normal
XQ	SPCP/M end-of-file is ignored.

Q	SPPn        MIncludes page ejects at every n lines with an
XQ	SPMinitial page eject.  If n = 1 or is excluded
XQ	SPMaltogether, page ejects occur every 60 lines.
XQ	SPMIf the F parameter is used, form-feed
XQ	SPMsuppression takes place before the new page
XQ	SPejects are inserted.

Q	SPQs^Z      MQuits copying from the source device or file
XQ	SPMwhen the string s, terminated by CTRL-Z, is
XQ	SPencountered.

Q	SPR         Reads system files.

Q	SPSs^Z      MStart copying from the source device when the
XQ	SPMstring s, terminated by CTRL-Z, is
XQ	SPMencountered.  The S and Q parameters can be
XQ	SPMused to abstract a particular section of a
XQ	SPMfile, such as a subroutine.  The start and
XQ	SPMquit strings are always included in the copy
XQ	SPoperation.

Q	SPMIf you specify a command line after the PIP
XQ	SPMcommand keyword, the CCP translates strings
XQ	SPMfollowing the S and Q parameters to upper-
XQ	SPMcase.  If you do not specify a command line,
XQ	SPMPIP does not perform the automatic upper-case
XQ	SPtranslation.

Q	SPTn        MExpands tabs, CTRL-I characters, to every nth
XQ	SPMcolumn during the transfer of characters to
XQ	SPthe destination from the source.

Q	SPU         MTranslates lower-case alphabetics to upper-
XQ	SPcase during the copy operation.





M                               1-26XQ	SP9Q	LSP0

MCP/M Operating System Manual              1.6  Transient Commands


X=WTable 1-4.  (continued)
Q	SP9Q	GSP0
Q	SPParameter                      Meaning

Q	SPV         MVerifies that data have been copied correctly
XQ	SPMby rereading after the write operation (the
XQ	SPdestination must be a disk file).

Q	SPW         MWrites over R/O files without console
XQ	SPinterrogation.

Q	SPZ         MZeros the parity bit on input for each ASCII
XQ	SPcharacter.
Q	SP9Q	LSP0

Q	SPMThe following examples show valid PIP commands that specify
XQ	SPparameters in the file transfer.


Q	SPPIP X.ASM=B:[v]

Q	#SPMCopies X.ASM from drive B to the current
XQ	#SPMdrive and verifies that the data were
XQ	#SPproperly copied.


Q	SPPIP LPT:=X.ASM[nt8u]

Q	#SPMCopies X.ASM to the LPT: device; numbers
XQ	#SPMeach line, expands tabs to every eighth
XQ	#SPMcolumn, and translates lower-case
XQ	#SPalphabetics to upper-case.


Q	SPPIP PUN:=X.HEX[i],Y.ZOT[h]

Q	#SPMFirst copies X.HEX to the PUN: device and
XQ	#SPMignores the trailing :00 record in X.HEX;
XQ	#SPMcontinues the transfer of data by reading
XQ	#SPMY.ZOT, which contains HEX records,
XQ	#SPincluding any :00 records it contains.


Q	SPPIP X.LIB=Y.ASM[sSUBRI:^z qJMP L3^z]

Q	#SPMCopies from the file Y.ASM into the file
XQ	#SPMX.LIB.  The command starts the copy when
XQ	#SPMthe string SUBR1: has been found, and quits
XQ	#SPMcopying after the string JMP L3 is
XQ	#SPencountered.







M                               1-27X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPPIP PRN:=X.ASM[p50]

Q	#SPMSends X.ASM to the LST: device with line
XQ	#SPMnumbers, expands tabs to every eighth
XQ	#SPMcolumn, and ejects pages at every 50th
XQ	#SPMline.  The assumed parameter list for a PRN
XQ	#SPMfile is nt8p60; p50 overrides the default
XQ	#SPvalue.


Q	SPMUnder normal operation, PIP does not overwrite a file that is
XQ	SPMset to a permanent R/O status.  If an attempt is made to overwrite
XQ	SPan R/O file, the following prompt appears:

Q	SPDESTINATION FILE IS R/O, DELETE (Y/N)?

Q	SPMIf you type Y, the file is overwritten.  Otherwise, the following
XQ	SPresponse appears:

Q	SP** NOT DELETED **

Q	SPMThe file transfer is skipped, and PIP continues with the next
XQ	SPMoperation in sequence.  To avoid the prompt and response in the case
XQ	SPMof R/O file overwrite, the command line can include the W parameter,
XQ	SPas shown in this example:

Q	SPPIP A:=B:*.COM[W]

Q	SPMThe W parameter copies all nonsystem files to the A drive from the B
XQ	SPMdrive and overwrites any R/O files in the process.  If the operation
XQ	SPMinvolves several concatenated files, the W parameter need only be
XQ	SPincluded with the last file in the list, as in this example:

Q	SPPIP A.DAT=B.DAT,F:NEW.DAT,G:OLD.DAT[W]

Q	SPMFiles with the system attribute can be included in PIP
XQ	SPMtransfers if the R parameter is included; otherwise, system files
XQ	SPare not recognized.  For example, the command line:

Q	SPPIP ED.COM=B:ED.COM[R]

Q	SPMreads the ED.COM file from the B drive, even if it has been marked
XQ	SPMas an R/O and system file.  The system file attributes are copied,
XQ	SPif present.

Q	SPMDownward compatibility with previous versions of CP/M is only
XQ	SPMmaintained if the file does not exceed one megabyte, no file
XQ	SPMattributes are set, and the file is created by user 0.  If
XQ	SPMcompatibility is required with nonstandard, for example, double-
XQ	SPMdensity versions of 1.4, it might be necessary to select 1.4
XQ	SPMcompatibility mode when constructing the internal disk parameter
XQ	SPMblock.  See Section 6 and refer to Section 6.10, which describes
XQ	SPBIOS differences.




M                               1-28X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMWNote:  &to copy files into another user area, PIP.COM must be located
XQ	SPMin that user area.  Use the following procedure to make a copy of
XQ	SPPIP.COM in another user area.


Q	SPUSER 0                            Log in user 0.

Q	SPDDT PIP.COM (note PIP size s)     Load PIP to memory.

Q	SPGO                                Return to CCP.

Q	SPUSER 3                            Log in user 3.

Q	SPSAVEs PIP.COM


Q	SPMIn this procedure, s is the integral number of memory pages, 256-
XQ	SPMbyte segments, occupied by PIP.  The number s can be determined when
XQ	SPMPIP.COM is loaded under DDT, by referring to the value under the
XQ	SPMNEXT display.  If, for example, the next available address is 1D00,
XQ	SPMthen PIP.COM requires 1C hexadecimal pages, or 1 times 16 + 12 = 28
XQ	SPMpages, and the value of s is 28 in the subsequent save.  Once PIP is
XQ	SPMcopied in this manner, it can be copied to another disk belonging to
XQ	SPthe same user number through normal PIP transfers.


Q	SPW1.6.5  ED Command

Q	SPESyntax:R

Q	SPRED ufn

Q	SPMThe ED program is the CP/M system context editor that allows
XQ	SPMcreation and alteration of ASCII files in the CP/M environment.
XQ	SPMComplete details of operation are given in Section 2.  ED allows the
XQ	SPMoperator to create and operate upon source files that are organized
XQ	SPMas a sequence of ASCII characters, separated by end-of-line
XQ	SPMcharacters (a carriage return/line-feed sequence).  There is no
XQ	SPMpractical restriction on line length (no single line can exceed the
XQ	SPMsize of the working memory) that is defined by the number of
XQ	SPcharacters typed between carriage returns.

Q	SPMThe ED program has a number of commands for character string
XQ	SPMsearching, replacement, and insertion that are useful for creating
XQ	SPMand correcting programs or text files under CP/M.  Although the CP/M
XQ	SPMhas a limited memory work space area (approximately 5000 characters
XQ	SPMin a 20K CP/M system), the file size that can be edited is not
XQ	SPlimited, since data are easily paged through this work area.

Q	SPMIf it does not exist, ED creates the specified source file and
XQ	SPMopens the file for access.  If the source file does exist, the
XQ	SPMprogrammer appends data for editing (see the A command).  The
XQ	SPMappended data can then be displayed, altered, and written from the
XQ	SPMwork area back to the disk (see the W command).  Particular points
XQ	SPMin the program can be automatically paged and located by context,


M                               1-M29XX

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMallowing easy access to particular portions of a large file (see the
XQ	SPN command).

Q	SPIf you type the following command line:

Q	SPED X.ASM

Q	SPthe ED program creates an intermediate work file with the name

Q	SPX.$$$

Q	SPMto hold the edited data during the ED run.  Upon completion of ED,
XQ	SPMthe X.ASM file (original file) is renamed to X.BAK, and the edited
XQ	SPMwork file is renamed to X.ASM.  Thus, the X.BAK file contains the
XQ	SPMoriginal unedited file, and the X.ASM file contains the newly edited
XQ	SPMfile.  The operator can always return to the previous version of a
XQ	SPMfile by removing the most recent version and renaming the previous
XQ	SPMversion.  If the current X.ASM file has been improperly edited, the
XQ	SPfollowing sequence of commands reclaim the back-up file.


Q	SPDIR X.*               Checks to see that BAK file is
Q	SP                      available.

Q	SPERA X.ASM             Erases most recent version.

Q	SPREN X.ASM=X.BAK       Renames the BAK file to ASM.


Q	SPMYou can abort the edit at any point (reboot, power failure, CTRL-C,
XQ	SPMor CTRL-Q command) without destroying the original file.  In this
XQ	SPMcase, the BAK file is not created and the original file is always
XQ	SPintact.

Q	SPMThe ED program allows the user to edit the source on one disk
XQ	SPMand create the back-up file on another disk.  This form of the ED
XQ	SPcommand is

Q	SPED ufn d:

Q	SPMwhere ufn is the name of the file to edit on the currently logged
XQ	SPMdisk and d is the name of an alternate drive.  The ED program reads
XQ	SPMand processes the source file and writes the new file to drive d
XQ	SPMusing the name ufn.  After processing, the original file becomes the
XQ	SPMback-up file.  If the operator is addressing disk A, the following
XQ	SPcommand is valid.

Q	SPED X.ASM b:

Q	SPMThis edits the file X.ASM on drive A, creating the new file X.$$$ on
XQ	SPMdrive B.  After a successful edit, A:X.ASM is renamed to A:X.BAK,
XQ	SPMand B:X.$$$ is renamed to B:X.ASM.  For convenience, the currently
XQ	SPMlogged disk becomes drive B at the end of the edit.  Note that if a
XQ	SPMfile named B:X.ASM exists before the editing begins, the following
XQ	SPmessage appears on the screen:


M                               1-30X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPFILE EXISTS

Q	SPMThis message is a precaution against accidentally destroying a
XQ	SPMsource file.  You should first erase the existing file and then
XQ	SPrestart the edit operation.

Q	SPMSimilar to other transient commands, editing can take place on
XQ	SPMa drive different from the currently logged disk by preceding the
XQ	SPMsource filename by a drive name.  The following are examples of
XQ	SPvalid edit requests:


Q	SPED A:X.ASM       MEdits the file X.ASM on drive A, with new
XQ	$SPfile and back-up on drive A.

Q	SPED B:X.ASM A:    MEdits the file X.ASM on drive B to the
XQ	$SPMtemporary file X.$$$ on drive A.  After
XQ	$SPMediting, this command changes X.ASM on
XQ	$SPMdrive B to X.BAK and changes X.$$$ on
XQ	$SPdrive A to X.ASM.


Q	SPW1.6.6  SYSGEN Command

Q	SPESyntax:R

Q	SPRSYSGEN

Q	SPMThe SYSGEN transient command allows generation of an
XQ	SPMinitialized disk containing the CP/M operating system.  The SYSGEN
XQ	SPprogram prompts the console for commands by interacting as shown.


Q	SPSYSGEN <cr>

Q	#SPInitiates the SYSGEN program.


Q	SPSYSGEN VERSION x.x

Q	#SPSYSGEN sign-on message.


Q	SPSOURCE DRIVE NAME
Q	SP(OR RETURN TO SKIP)

Q	#SPMRespond  with  the  drive name (one of the
XQ	#SPMletters A, B, C, or D) of the disk
XQ	#SPMcontaining a CP/M system, usually A.  If a
XQ	#SPMcopy of CP/M already exists in memory due
XQ	#SPMto a MOVCPM command, press only a carriage
XQ	#SPMreturn.  Typing a drive name d causes the
XQ	#SPresponse:



M                               1-31X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPSOURCE ON d THEN TYPE RETURN

Q	#SPMPlace a disk containing the CP/M operating
XQ	#SPMsystem on drive d (d is one of A, B, C, or
XQ	#SPMD).  Answer by pressing a carriage return
XQ	#SPwhen ready.


Q	SPFUNCTION COMPLETE

Q	#SPMSystem is copied to memory.  SYSGEN then
XQ	#SPprompts with the following:


Q	SPDESTINATION DRIVE NAME
Q	SP(OR RETURN TO REBOOT)

Q	#SPMIf a  disk is  being initialized, place the
XQ	#SPMnew disk into a drive and answer with the
XQ	#SPMdrive name.  Otherwise, press a carriage
XQ	#SPMreturn and the system reboots from drive A.
XQ	#SPMTyping drive name d causes SYSGEN to prompt
XQ	#SPwith the following message:


Q	SPDESTINATION ON d
Q	SPTHEN TYPE RETURN

Q	#SPMPlace new  disk into drive d; press return
XQ	#SPwhen ready.


Q	SPFUNCTION COMPLETE

Q	#SPNew disk is initialized in drive d.


Q	SPMThe DESTINATION prompt is repeated until a single carriage return is
XQ	SPMpressed at the console, so that more than one disk can be
XQ	SPinitialized.

Q	SPMUpon completion of a successful system generation, the new disk
XQ	SPMcontains the operating system, and only the built-in commands are
XQ	SPMavailable.  An IBM-compatible disk appears to CP/M as a disk with an
XQ	SPMempty directory; therefore, the operator must copy the appropriate
XQ	SPMCOM files from an existing CP/M disk to the newly constructed disk
XQ	SPusing the PIP transient.

Q	SPMYou can copy all files from an existing disk by typing the
XQ	SPfollowing PIP command:

Q	SPPIP B: = A:*.*[v]





M                               1-32X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMThis command copies all files from disk drive A to disk drive B and
XQ	SPMverifies that each file has been copied correctly.  The name of each
XQ	SPfile is displayed at the console as the copy operation proceeds.

Q	SPMNote that a SYSGEN does not destroy the files that already
XQ	SPMexist on a disk; it only constructs a new operating system.  If a
XQ	SPMdisk is being used only on drives B through P and will never be the
XQ	SPMsource of a bootstrap operation on drive A, the SYSGEN need not take
XQ	SPplace.


Q	SPW1.6.7  SUBMIT Command

Q	SPESyntax:R

Q	SPRSUBMIT ufn parm#1 ... parm#n

Q	SPMThe SUBMIT command allows CP/M commands to be batched for
XQ	SPMautomatic processing.  The ufn given in the SUBMIT command must be
XQ	SPMthe filename of a file that exists on the currently logged disk,
XQ	SPMwith an assumed file type of SUB.  The SUB file contains CP/M
XQ	SPMprototype commands with possible parameter substitution.  The actual
XQ	SPMparameters parm#1 ... parm#n are substituted into the prototype
XQ	SPMcommands, and, if no errors occur, the file of substituted commands
XQ	SPare processed sequentially by CP/M.

Q	SPMThe prototype command file is created using the ED program,
XQ	SPwith interspersed $ parameters of the form:

Q	SP$1 $2 $3 ...$n

Q	SPMcorresponding to the number of actual parameters that will be
XQ	SPMincluded when the file is submitted for execution.  When the SUBMIT
XQ	SPMtransient is executed, the actual parameters parm#1 ... parm#n are
XQ	SPMpaired with the formal parameters $1 ... $n in the prototype
XQ	SPMcommands.  If the numbers of formal and actual parameters do not
XQ	SPMcorrespond, the SUBMIT function is aborted with an error message at
XQ	SPMthe console.  The SUBMIT function creates a file of substituted
XQ	SPcommands with the name

Q	SP$$$.SUB

Q	SPMon the logged disk.  When the system reboots, at the termination of
XQ	SPMthe SUBMIT, this command file is read by the CCP as a source of
XQ	SPMinput rather than the console.  If the SUBMIT function is performed
XQ	SPMon any disk other than drive A, the commands are not processed until
XQ	SPMthe disk is inserted into drive A and the system reboots.  You can
XQ	SPMabort command processing at any time by pressing the rubout key when
XQ	SPMthe command is read and echoed.  In this case, the $$$.SUB file is
XQ	SPMremoved and the subsequent commands come from the console.  Command
XQ	SPMprocessing is also aborted if the CCP detects an error in any of the
XQ	SPMcommands.  Programs that execute under CP/M can abort processing of
XQ	SPMcommand files when error conditions occur by erasing any existing
XQ	SP$$$.SUB file.



M                               1-33X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMTo introduce dollar signs into a SUBMIT file, you can type a $$
XQ	SPMwhich reduces to a single $ within the command file.  A caret, ^,
XQ	SPMprecedes an alphabetic character s, which produces a single CTRL-X
XQ	SPcharacter within the file.

Q	SPMThe last command in a SUB file can initiate another SUB file,
XQ	SPallowing chained batch commands:

Q	SPMSuppose the file ASMBL.SUB exists on disk and contains the
XQ	SPprototype commands

Q	SPASM $1
Q	SPDIR $1.*
Q	SPERA *.BAK
Q	SPPIP $2:=$1.PRN
Q	SPERA $1.PRN

Q	SPthen, you issue the following command:

Q	SPSUBMIT ASMBL X PRN

Q	SPMThe SUBMIT program reads the ASMBL.SUB file, substituting X: for all
XQ	SPMoccurrences of $1 and PRN for all occurrences of $2.  This results
XQ	SPin a $$$.SUB file containing the commands:

Q	SPASM X
Q	SPDIR X.*
Q	SPERA *.BAK
Q	SPPIP PRN:=X.PRN
Q	SPERA X.PRN

Q	SPwhich are executed in sequence by the CCP.

Q	SPMThe SUBMIT function can access a SUB file on an alternate drive
XQ	SPMby preceding the filename by a drive name.  Submitted files are only
XQ	SPMacted upon when they appear on drive A.  Thus, it is possible to
XQ	SPMcreate a submitted file on drive B that is executed at a later time
XQ	SPwhen inserted in drive A.

Q	SPMAn additional utility program called XSUB extends the power of
XQ	SPMthe SUBMIT facility to include line input to programs as well as the
XQ	SPMCCP.  The XSUB command is included as the first line of the SUBMIT
XQ	SPMfile.  When it is executed, XSUB self-relocates directly below the
XQ	SPMCCP.  All subsequent SUBMIT command lines are processed by XSUB so
XQ	SPMthat programs that read buffered console input, BDOS Function 10,
XQ	SPMreceive their input directly from the SUBMIT file.  For example, the
XQ	SPfile SAVER.SUB can contain the following SUBMIT lines:

Q	SPXSUB
Q	SPDDT
Q	SP|$1.COM
Q	SPR
Q	SPGO
Q	SPSAVE 1 $2.COM



M                               1-34X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPa subsequent SUBMIT command, such as

Q	SPA>WSUBMIT SAVER PIP Y

Q	SPMs&ubstitutes X for $1 and Y for $2 in the command stream.  The XSUB
XQ	SPMprogram loads, followed by DDT, which is sent to the command lines
XQ	SPMPIP.COM, R, and G0, thus returning to the CCP.  The final command
XQ	SPSAVE 1 Y.COM is processed by the CCP.

Q	SPThe XSUB program remains in memory and prints the message

Q	SP(xsub active)

Q	SPMon each warm start operation to indicate its presence.  Subsequent
XQ	SPMSUBMIT command streams do not require the XSUB, unless an
XQ	SPMintervening cold start occurs.  Note that XSUB must be loaded after
XQ	SPMthe optional CP/M DESPOOL utility, if both are to run
XQ	SPsimultaneously.


Q	SPW1.6.8  DUMP Command

Q	SPESyntax:R

Q	SPRDUMP ufn

Q	SPMThe DUMP program types the contents of the disk file (ufn) at
XQ	SPMthe console in hexadecimal form.  The file contents are listed
XQ	SPMsixteen bytes at a time, with the absolute byte address listed to
XQ	SPMthe left of each line in hexadecimal.  Long typeouts can be aborted
XQ	SPMby pressing the rubout key during printout.  The source listing of
XQ	SPMthe DUMP program is given in Section 5 as an example of a program
XQ	SPwritten for the CP/M environment.


Q	SPW1.6.9  MOVCPM Command

Q	SPESyntax:R

Q	SPRMOVCPM

Q	SPMThe MOVCPM program allows you to reconfigure the CP/M system
XQ	SPMfor any particular memory size.  Two optional parameters can be used
XQ	SPMto indicate the desired size of the new system and the disposition
XQ	SPMof the new system at program termination.  If the first parameter is
XQ	SPMomitted or an * is given, the MOVCPM program reconfigures the system
XQ	SPMto its maximum size, based upon the kilobytes of contiguous RAM in
XQ	SPMthe host system (starting at 0000H).  If the second parameter is
XQ	SPMomitted, the system is executed, but not permanently recorded; if *
XQ	SPMis given, the system is left in memory, ready for a SYSGEN
XQ	SPMoperation.  The MOVCPM program relocates a memory image of CP/M and
XQ	SPMplaces this image in memory in preparation for a system generation
XQ	SPoperation.  The following is a list of MOVCPM command forms:




M                               1-35X

MCP/M Operating System Manual              1.6  Transient Commands


XQ	SPMOVCPM         MRelocates and executes CP/M for management
XQ	"SPMof the current memory configuration (memory
XQ	"SPMis examined for contiguous RAM, starting at
XQ	"SPM100H).  On completion of the relocation, the
XQ	"SPMnew system is executed but not permanently
XQ	"SPMrecorded on the disk.  The system that is
XQ	"SPMconstructed contains a BIOS for the Intel
XQ	"SPmicrocomputer development system 800.

Q	SPMOVCPM  n      MCreates a relocated CP/M system for
XQ	"SPMmanagement of an n kilobyte system (n must
XQ	"SPMbe in the range of 20 to 64), and executes
XQ	"SPthe system as described.

Q	SPMOVCPM  * *    MConstructs a relocated memory image for the
XQ	"SPMcurrent memory configuration, but leaves the
XQ	"SPMmemory image in memory in preparation for a
XQ	"SPSYSGEN operation.

Q	SPMOVCPM  n *    MConstructs a relocated memory image for an n
XQ	"SPMkilobyte memory system, and leaves the
XQ	"SPMmemory image in preparation for a SYSGEN
XQ	"SPoperation.


Q	SPFor example, the command,

Q	SPMOVCPM  * *

Q	SPMconstructs a new version of the CP/M system and leaves it in memory,
XQ	SPready for a SYSGEN operation.  The message

Q	SPREADY FOR 'SYSGEN' OR
Q	SP'SAVE 34 CPMxx.COM'

Q	SPMappears at the console upon completion, where xx is the current
XQ	SPMmemory size in kilobytes.  You can then type the following sequence:
X

Q	SPSYSGEN                     MThis starts the system
XQ	.SPgeneration.

Q	SPSOURCE DRIVE NAME          Respond with a carriage return
Q	SP(OR RETURN TO SKIP)        Mto skip the CP/M read operation,
XQ	.SPMbecause the system is already
XQ	.SPMin memory as a result of the
XQ	.SPprevious MOVCPM operation.

Q	SPDESTINATION DRIVE NAME     Respond  with B  to  write new
Q	SP(OR RETURN TO REBOOT)      Msystem to the disk in drive B.
XQ	.SPMSYSGEN prompts with the
XQ	.SPfollowing message:

Q	SPDESTINATION ON B,          Place the  new disk on drive B
Q	SPTHEN TYPE RETURN           Mand press the RETURN key when
XQ	.SPready.

M                               1-36X

MCP/M Operating System Manual              1.6  Transient Commands


X
Q	SPMIf you respond with A rather than B above, the system is
XQ	SPMwritten to drive A rather than B.  SYSGEN continues to print this
XQ	SPprompt:

Q	SPDESTINATION DRIVE NAME (OR RETURN TO REBOOT)

Q	SPMuntil you respond with a single carriage return, which stops the
XQ	SPSYSGEN program with a system reboot.

Q	SPMYou can then go through the reboot process with the old or new
XQ	SPMdisk.  Instead of performing the SYSGEN operation, you can type a
XQ	SPcommand of the form:

Q	SPSAVE 34 CPMxx.COM

Q	SPMat the completion of the MOVCPM function, where xx is the value
XQ	SPMindicated in the SYSGEN message.  The CP/M memory image on the
XQ	SPMcurrently logged disk is in a form that can be patched.  This is
XQ	SPMnecessary when operating in a nonstandard environment where the BIOS
XQ	SPMmust be altered for a particular peripheral device configuration, as
XQ	SPdescribed in Section 6.

Q	SPThe following are valid MOVCPM commands:


Q	SPMOVCPM  48     MConstructs a 48K version of CP/M and starts
XQ	"SPexecution.

Q	SPMOVCPM  48 *   MConstructs a 48K version of CP/M in
XQ	"SPMpreparation for permanent recording; the
XQ	"SPresponse is

Q	"SPREADY FOR 'SYSGEN' OR
Q	"SP 'SAVE 34 CPM48.COM'

Q	SPMOVCPM * *     MConstructs a maximum memory version of CP/M
XQ	"SPand starts execution.

Q	SPMThe newly created system is serialized with the number attached
XQ	SPMto the original disk and is subject to the conditions of the Digital
XQ	SPResearch Software Licensing Agreement.


Q	SPW1.7  BDOS Error Messages

Q	SPMT&here are three error situations that the Basic Disk Operating
XQ	SPMSystem intercepts during file processing.  When one of these
XQ	SPconditions is detected, the BDOS prints the message:

Q	SPBDOS ERR ON d: error






M                               1-37X

MCP/M Operating System Manual             1.7  BDOS Error Messages


XQ	SPMwhere d is the drive name and error is one of the three error
XQ	SPmessages:

Q	SPBAD SECTOR
Q	SPSELECT
Q	SPREAD ONLY

Q	SPMThe BAD SECTOR message indicates that the disk controller
XQ	SPMelectronics has detected an error condition in reading or writing
XQ	SPMthe disk.  This condition is generally caused by a malfunctioning
XQ	SPMdisk controller or an extremely worn disk.  If you find that CP/M
XQ	SPMreports this error more than once a month, the state of the
XQ	SPMcontroller electronics and the condition of the media should be
XQ	SPchecked.

Q	SPMYou can also encounter this condition in reading files
XQ	SPMgenerated by a controller produced by a different manufacturer.
XQ	SPMEven though controllers claim to be IBM..-compatible, one often
XQ	SPMfinds small differences in recording formats.  The Model 800
XQ	SPMcontroller, for example, requires two bytes of one's following the
XQ	SPMdata CRC byte, which is not required in the IBM format.  As a
XQ	SPMresult, disks generated by the Intel microcomputer development
XQ	SPMsystem can be read by almost all other IBM-compatible system, while
XQ	SPMdisk files generated on other manufacturers' equipment produce the
XQ	SPMBAD SECTOR message when read by the microcomputer development
XQ	SPMsystem.  To recover from this condition, press a CTRL-C to reboot
XQ	SPM(the safest course), or a return, which ignores the bad sector in
XQ	SPthe file operation.

Q	SPMWNote:  &pressing a return might destroy disk integrity if the
XQ	SPMoperation is a directory write.  Be sure you have adequate back-ups
XQ	SPin this case.

Q	SPMThe SELECT error occurs when there is an attempt to address a
XQ	SPMdrive beyond the range supported by the BIOS.  In this case, the
XQ	SPMvalue of d in the error message gives the selected drive.  The
XQ	SPsystem reboots following any input from the console.

Q	SPMThe READ ONLY message occurs when there is an attempt to write
XQ	SPMto a disk or file that has been designated as Read-Only in a STAT
XQ	SPMcommand or has been set to Read-Only by the BDOS.  Reboot CP/M by
XQ	SPMusing the warm start procedure, CTRL-C, or by performing a cold
XQ	SPMstart whenever the disks are changed.  If a changed disk is to be
XQ	SPMread but not written, BDOS allows the disk to be changed without the
XQ	SPMwarm or cold start, but internally marks the drive as Read-Only.
XQ	SPMThe status of the drive is subsequently changed to Read-Write if a
XQ	SPMwarm or cold start occurs.  On issuing this message, CP/M waits for
XQ	SPMinput from the console.  An automatic warm start takes place
XQ	SPfollowing any input.


Q	SPW1.8  CP/M Operation on the Model 800





M                               1-38X

MCP/M Operating System Manual  1.8  Operation of CP/M on the Model 800


XQ	SPMThis section gives operating procedures for using CP/M on the
XQ	SPMIntel Model 800 microcomputer development system microcomputer
XQ	SPMdevelopment system.  Basic knowledge of the microcomputer
XQ	SPdevelopment system hardware and software systems is assumed.

Q	SPMCP/M is initiated in essentially the same manner as the Intel
XQ	SPMISIS operating system.  The disk drives are labeled 0 through 3 on
XQ	SPMthe microcomputer development system, corresponding to CP/M drives A
XQ	SPMthrough D, respectively.  The CP/M system disk is inserted into
XQ	SPMdrive 0, and the BOOT and RESET switches are pressed in sequence.
XQ	SPMThe interrupt 2 light should go on at this point.  The space bar is
XQ	SPMthen pressed on the system console, and the light should go out.  If
XQ	SPMit does not, the user should check connections and baud rates.  The
XQ	SPMBOOT switch is turned off, and the CP/M sign-on message should
XQ	SPMappear at the selected console device, followed by the A> system
XQ	SPMprompt.  You can then issue the various resident and transient
XQ	SPcommands.

Q	SPMThe CP/M system can be restarted (warm start) at any time by
XQ	SPMpushing the INT 0 switch on the front panel.  The built-in Intel ROM
XQ	SPMmonitor can be initiated by pushing the INT 7 switch, which
XQ	SPMgenerates an RST 7, except when operating under DDT, in which case
XQ	SPthe DDT program gets control instead.

Q	SPMDiskettes can be removed from the drives at any time, and the
XQ	SPMsystem can be shut down during operation without affecting data
XQ	SPMintegrity.  Do not remove a disk and replace it with another without
XQ	SPMrebooting the system (cold or warm start) unless the inserted disk
XQ	SPis Read-Only.

Q	SPMAs a result of hardware hang-ups or malfunctions, CP/M might
XQ	SPprint the following message:

Q	SPBDOS ERR ON d: BAD SECTOR

Q	SPMwhere d is the drive that has a permanent error.  This error can
XQ	SPMoccur when drive doors are opened and closed randomly, followed by
XQ	SPMdisk operations, or can be caused by a disk, drive, or controller
XQ	SPMfailure.  You can optionally elect to ignore the error by pressing a
XQ	SPMsingle return at the console.  The error might produce a bad data
XQ	SPMrecord, requiring reinitialization of up to 128 bytes of data.  You
XQ	SPcan reboot the CP/M system and try the operation again.

Q	SPMTermination of a CP/M session requires no special action,
XQ	SPMexcept that it is necessary to remove the disks before turning the
XQ	SPMpower off to avoid random transients that often make their way to
XQ	SPthe drive electronics.

Q	SPMYou should use IBM-compatible disks rather than disks that have
XQ	SPMpreviously been used with any ISIS version.  In particular, the ISIS
XQ	SPMFORMAT operation produces nonstandard sector numbering throughout
XQ	SPMthe disk.  This nonstandard numbering seriously degrades the
XQ	SPMperformance of CP/M, and causes CP/M to operate noticeably slower
XQ	SPMthan the distribution version.  If it becomes necessary to reformat
XQ	SPMa disk, which should not be the case for standard disks, a program


M                               1-M39XX

MCP/M Operating System Manual  1.8  Operation of CP/M on the Model 800


XQ	SPMcan be written under CP/M that causes the Model 800 controller to
XQ	SPreformat with sequential sector numbering (1-26) on each track.

Q	SPMGenerally, IBM-compatible 8-inch disks do not need to be
XQ	SPformatted.  However, 5 1/4-inch disks need to be formatted.


=End of Section 1

















































M                               1-40X




X=WSection 2

=WThe CP/M Editor



Q	SPW2.1  Introduction to Ed

Q	SPME&d is the context editor for CP/M, and is used to create and
XQ	SPMalter CP/M source files.  To start ED, type a command of the
XQ	SPfollowing form:

Q	SPED filename
Q	SPor
Q	SPED filename.typ

Q	SPMGenerally, ED reads segments of the source file given by filename or
XQ	SPMfilename.typ into the central memory, where you edit the file and it
XQ	SPMis subsequently written back to disk after alterations.  If the
XQ	SPMsource file does not exist before editing, it is created by ED and
XQ	SPMinitialized to empty.  The overall operation of Ed is shown in
XQ	SPFigure 2-1.


Q	SPW2.1.1  ED Operation

Q	SPME&d operates upon the source file, shown in Figure 2-1 by x.y,
XQ	SPMand passes all text through a memory buffer where the text can be
XQ	SPMviewed or altered.  The number of lines that can be maintained in
XQ	SPMthe memory buffer varies with the line length, but has a total
XQ	SPcapacity of about 5000 characters in a 20K CP/M system.

Q	SPMEdited text material is written into a temporary work file
XQ	SPMunder your command.  Upon termination of the edit, the memory buffer
XQ	SPMis written to the temporary file, followed by any remaining (unread)
XQ	SPMtext in the source file.  The name of the original file is changed
XQ	SPMfrom x.y to x.BAK so that the most recent edited source file can be
XQ	SPMreclaimed if necessary.  See the CP/M commands ERASE and RENAME.
XQ	SPMThe temporary file is then changed from x.$$$ to x.y, which becomes
XQ	SPthe resulting edited file.

Q	SPMThe memory buffer is logically between the source file and
XQ	SPworking file, as shown in Figure 2-2.














M                               2-1X

MCP/M Operating System Manual              2.1  Introduction to ED


X


























=WFigure 2-1.  Overall ED Operation



Q	SP       Source File         Memory Buffer       Temporary File

Q	SP    1   First Line      1   First Line       1   First Line
Q	SP    2    Appended       2    Buffered        2   Processed
Q	SP    3     Lines         3      Text          3      Text



Q	SP   SP                  MP                   TP



Q	SP       Unprocessed  Next       Free     Next      Free File
Q	SP         Source     Append    Memory    Write       Space
Q	SP         Lines                Space



Q	SP                        SP = Source Pointer
Q	SP                        MP = Memory Pointer
Q	SP                        TP = Temporary Pointer


=WFigure 2-2.  Memory Buffer Organization


M                               2-2X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPW2.1.2  Text Transfer Functions

Q	SPMG&iven that n is an integer value in the range 0 through 65535,
XQ	SPMseveral single-letter ED commands transfer lines of text from the
XQ	SPMsource file through the memory buffer to the temporary (and
XQ	SPMeventually final) file.  Single letter commands are shown in upper-
XQ	SPcase, but can be typed in either upper- or lower-case.


=WTable 2-1.  ED Text Transfer Commands

Q	SP   Command                          Result

Q	SP9Q	GSP0Q	SPnA        MAppends the next n unprocessed source lines
XQ	SPMfrom the source file at SP to the end of the
XQ	SPMmemory buffer at MP.  Increment SP and MP by n.
XQ	SPMIf upper-case translation is set (see the U
XQ	SPMcommand) and the A command is typed in upper-
XQ	SPMcase, all input lines will automatically be
XQ	SPtranslated to upper-case.

Q	SPnW        MWrites the first n lines of the memory buffer
XQ	SPMto the temporary file free space.  Shift the
XQ	SPMremaining lines n+1 through MP to the top of
XQ	SPthe memory buffer.  Increment TP by n.

Q	SPE         MEnds the edit.  Copy all buffered text to
XQ	SPMtemporary file and copy all unprocessed source
XQ	SPlines to temporary file.  Rename files.

Q	SPH         MMoves to head of new file by performing
XQ	SPMautomatic E command.  The temporary file
XQ	SPMbecomes the new source file, the memory buffer
XQ	SPMis emptied, and a new temporary file is
XQ	SPMcreated.  The effect is equivalent to issuing
XQ	SPMan E command, followed by a reinvocation of ED,
XQ	SPusing x.y as the file to edit.

Q	SPO         MReturns to original file.  The memory buffer is
XQ	SPMemptied, the temporary file is deleted, and the
XQ	SPMSP is returned to position 1 of the source
XQ	SPMfile.  The effects of the previous editing
XQ	SPcommands are thus nullified.

Q	SPQ         MQuits edit with no file alterations, returns to
XQ	SPCP/M.
Q	SP9Q	LSP0

Q	SPMThere are a number of special cases to consider.  If the
XQ	SPMinteger n is omitted in any ED command where an integer is allowed,
XQ	SPMthen 1 is assumed.  Thus, the commands A and W append one line and
XQ	SPMwrite one line, respectively.  In addition, if a pound sign # is
XQ	SPMgiven in the place of n, then the integer 65535 is assumed (the
XQ	SPMlargest value for n that is allowed).  Because most source files can
XQ	SPMbe contained entirely in the memory buffer, the command #A is often


M                               2-M3XX

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPMissued at the beginning of the edit to read the entire source file
XQ	SPMto memory.  Similarly, the command #W writes the entire buffer to
XQ	SPthe temporary file.

Q	SPMTwo special forms of the A and W commands are provided as a
XQ	SPMconvenience.  The command 0A fills the current memory buffer at
XQ	SPMleast half full, while 0W writes lines until the buffer is at least
XQ	SPMhalf empty.  An error is issued if the memory buffer size is
XQ	SPMexceeded.  You can then enter any command, such as W, that does not
XQ	SPMincrease memory requirements.  The remainder of any partial line
XQ	SPMread during the overflow will be brought into memory on the next
XQ	SPsuccessful append.


Q	SPW2.1.3  Memory Buffer Organization

Q	SPMT&he memory buffer can be considered a sequence of source lines
XQ	SPMbrought in with the A command from a source file.  The memory buffer
XQ	SPMhas an imaginary character pointer (CP) that moves throughout the
XQ	SPmemory buffer under command of the operator.

Q	SPMThe memory buffer appears logically as shown in Figure 2-3,
XQ	SPMwhere the dashes represent characters of the source line of
XQ	SPMindefinite length, terminated by carriage return (<cr>) and line-
XQ	SPMfeed (<lf>) characters, and CP represents the imaginary character
XQ	SPMpointer.  Note that the CP is always located ahead of the first
XQ	SPMcharacter of the first line, behind the last character of the last
XQ	SPMline, or between two characters.  The current line CL is the source
XQ	SPline that contains the CP.



Q	SP                          Memory Buffer


Q	SP      first line        -----------------------<cr><lf>


Q	SP                        -----------------------<cr><lf>


Q	SP      current line CL   ---------------------------<cr><lf>


Q	SP                                    CP

Q	SP      last line         -----------------------<cr><lf>


Q	SPW        Figure 2-3.  Logical Organization of Memory Buffer







M                               2-4X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SP&W2.1.4  Line Numbers and ED Start-up

Q	SPME&D produces absolute line number prefixes that are used to
XQ	SPMreference a line or range of lines.  The absolute line number is
XQ	SPMdisplayed at the beginning of each line when ED is in insert mode
XQ	SPM(see the I command in Section 2.1.5). Each line number takes the
XQ	SPform

Q	SPnnnnn:

Q	SPMwhere nnnnn is an absolute line number in the range of 1 to 65535.
XQ	SPMIf the memory buffer is empty or if the current line is at the end
XQ	SPof the memory buffer, nnnnn appears as 5 blanks.

Q	SPMYou can reference an absolute line number by preceding any
XQ	SPMcommand by a number followed by a colon, in the same format as the
XQ	SPMline number display.  In this case, the ED program moves the current
XQ	SPMline reference to the absolute line number, if the line exists in
XQ	SPMthe current memory buffer.  The line denoted by the absolute line
XQ	SPMnumber must be in the memory buffer (see the A command).  Thus, the
XQ	SPcommand

Q	SP345:T

Q	SPMis interpreted as move to absolute 345, and type the line. 
XQ	SPMAbsolute line numbers are produced only during the editing process
XQ	SPMand are not recorded with the file.  In particular, the line numbers
XQ	SPwill change following a deleted or expanded section of text.

Q	SPMYou can also reference an absolute line number as a backward or
XQ	SPMforward distance from the current line by preceding the absolute
XQ	SPnumber by a colon.  Thus, the command

Q	SP:400T

Q	SPMis interpreted as type from the current line number through the line
XQ	SPMwhose absolute number is 400.  Combining the two line reference
XQ	SPforms, the command

Q	SP345::400T

Q	SPMis interpreted as move to absolute line 345, then type through
XQ	SPMabsolute line 400.  Absolute line references of this sort can
XQ	SPprecede any of the standard ED commands.

Q	SPMLine numbering is controlled by the V (Verify Line Numbers)
XQ	SPMcommand.  Line numbering can be turned off by typing the -V command.
X









M                               2-5X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPMIf the file to edit does not exist, ED displays the following
XQ	SPmessage:

Q	SPNEW FILE

Q	SPMTo move text into the memory buffer, you must enter an i command
XQ	SPMbefore typing input lines and terminate each line with a carriage
XQ	SPreturn.  A single CTRL-Z character returns ED to command mode.


Q	SPW2.1.5  Memory Buffer Operation

Q	SPMW&hen ED begins, the memory buffer is empty.  You can either
XQ	SPMappend lines from the source file with the A command, or enter the
XQ	SPMlines directly from the console with the insert command.  The insert
XQ	SPcommand takes the following form:

Q	SPI

Q	SPMED then accepts any number of input lines.  You must terminate each
XQ	SPMline with a <cr> (the <lf> is supplied automatically).  A single
XQ	SPMCTRL-Z, denoted by a caret (^)Z, returns ED to command mode.  The CP
XQ	SPMis positioned after the last character entered.  The following
XQ	SPsequence:

Q	SPI<cr>
Q	SPNOW IS THE<cr>
Q	SPTIME FOR<cr>
Q	SPALL GOOD MEN<cr>
Q	SP^Z

Q	SPleaves the memory buffer as

Q	SPNOW IS THE<cr><lf>
Q	SPTIME FOR<cr><lf>
Q	SPALL GOOD MEN<cr><lf>

Q	SPMGenerally, ED accepts command letters in upper- or lower-case.
XQ	SPMIf the command is upper-case, all input values associated with the
XQ	SPMcommand are translated to upper-case.  If the I command is typed,
XQ	SPMall input lines are automatically translated internally to upper-
XQ	SPMcase.  The lower-case form of the i command is most often used to
XQ	SPallow both upper- and lower-case letters to be entered.

Q	SPMVarious commands can be issued that control the CP or display
XQ	SPMsource text in the vicinity of the CP.  The commands shown below
XQ	SPMwith a preceding n indicate that an optional unsigned value can be
XQ	SPMspecified.  When preceded by +_, the command can be unsigned, or have
XQ	SPMan optional preceding plus or minus sign.  As before, the pound sign
XQ	SPM# is replaced by 65535.  If an integer n is optional, but not
XQ	SPMsupplied, then n=1 is assumed.  Finally, if a plus sign is optional,
XQ	SPbut none is specified, then + is assumed.





M                               2-6X

MCP/M Operating System Manual              2.1  Introduction to ED


X=WTable 2-2.  Editing Commands

Q	SP   Command                       Action

Q	SP9Q	GSP0Q	SP+_B        MMove CP to beginning of memory buffer if + and
XQ	SPto bottom if -.

Q	SP+_nC       MMove CP by +_n characters (moving ahead if +),
XQ	SPcounting the <cr><lf> as two characters.

Q	SP+_nD       MDelete n characters ahead of CP if plus and
XQ	SPbehind CP if minus.

Q	SP+_nK       MKill (remove) +_n lines of source text using CP
XQ	SPMas the current reference.  If CP is not at the
XQ	SPMbeginning of the current line when K is issued,
XQ	SPMthe characters before CP remain if + is
XQ	SPMspecified, while the characters after CP remain
XQ	SPif - is given in the command.

Q	SP+_nL       MIf n = 0, move CP to the beginning of the
XQ	SPMcurrent line, if it is not already there.  If n 
XQ	SPM=/ 0, first move the CP to the beginning of the
XQ	SPMcurrent line and then move it to the beginning
XQ	SPMof the line that is n lines down (if +) or up
XQ	SPM(if -).  The CP will stop at the top or bottom
XQ	SPMof the memory buffer if too large a value of n
XQ	SPis specified.

Q	SP+_nT       MIf n = 0, type the contents of the current line
XQ	SPMup to CP.  If n = 1, type the contents of the
XQ	SPMcurrent line from CP to the end of the line.
XQ	SPMIf n>1, type the current line along with n - 1
XQ	SPMlines that follow, if + is specified.
XQ	SPMSimilarly, if n>1 and - is given, type the
XQ	SPMprevious n lines up to the CP.  Any key can be
XQ	SPdepressed to abort long type-outs.

Q	SP+_n        MEquivalent to +_nLT, which moves up or down and
XQ	SPtypes a single line.
Q	SP9Q	LSP0


Q	SPW2.1.6  Command Strings

Q	SPMA&ny number of commands can be typed contiguously (up to the
XQ	SPMcapacity of the console buffer) and are executed only after you
XQ	SPMpress the <cr>.  Table 2-3 summarizes the CP/M console line-editing
XQ	SPcommands used to control the input command line.








M                               2-7X

MCP/M Operating System Manual              2.1  Introduction to ED


X=WTable 2-3.  Line-editing Controls

Q	SP     Command                      Result

Q	SP9Q	GSP0Q	SPCTRL-C     MReboots the CP/M system when typed at the
XQ	SPstart of a line.

Q	SPCTRL-E     MPhysical end of line:  carriage is returned,
XQ	SPMbut line is not sent until the carriage return
XQ	SPkey is depressed.

Q	SPCTRL-H     Backspaces one character position.

Q	SPCTRL-J     Terminates current input (line-feed).

Q	SPCTRL-M     Terminates current input (carriage return).

Q	SPCTRL-R     MRetypes current command line:  types a clean
XQ	SPline character deletion with rubouts.

Q	SPCTRL-U     MDeletes the entire line typed at the console.
X
Q	SPCTRL-X     Same as CTRL-U.

Q	SPCTRL-Z     MEnds input from the console (used in PIP and
XQ	SPED).

Q	SPrub/del    MDeletes and echos the last character typed at
XQ	SPthe console.
Q	SP9Q	LSP0

Q	SPMSuppose the memory buffer contains the characters shown in the
XQ	SPMprevious section, with the CP following the last character of the
XQ	SPMbuffer.  In the following example, the command strings on the left
XQ	SPMproduce the results shown to the right.  Use lower-case command
XQ	SPletters to avoid automatic translation of strings to upper-case.


Q	SP  Command String                      Effect

Q	SP9Q	GSP0Q	SPB2T<cr>        MMove to beginning of the buffer and type
XQ	SPtwo lines:

Q	SPNOW IS THE
Q	SPTIME FOR
Q	SPThe result in the memory buffer is

Q	SPNOW IS THE<cr><lf>
Q	SPTIME FOR<cr><lf>
Q	SPALL GOOD MEN<cr><lf>







M                               2-8X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SP  Command String                      Effect

Q	SP5C0T<cr>       MMove CP five characters and type the
XQ	SPMbeginning of the line NOW I.  The result
XQ	SPin the memory buffer is

Q	SPNOW I  S THE<cr><lf>


Q	SP2L-T<cr>       MMove two lines down and type the previous
XQ	SPMline TIME FOR.  The result in the memory
XQ	SPbuffer is

Q	SPNOW IS THE<cr><lf>
Q	SPTIME FOR<cr><lf>
Q	SPALL GOOD MEN<cr><lf>


Q	SP-L#K<cr>       MMove up one line, delete 65535 lines that
XQ	SPMfollow.  The result in the memory buffer
XQ	SPis

Q	SPNOW IS THE<cr><lf>


Q	SPI<cr>          Insert two  lines of text with  automatic
Q	SPTIME TO<cr>    translation to upper-case.  The result in
Q	SPINSERT<cr>     the memory buffer is
Q	SP^Z

Q	SPNOW IS THE<cr><lf>
Q	SPTIME TO<cr><lf>
Q	SPINSERT<cr><lf>


Q	SP-2L#T<cr>      MMove up two lines and type 65535 lines
XQ	SPMahead of CP NOW IS THE.  The result in the
XQ	SPmemory buffer is

Q	SPNOW IS THE<cr><lf>
Q	SPTIME TO<cr><lf>
Q	SPINSERT<cr><lf>


Q	SP<cr>           MMove down one line and type one line
XQ	SPMINSERT.  The result in the memory buffer
XQ	SPis

Q	SPNOW IS THE<cr><lf>
Q	SPTIME TO<cr><lf>
Q	SPINSERT<cr><lf>
Q	SP9Q	LSP0





M                               2-9X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPW2.1.7  Text Search and Alteration

Q	SPME&D has a command that locates strings within the memory buffer.
XQ	SPThe command takes the form

Q	SPnF s <cr>
Q	SPor
Q	SPnF s ^Z

Q	SPMwhere s represents the string to match, followed by either a <cr> or
XQ	SPMCTRL-Z, denoted by ^Z.  ED starts at the current position of CP and
XQ	SPMattempts to match the string.  The match is attempted n times and,
XQ	SPMif successful, the CP is moved directly after the string.  If the n
XQ	SPMmatches are not successful, the CP is not moved from its initial
XQ	SPMposition.  Search strings can include CTRL-L, which is replaced by
XQ	SPthe pair of symbols <cr><lf>.

Q	SPThe following commands illustrate the use of the F command:


Q	SP  Command String                      Effect

Q	SP9Q	GSP0Q	SPB#T<cr>        MMove to the beginning and type the entire
XQ	SPMbuffer.  The result in the memory buffer
XQ	SPis

Q	SPNOW IS THE <cr><lf>
Q	SPTIME FOR<cr><lf>
Q	SPALL GOOD MEN<cr><lf>


Q	SPFS T<cr>       MFind the end of the string S T.  The
XQ	SPresult in the memory buffer is

Q	SPNOW IS T  HE<cr><lf>


Q	SPFIs^Z0TT       MFind the next I and type to the CP; then
XQ	SPMtype the remainder of the current line ME
XQ	SPFOR.  The result in the memory buffer is

Q	SPNOW IS THE<cr><lf>
Q	SPTI  ME FOR<cr><lf>

Q	SPALL GOOD MEN<cr><lf>
Q	SP9Q	LSP0

Q	SPMAn abbreviated form of the insert command is also allowed,
XQ	SPMwhich is often used in conjunction with the F command to make simple
XQ	SPtextual changes.  The form is

Q	SP| s ^Z
Q	SPor
Q	SP| s<cr>



M                               2-10X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPMwhere s is the string to insert.  If the insertion string is
XQ	SPMterminated by a CTRL-Z, the string is inserted directly following
XQ	SPMthe CP, and the CP is positioned directly after the string.  The
XQ	SPMaction is the same if the command is followed by a <cr> except that
XQ	SPMa <cr><lf> is automatically inserted into the text following the
XQ	SPMstring.  The following command sequences are examples of the F and I
XQ	SPcommands:


Q	SP  Command String                      Effect
Q	SP9Q	GSP0
Q	SPBITHIS IS ^Z<cr>

Q	SPMInsert THIS IS at the beginning of the
XQ	SPtext.  The result in the memory buffer is

Q	SPTHIS IS  NOW THE<cr><lf>

Q	SPTIME FOR<cr><lf>
Q	SPALL GOOD MEN<cr><lf>


Q	SPFTIME^Z-4DIPLACE^Z<cr>

Q	SPMFind TIME and delete it; then insert
XQ	SPMPLACE.  The result in the memory buffer is
X
Q	SPTHIS IS NOW THE<cr><lf>
Q	SPPLACE    FOR<cr><lf>

Q	SPALL GOOD MEN<cr><lf>


Q	SP3FO^Z-3D5D1
Q	SPCHANGES^Z<cr>  MFind  third  occurrence of O (that is, the
XQ	SPMsecond O in GOOD), delete previous 3
XQ	SPMcharacters and the subsequent 5
XQ	SPMcharacters; then insert CHANGES.  The
XQ	SPresult in the memory buffer is

Q	SPTHIS IS NOW THE<cr><lf>
Q	SPPLACE FOR<cr><lf>
Q	SPALL CHANGES   <cr><lf>


Q	SP-8CISOURCE<cr>

Q	SPMMove back 8 characters and insert the line
XQ	SPMSOURCE<cr><lf>.  The result in the memory
XQ	SPbuffer is

Q	SPTHIS IS NOW THE<cr><lf>
Q	SPPLACE FOR<cr><lf>
Q	SPALL SOURCE<cr><lf>
Q	SP   CHANGES<cr><lf>


M                               2-11XQ	SP9Q	LSP0

MCP/M Operating System Manual              2.1  Introduction to ED


X

Q	SPMED also provides a single command that combines the F and I
XQ	SPMcommands to perform simple string substitutions.  The command takes
XQ	SPthe following form:

Q	SPnS  sU1D^ZsU2D <cr>
Q	SPor
Q	SPnS sU1D^ZsU2D  ^Z

Q	SPMand has exactly the same effect as applying the following command
XQ	SPstring a total of n times:

Q	SPF sU1D^Z-kDIsU2 <cr>
Q	SPor
Q	SPF sU1D^Z-kDIsU2D ^Z

Q	SPMwhere k is the length of the string.  ED searches the memory buffer
XQ	SPMstarting at the current position of CP and successively substitutes
XQ	SPMthe second string for the first string until the end of buffer, or
XQ	SPuntil the substitution has been performed n times.

Q	SPMAs a convenience, a command similar to F is provided by ED that
XQ	SPMautomatically appends and writes lines as the search proceeds.  The
XQ	SPform is

Q	SPn N s <cr>
Q	SPor
Q	SPn N s ^Z

Q	SPMwhich searches the entire source file for the nth occurrence of the
XQ	SPMstrings (you should recall that F fails if the string cannot be
XQ	SPMfound in the current buffer).  The operation of the N command is
XQ	SPMprecisely the same as F except in the case that the string cannot be
XQ	SPMfound within the current memory buffer.  In this case, the entire
XQ	SPMmemory content is written (that is, an automatic #W is issued).
XQ	SPMInput lines are then read until the buffer is at least half full, or
XQ	SPMthe entire source file is exhausted.  The search continues in this
XQ	SPMmanner until the string has been found n times, or until the source
XQ	SPfile has been completely transferred to the temporary file.

Q	SPMA final line editing function, called the juxtaposition
XQ	SPcommand, takes the form

Q	SPn J sU1D^ZsU2D^ZsU3D <cr>
Q	SPor
Q	SPn J sU1D^ZsU2D^ZsU3D ^Z

Q	SPMwith the following action applied n times to the memory buffer:
XQ	SPMsearch from the current CP for the next occurrence of the string s1.
XQ	SPMIf found, insert the string s2, and move CP to follow s2.  Then
XQ	SPMdelete all characters following CP up to, but not including, the 
XQ	SPMstring sU3D, leaving CP directly after sU2D.  If sU3D cannot be found,
XQ	SPthen no deletion is made.  If the current line is



M                               2-12X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPNOW IS THE TIME<cr><lf>

Q	SPthe command

Q	SPJW ^ZWHAT^Z^1<cr>

Q	SPresults in

Q	SPNOW WHAT <cr lf>

Q	SPMYou should recall that ^1 (CTRL-L) represents the pair <cr><lf> in
XQ	SPsearch and substitute strings.

Q	SPMThe number of characters ED allows in the F, S, N, and J
XQ	SPcommands is limited to 100 symbols.


Q	SPW2.1.8  Source Libraries

Q	SPME&D also allows the inclusion of source libraries during the
XQ	SPediting process with the R command.  The form of this command is

Q	SPR filename ^Z
Q	SPor
Q	SPR filename <cr>

Q	SPMwhere filename is the primary filename of a source file on the disk
XQ	SPMwith an assumed filetype of LIB.  ED reads the specified file, and
XQ	SPMplaces the characters into the memory buffer after CP, in a manner
XQ	SPsimilar to the I command.  Thus, if the command

Q	SPRMACRO<cr>

Q	SPMis issued by the operator, ED reads from the file MACRO.LIB until
XQ	SPMthe end-of-file and automatically inserts the characters into the
XQ	SPmemory buffer.

Q	SPMED also includes a block move facility implemented through the
XQ	SPX (Transfer) command.  The form

Q	SPnX

Q	SPMtransfers the next n lines from the current line to a temporary file
XQ	SPcalled

Q	SPX$$$$$$.LIB

Q	SPMwhich is active only during the editing process.  You can reposition
XQ	SPMthe current line reference to any portion of the source file and
XQ	SPMtransfer lines to the temporary file.  The transferred lines
XQ	SPMaccumulate one after another in this file and can be retrieved by
XQ	SPsimply typing

Q	SPR



M                               2-13X

MCP/M Operating System Manual              2.1  Introduction to ED


XQ	SPMwhich is the trivial case of the library read command.  In this
XQ	SPMcase, the entire transferred set of lines is read into the memory
XQ	SPMbuffer.  Note that the X command does not remove the transferred
XQ	SPMlines from the memory buffer, although a K command can be used
XQ	SPMdirectly after the X, and the R command does not empty the
XQ	SPMtransferred LIB file.  That is, given that a set of lines has been
XQ	SPMtransferred with the X command, they can be reread any number of
XQ	SPtimes back into the source file.  The command

Q	SP0X

Q	SPis provided to empty the transferred line file.

Q	SPMNote that upon normal completion of the ED program through Q or
XQ	SPME, the temporary LIB file is removed.  If ED is aborted with a CTRL-
XQ	SPMC, the LIB file will exist if lines have been transferred, but will
XQ	SPMgenerally be empty (a subsequent ED invocation will erase the
XQ	SPtemporary file).


Q	SPW2.1.9  Repetitive Command Execution

Q	SPMT&he macro command M allows you to group ED commands together
XQ	SPfor repeated evaluation.  The M command takes the following form:

Q	SPn M CS <cr>
Q	SPor
Q	SPn M CS ^Z

Q	SPMwhere CS represents a string of ED commands, not including another M
XQ	SPMcommand.  ED executes the command string n times if n>1.  If n=0 or
XQ	SPM1, the command string is executed repetitively until an error
XQ	SPMcondition is encountered (for example, the end of the memory buffer
XQ	SPis reached with an F command).

Q	SPMAs an example, the following macro changes all occurrences of
XQ	SPMGAMMA to DELTA within the current buffer, and types each line that
XQ	SPis changed:

Q	SPMFGAMMA^Z-5DIDELTA^Z0TT<cr>

Q	SPor equivalently

Q	SPMSGAMMA^ZDELTA^Z0TT<cr>


Q	SPW2.2  ED Error Conditions

Q	SPMO&n error conditions, ED prints the message BREAK X AT C where X
XQ	SPis one of the error indicators shown in Table 2-4.







M                               2-14X

MCP/M Operating System Manual             2.2  ED Error Conditions


X=WTable 2-4.  Error Message Symbols

Q	SP   Symbol                         Meaning

Q	SP9Q	ISP0Q	SP?         Unrecognized command.

Q	SP>         MMemory buffer full (use one of the commands D, K,
XQ	SPMN, S, or W to remove characters); F, N, or S
XQ	SPstrings too long.

Q	SP#         MCannot apply command the number of times
XQ	SPspecified (for example, in F command).

Q	SPO         Cannot open LIB file in R command.
Q	SP9Q	LSP0

Q	SPIf there is a disk error, CP/M displays the following message:

Q	SPBDOS ERR on d: BAD SECTOR

Q	SPMYou can choose to ignore the error by pressing RETURN at the console
XQ	SPM(in this case, the memory buffer data should be examined to see if
XQ	SPMthey were incorrectly read), or you can reset the system with a
XQ	SPMCTRL-C and reclaim the back-up file if it exists.  The file can be
XQ	SPMreclaimed by first typing the contents of the BAK file to ensure
XQ	SPMthat it contains the proper information.  For example, type the
XQ	SPfollowing:

Q	SPTYPE x.BAK

Q	SPwhere x is the file being edited.  Then remove the primary file

Q	SPERA x.y

Q	SPand rename the BAK file

Q	SPREN x.y=x.BAK

Q	SPThe file can then be reedited, starting with the previous version.

Q	SPMED also takes file attributes into account.  If you attempt to
XQ	SPedit a Read-Only file, the message

Q	SP** FILE IS READ/ONLY **

Q	SPMappears at the console.  The file can be loaded and examined, but
XQ	SPMcannot be altered.  You must end the edit session and use STAT to
XQ	SPMchange the file attribute to R/W.  If the edited file has the system
XQ	SPattribute set, the following message:

Q	SP'SYSTEM' FILE NOT ACCESSIBLE

Q	SPMis displayed and the edit session is aborted.  Again, the STAT
XQ	SPprogram can be used to change the system attribute, if desired.



M                               2-15X

MCP/M Operating System Manual 2.3  Control Characters and Commands


XQ	SPW2.3  Control Characters and Commands

Q	SPMT&able 2-5 summarizes the control characters and commands
XQ	SPavailable in ED.


=WTable 2-5.  ED Control Characters

Q	SP9Q	GSP0Q	SP    Control                        Function
Q	SP    Character

Q	SPCTRL-C          System reboot

Q	SPCTRL-E          MPhysical <cr><lf> (not actually entered in
XQ	SPcommand)

Q	SPCTRL-H          Backspace

Q	SPCTRL-J          Logical tab (cols 1, 9, 16, ...)

Q	SPCTRL-L          MLogical <cr><lf> in search and substitute
XQ	SPstrings

Q	SPCTRL-R          Repeat line

Q	SPCTRL-U          Line delete

Q	SPCTRL-X          Line delete

Q	SPCTRL-Z          String terminator

Q	SPrub/del         Character delete

Q	SP9Q	LSP0
Q	SPTable 2-6 summarizes the commands used in ED.


=WTable 2-6.  ED Commands

Q	SP    Command                        Function
Q	SP9Q	GSP0
Q	SP  nA            Append lines

Q	SP  +_B            Begin or bottom of buffer

Q	SP  +_nC           Move character positions

Q	SP  +_nD           Delete characters

Q	SP  E             End edit and close files (normal end)

Q	SP  nF            Find string





M                               2-16XQ	SP9Q	LSP0

MCP/M Operating System Manual 2.3  Control Characters and Commands


X=WTable 2-6.  (continued)

Q	SP    Command                        Function
Q	SP9Q	GSP0
Q	SP  H             End edit, close and reopen files

Q	SP  I             MInsert characters, use i if both upper and
XQ	SPlower-case characters are to be entered.

Q	SP  nJ            Place strings in juxtaposition

Q	SP  +_nK           Kill lines

Q	SP  +_nL           Move down/up lines

Q	SP  nM            Macro definition

Q	SP  nN            Find next occurrence with autoscan

Q	SP  O             Return to original file

Q	SP  +_nP           Move and print pages

Q	SP  Q             Quit with no file changes

Q	SP  R             Read library file

Q	SP  nS            Substitute strings

Q	SP  +_nT           Type lines

Q	SP  +_U            MTranslate lower- to upper-case if U, no
XQ	SPtranslation if -U

Q	SP  +_V            MVerify line numbers, or show remaining
XQ	SPfree character space

Q	SP  0V            MA special case of the V command, OV,
XQ	SPMprints the memory buffer statistics in the
XQ	SPform

Q	SPfree/total

Q	SPMwhere free is the number of free bytes in
XQ	SPMthe memory buffer (in decimal) and total
XQ	SPis the size of the memory buffer

Q	SP  nW            Write lines

Q	SP  nZ            Wait (sleep) for approximately n seconds

Q	SP  +_n            Move and type (+_nLT).
Q	SP9Q	LSP0




M                               2-17X

MCP/M Operating System Manual 2.3  Control Characters and Commands


XQ	SPMBecause of common typographical errors, ED requires several
XQ	SPMpotentially disastrous commands to be typed as single letters,
XQ	SPrather than in composite commands.  The following commands:

Q	SPo E(end)
Q	SPo H(head)
Q	SPo O(original)
Q	SPo Q(quit)

Q	SPmust be typed as single letter commands.

Q	SPMThe commands I, J, M, N, R, and S should be typed as i, j, m,
XQ	SPMn, r, and s if both upper- and lower-case characters are used in the
XQ	SPMoperation, otherwise all characters are converted to upper-case.
XQ	SPMWhen a command is entered in upper-case, ED automatically converts
XQ	SPthe associated string to upper-case, and vice versa.


=End of Section 2






































M                               2-18X




X=WSection 3

=WCP/M Assembler



Q	SP&W3.1  Introduction

Q	SPMT&he CP/M assembler reads assembly-language source files from
XQ	SPMthe disk and produces 8080 machine language in Intel hex format.  To
XQ	SPMstart the CP/M assembler, type a command in one of the following
XQ	SPforms:

Q	SPASM filename
Q	SPASM filename.parms

Q	SPMIn both cases, the assembler assumes there is a file on the disk
XQ	SPwith the name:

Q	SPfilename.ASM

Q	SPMwhich contains an 8080 assembly-language source file.  The first and
XQ	SPMsecond forms shown above differ only in that the second form allows
XQ	SPMparameters to be passed to the assembler to control source file
XQ	SPaccess and hex and print file destinations.

Q	SPMIn either case, the CP/M assembler loads and prints the
XQ	SPmessage:

Q	SPCP/M ASSEMBLER VER n.n

Q	SPMwhere n.n is the current version number.  In the case of the first
XQ	SPMcommand, the assembler reads the source file with assumed filetype
XQ	SPASM and creates two output files

Q	SPfilename.HEX
Q	SPfilename.PRN

Q	SPMThe HEX file contains the machine code corresponding to the
XQ	SPMoriginal program in Intel hex format, and the PRN file contains an
XQ	SPMannotated listing showing generated machine code, error flags, and
XQ	SPMsource lines.  If errors occur during translation, they are listed
XQ	SPin the PRN file and at the console.

Q	SPMThe form ASM filename parms is used to redirect input and
XQ	SPMoutput files from their defaults.  In this case, the parms portion
XQ	SPMof the command is a three-letter group that specifies the origin of
XQ	SPMthe source file, the destination of the hex file, and the
XQ	SPdestination of the print file.  The form is








M                               3-1X

MCP/M Operating System Manual                    3.1  Introduction


XQ	SPfilename.p1p2p3

Q	SPwhere p1, p2, and p3 are single letters.  P1 can be

Q	SPA,B, ...,P

Q	SPMwhich designates the disk name that contains the source file.  P2
XQ	SPcan be

Q	SPA,B, ...,P

Q	SPMwhich designates the disk name that will receive the hex file; or,
XQ	SPP2 can be

Q	SPZ

Q	SPwhich skips the generation of the hex file.

Q	SPP3 can be

Q	SPA,B, ...,P

Q	SPMwhich designates the disk name that will receive the print file.  P3
XQ	SPcan also be specified as

Q	SPX

Q	SPwhich places the listing at the console; or

Q	SPZ

Q	SPwhich skips generation of the print file.  Thus, the command

Q	SPASM X.AAA

Q	SPMindicates that the source, X.HEX, and print, X.PRN, files are also
XQ	SPMto be created on disk A.  This form of the command is implied if the
XQ	SPMassembler is run from disk A.  Given that you are currently
XQ	SPaddressing disk A, the above command is the same as

Q	SPASM X

Q	SPThe command

Q	SPASM X.ABX

Q	SPMindicates that the source file is to be taken from disk A, the hex
XQ	SPMfile is to be placed on disk B, and the listing file is to be sent
XQ	SPto the console.  The command

Q	SPASM X.BZZ

Q	SPMtakes the source file from disk B and skips the generation of the
XQ	SPMhex and print files.  This command is useful for fast execution of
XQ	SPthe assembler to check program syntax.


M                               3-2X

MCP/M Operating System Manual                    3.1  Introduction


X
Q	SPMThe source program format is compatible with the Intel 8080
XQ	SPMassembler.  Macros are not implemented in ASM; see the optional MAC
XQ	SPMmacro assembler.  There are certain extensions in the CP/M assembler
XQ	SPMthat make it somewhat easier to use.  These extensions are described
XQ	SPbelow.


Q	SPW3.2  Program Format

Q	SPMA&n assembly-language program acceptable as input to the
XQ	SPassembler consists of a sequence of statements of the form

Q	SPline# label operation operand ;comment

Q	SPMwhere any or all of the fields may be present in a particular
XQ	SPMinstance.  Each assembly-language statement is terminated with a
XQ	SPMcarriage return and line-feed (the line-feed is inserted
XQ	SPMautomatically by the ED program), or with the character !, which is
XQ	SPMtreated as an end-of-line by the assembler.  Thus, multiple
XQ	SPMassembly-language statements can be written on the same physical
XQ	SPline if separated by exclamation point symbols.

Q	SPMThe line# is an optional decimal integer value representing the
XQ	SPsource program line number, and ASM ignores this field if present.

Q	SPThe label field takes either of the following forms:

Q	SPidentifier
Q	SPidentifier:

Q	SPMThe label field is optional, except where noted in particular
XQ	SPMstatement types.  The identifier is a sequence of alphanumeric
XQ	SPMcharacters where the first character is alphabetic.  Identifiers can
XQ	SPMbe freely used by the programmer to label elements such as program
XQ	SPMsteps and assembler directives, but cannot exceed 16 characters in
XQ	SPMlength.  All characters are significant in an identifier, except for
XQ	SPMthe embedded dollar symbol $, which can be used to improve
XQ	SPMreadability of the name.  Further, all lower-case alphabetics are
XQ	SPMtreated as upper-case.  The following are all valid instances of
XQ	SPlabels:


Q	SPx       xy      long$name

Q	SPx:      yxl:    longer$named$data:

Q	SPX1Y2    X1x2    x234$5678$9012$3456:


Q	SPMThe operation field contains either an assembler directive or
XQ	SPMpseudo operation, or an 8080 machine operation code.  The pseudo
XQ	SPMoperations and machine operation codes are described in Section 3.3.
X



M                               3-3X

MCP/M Operating System Manual                  3.2  Program Format


XQ	SPMGenerally, the operand field of the statement contains an
XQ	SPMexpression formed out of constants and labels, along with arithmetic
XQ	SPMand logical operations on these elements.  Again, the complete
XQ	SPdetails of properly formed expressions are given in Section 3.3.

Q	SPMThe comment field contains arbitrary characters following the
XQ	SPMsemicolon symbol until the next real or logical end-of-line.  These
XQ	SPMcharacters are read, listed, and otherwise ignored by the assembler.
XQ	SPMThe CP/M assembler also treats statements that begin with an * in
XQ	SPMcolumn one as comment statements that are listed and ignored in the
XQ	SPassembly process.

Q	SPMThe assembly-language program is formulated as a sequence of
XQ	SPMstatements of the above form, terminated by an optional END
XQ	SPMstatement.  All statements following the END are ignored by the
XQ	SPassembler.


Q	SPW3.3  Forming the Operand

Q	SPMT&o describe the operation codes and pseudo operations
XQ	SPMcompletely, it is necessary first to present the form of the operand
XQ	SPMfield, since it is used in nearly all statements.  Expressions in
XQ	SPMthe operand field consist of simple operands, labels, constants, and
XQ	SPMreserved words, combined in properly formed subexpressions by
XQ	SPMarithmetic and logical operators.  The expression computation is
XQ	SPMcarried out by the assembler as the assembly proceeds.  Each
XQ	SPMexpression must produce a 16-bit value during the assembly.
XQ	SPMFurther, the number of significant digits in the result must not
XQ	SPMexceed the intended use.  If an expression is to be used in a byte
XQ	SPMmove immediate instruction, the most significant 8 bits of the
XQ	SPMexpression must be zero.  The restriction on the expression
XQ	SPsignificance is given with the individual instructions.


Q	SPW3.3.1  Labels

Q	SPMA&s discussed above, a label is an identifier that occurs on a
XQ	SPMparticular statement.  In general, the label is given a value
XQ	SPMdetermined by the type of statement that it precedes.  If the label
XQ	SPMoccurs on a statement that generates machine code or reserves memory
XQ	SPMspace (for example, a MOV instruction or a DS pseudo operation), the
XQ	SPMlabel is given the value of the program address that it labels.  If
XQ	SPMthe label precedes an EQU or SET, the label is given the value that
XQ	SPMresults from evaluating the operand field.  Except for the SET
XQ	SPstatement, an identifier can label only one statement.

Q	SPMWhen a label appears in the operand field, its value is
XQ	SPMsubstituted by the assembler.  This value can then be combined with
XQ	SPMother operands and operators to form the operand field for a
XQ	SPparticular instruction.






M                               3-4X

MCP/M Operating System Manual             3.3  Forming the Operand


XQ	SPW3.3.2  Numeric Constants

Q	SPMA& numeric constant is a 16-bit value in one of several bases.
XQ	SPMThe base, called the radix of the constant, is denoted by a trailing
XQ	SPradix indicator.  The following are radix indicators:

Q	SPo B is a binary constant (base 2).
Q	SPo O is a octal constant (base 8).
Q	SPo Q is a octal constant (base 8).
Q	SPo D is a decimal constant (base 10).
Q	SPo H is a hexadecimal constant (base 16).

Q	SPMQ is an alternate radix indicator for octal numbers because the
XQ	SPMletter O is easily confused with the digit 0.  Any numeric constant
XQ	SPMthat does not terminate with a radix indicator is a decimal
XQ	SPconstant.

Q	SPMA constant is composed as a sequence of digits, followed by an
XQ	SPMoptional radix indicator, where the digits are in the appropriate
XQ	SPMrange for the radix.  Binary constants must be composed of 0 and 1
XQ	SPMdigits, octal constants can contain digits in the range 0-7, while
XQ	SPMdecimal constants contain decimal digits.  Hexadecimal constants
XQ	SPMcontain decimal digits as well as hexadecimal digits A(10D), B(11D),
XQ	SPMC(12D), D(13D), E(14D), and F(15D).  Note that the leading digit of
XQ	SPMa hexadecimal constant must be a decimal digit to avoid confusing a
XQ	SPMhexadecimal constant with an identifier.  A leading 0 will always
XQ	SPMsuffice.  A constant composed in this manner must evaluate to a
XQ	SPMbinary number that can be contained within a 16-bit counter,
XQ	SPotherwise it is truncated on the right by the assembler.

Q	SPMSimilar to identifiers, embedded $ signs are allowed within
XQ	SPMconstants to improve their readability.  Finally, the radix
XQ	SPMindicator is translated to upper-case if a lower-case letter is
XQ	SPMencountered.  The following are all valid instances of numeric
XQ	SPconstants:


Q	SP1234      1234D     1100B     1111$0000$1111$0000B

Q	SP1234H     OFFEH     3377O     33$77$22Q

Q	SP3377o     Ofe3h     1234d     Offffh


Q	SPW3.3.3  Reserved Words

Q	SPMT&here are several reserved character sequences that have
XQ	SPMpredefined meanings in the operand field of a statement.  The names
XQ	SPMof 8080 registers are given below.  When they are encountered, they
XQ	SPproduce the values shown to the right.







M                               3-5X

MCP/M Operating System Manual             3.3  Forming the Operand


XQ	SPW                 Table 3-1.  Reserved Characters

Q	SP                       Character     Value

Q	SP                           A           7
Q	SP                           B           0
Q	SP                           C           1
Q	SP                           D           2
Q	SP                           E           3
Q	SP                           H           4
Q	SP                           L           5
Q	SP                           M           6
Q	SP                           SP          6
Q	SP                           PSW         6


Q	SPMAgain, lower-case names have the same values as their upper-
XQ	SPMcase equivalents.  Machine instructions can also be used in the
XQ	SPMoperand field; they evaluate to their internal codes. In the case of
XQ	SPMinstructions that require operands, where the specific operand
XQ	SPMbecomes a part of the binary bit pattern of the instruction, for
XQ	SPMexample, MOV A,B, the value of the instruction, in this case MOV, is
XQ	SPMthe bit pattern of the instruction with zeros in the optional
XQ	SPfields, for example, MOV produces 40H.

Q	SPMWhen the symbol $ occurs in the operand field, not embedded
XQ	SPMwithin identifiers and numeric constants, its value becomes the
XQ	SPMaddress of the next instruction to generate, not including the
XQ	SPinstruction contained within the current logical line.


Q	SPW3.3.4  String Constants

Q	SPMS&tring constants represent sequences of ASCII characters and
XQ	SPMare represented by enclosing the characters within apostrophe
XQ	SPMsymbols.  All strings must be fully contained within the current
XQ	SPMphysical line (thus allowing exclamation point symbols within
XQ	SPMstrings) and must not exceed 64 characters in length.  The
XQ	SPMapostrophe character itself can be included within a string by
XQ	SPMrepresenting it as a double apostrophe (the two keystrokes ''),
XQ	SPMwhich becomes a single apostrophe when read by the assembler.  In
XQ	SPMmost cases, the string length is restricted to either one or two
XQ	SPMcharacters (the DB pseudo operation is an exception), in which case
XQ	SPMthe string becomes an 8- or 16-bit value, respectively.  Two-
XQ	SPMcharacter strings become a 16-bit constant, with the second
XQ	SPMcharacter as the low-order byte, and the first character as the
XQ	SPhigh-order byte.

Q	SPMThe value of a character is its corresponding ASCII code.
XQ	SPMThere is no case translation within strings; both upper- and lower-
XQ	SPMcase characters can be represented.  You should note that only
XQ	SPgraphic printing ASCII characters are allowed within strings.





M                               3-6X

MCP/M Operating System Manual             3.3  Forming the Operand


XQ	SP           Valid strings:          How assembler reads strings:

Q	SP     'A' 'AB' 'ab' 'c'               A  AB  ab  c
Q	SP     '' 'a''' '''' ''''                 a'  '   '
Q	SP     'Walla Walla Wash.'             Walla Walla Wash.
Q	SP     'She said ''Hello'' to me.'     She said ''Hello'' to me
Q	SP     'I said ''Hello'' to her.'      I said ''Hello'' to her


Q	SPW3.3.5  Arithmetic and Logical Operators

Q	SPMT&he operands described in Section 3.3 can be combined in normal
XQ	SPMalgebraic notation using any combination of properly formed
XQ	SPMoperands, operators, and parenthesized expressions.  The operators
XQ	SPrecognized in the operand field are described in Table 3-2.


=WTable 3-2.  Arithmetic and Logical Operators
Q	SP9Q	GSP0
Q	SPOperators                         Meaning

Q	SPa + b        unsigned arithmetic sum of a and b

Q	SPa - b        Munsigned arithmetic difference between a
XQ	SPand b

Q	SP  + b        unary plus (produces b)

Q	SP  - b        unary minus (identical to 0 - b)

Q	SPa * b        Munsigned magnitude multiplication of a and
XQ	SPb

Q	SPa / b        unsigned magnitude division of a by b

Q	SPa MOD b      remainder after a / b.

Q	SPNOT b        Mlogical inverse of b (all 0s become 1s, 1s
XQ	SPMbecome 0s), where b is considered a 16-bit
XQ	SPvalue

Q	SPa AND b      bit-by-bit logical and of a and b

Q	SPa OR b       bit-by-bit logical or of a and b

Q	SPa XOR b      bit-by-bit logical exclusive or of a and b

Q	SPa SHL b      Mthe value that results from shifting a to
XQ	SPthe left by an amount b, with zero fill

Q	SPa SHR b      Mthe value that results from shifting a to
XQ	SPthe right by an amount b, with zero fill
Q	SP9Q	LSP0




M                               3-7X

MCP/M Operating System Manual             3.3  Forming the Operand


XQ	SPMIn each case, a and b represent simple operands (labels,
XQ	SPMnumeric constants, reserved words, and one- or two-character
XQ	SPMstrings) or fully enclosed parenthesized subexpressions, like those
XQ	SPshown in the following examples:


Q	SP10+20  10h+37Q  LI/3  (L2+4) SHR 3

Q	SP('a' and 5fh) + '0' ('B'+B) OR (PSW+M)

Q	SP(1+(2+c)) shr (A-(B+1))


Q	SPMNote that all computations are performed at assembly time as
XQ	SPM16-bit unsigned operations.  Thus, -1 is computed as 0-1, which
XQ	SPMresults in the value 0ffffh (that is, all 1s).  The resulting
XQ	SPMexpression must fit the operation code in which it is used.  For
XQ	SPMexample, if the expression is used in an ADI (add immediate)
XQ	SPMinstruction, the high-order 8 bits of the expression must be zero.
XQ	SPMAs a result, the operation ADI-1 produces an error message (-1
XQ	SPMbecomes 0ffffh, which cannot be represented as an 8-bit value),
XQ	SPMwhile ADI(-1) AND 0FFH is accepted by the assembler because the AND
XQ	SPoperation zeros the high-order bits of the expression.


Q	SPW3.3.6  Precedence of Operators

Q	SPMA&s a convenience to the programmer, ASM assumes that operators
XQ	SPMhave a relative precedence of application that allows the programmer
XQ	SPMto write expressions without nested levels of parentheses.  The
XQ	SPMresulting expression has assumed parentheses that are defined by the
XQ	SPMrelative precedence.  The order of application of operators in
XQ	SPMunparenthesized expressions is listed below.  Operators listed first
XQ	SPMhave highest precedence (they are applied first in an
XQ	SPMunparenthesized expression), while operators listed last have lowest
XQ	SPMprecedence.  Operators listed on the same line have equal
XQ	SPMprecedence, and are applied from left to right as they are
XQ	SPencountered in an expression.


Q	SP* / MOD SHL SHR

Q	SP- +

Q	SPNOT

Q	SPAND

Q	SPOR XOR


Q	SPMThus, the expressions shown to the left below are interpreted
XQ	SPMby the assembler as the fully parenthesized expressions shown to the
XQ	SPright.



M                               3-8X

MCP/M Operating System Manual             3.3  Forming the Operand


XQ	SPa*b+c                       (a*b)+c

Q	SPa+b*c                       a+(b*c)

Q	SPa MOD b*c SHL d             ((a MOD b)*c) SHL d

Q	SPa OR b AND NOT c+d SHL e    a OR (b AND (NOT (c+(d SHL e))))


Q	SPMBalanced, parenthesized subexpressions can always be used to
XQ	SPMoverride the assumed parentheses; thus, the last expression above
XQ	SPMcould be rewritten to force application of operators in a different
XQ	SPorder, as shown:

Q	SP(a OR b) AND (NOT c)+ d SHL e

Q	SPThis results in these assumed parentheses:

Q	SP(a OR b) AND ((NOT c) + (d SHL e))

Q	SPMAn unparenthesized expression is well-formed only if the
XQ	SPMexpression that results from inserting the assumed parentheses is
XQ	SPwell-formed.


Q	SPW3.4  Assembler Directives

Q	SPMA&ssembler directives are used to set labels to specific values
XQ	SPMduring the assembly, perform conditional assembly, define storage
XQ	SPMareas, and specify starting addresses in the program.  Each
XQ	SPMassembler directive is denoted by a pseudo operation that appears in
XQ	SPMthe operation field of the line.  The acceptable pseudo operations
XQ	SPare shown in Table 3-3.


Q	SPW                Table 3-3.  Assembler Directives

Q	SP        Directive                 Meaning

Q	SP          ORG       set the program or data origin

Q	SP          END       end program, optional start address

Q	SP          EQU       numeric equate

Q	SP          SET       numeric set

Q	SP          IF        begin conditional assembly

Q	SP          ENDIF     end of conditional assembly

Q	SP          DB        define data bytes

Q	SP          DW        define data words

Q	SP          DS        define data storage area

M                               3-9X

MCP/M Operating System Guide             3.4  Assembler Directives


XQ	SPW3.4.1  The ORG Directive

Q	SPT&he ORG statement takes the form:

Q	SPlabel  ORG  expression

Q	SPMwhere label is an optional program identifier and expression is a
XQ	SPM16-bit expression, consisting of operands that are defined before
XQ	SPMthe ORG statement.  The assembler begins machine code generation at
XQ	SPMthe location specified in the expression.  There can be any number
XQ	SPMof ORG statements within a particular program, and there are no
XQ	SPMchecks to ensure that the programmer is not defining overlapping
XQ	SPMmemory areas.  Note that most programs written for the CP/M system
XQ	SPbegin with an ORG statement of the form:

Q	SPORG  100H

Q	SPMwhich causes machine code generation to begin at the base of the
XQ	SPMCP/M transient program area.  If a label is specified in the ORG
XQ	SPMstatement, the label is given the value of the expression.  This
XQ	SPMlabel can then be used in the operand field of other statements to
XQ	SPrepresent this expression.


Q	SPW3.4.2  The END Directive

Q	SPMT&he END statement is optional in an assembly-language program,
XQ	SPMbut if it is present it must be the last statement.  All subsequent
XQ	SPMstatements are ignored in the assembly.  The END statement takes the
XQ	SPfollowing two forms:

Q	SPlabel END

Q	SPlabel END expression

Q	SPMwhere the label is again optional.  If the first form is used, the
XQ	SPMassembly process stops, and the default starting address of the
XQ	SPMprogram is taken as 0000.  Otherwise, the expression is evaluated,
XQ	SPMand becomes the program starting address.  This starting address is
XQ	SPMincluded in the last record of the Intel-formatted machine code hex
XQ	SPMfile that results from the assembly.  Thus, most CP/M assembly-
XQ	SPlanguage programs end with the statement:

Q	SPEND  100H

Q	SPMresulting in the default starting address of 100H (beginning of the
XQ	SPtransient program area).










M                               3-10X

MCP/M Operating System Guide             3.4  Assembler Directives


XQ	SPW3.4.3  The EQU Directive

Q	SPMT&he EQU (equate) statement is used to set up synonyms for
XQ	SPparticular numeric values.  The EQU statement takes the form:

Q	SPlabel    EQU    expression

Q	SPMwhere the label must be present and must not label any other
XQ	SPMstatement.  The assembler evaluates the expression and assigns this
XQ	SPMvalue to the identifier given in the label field.  The identifier is
XQ	SPMusually a name that describes the value in a more human-oriented
XQ	SPMmanner.  Further, this name is used throughout the program to place
XQ	SPMparameters on certain functions.  Suppose data received from a
XQ	SPMteletype appears on a particular input port, and data is sent to the
XQ	SPMteletype through the next output port in sequence.  For example, you
XQ	SPMcan use this series of equate statements to define these ports for a
XQ	SPparticular hardware environment:


Q	SPTTYBASE      EQU 10H         ;BASE PORT NUMBER FOR TTY

Q	SPTTYIN        EQU TTYBASE     ;TTY DATA IN

Q	SPTTYOUT       EQU TTYBASE+1   ;TTY DATA OUT


Q	SPMAt a later point in the program, the statements that access the
XQ	SPteletype can appear as follows:


Q	SP IN     TTYIN     ;READ TTY DATA TO REG-A

Q	SP ...

Q	SP OUT    TTYOUT    ;WRITE DATA TO TTY FROM REG-A


Q	SPMmaking the program more readable than if the absolute I/O ports are
XQ	SPMused.  Further, if the hardware environment is redefined to start
XQ	SPMthe teletype communications ports at 7FH instead of 10H, the first
XQ	SPstatement need only be changed to

Q	SPTTYBASE    EQU    7FH    ;BASE PORT NUMBER FOR TTY

Q	SPMand the program can be reassembled without changing any other
XQ	SPstatements.


Q	SPW3.4.4  The SET Directive

Q	SPT&he SET statement is similar to the EQU, taking the form:

Q	SPlabel    SET    expression

Q	SPMexcept that the label can occur on other SET statements within the
XQ	SPMprogram.  The expression is evaluated and becomes the current value

M                               3-M11XX

MCP/M Operating System Guide             3.4  Assembler Directives


XQ	SPMassociated with the label.  Thus, the EQU statement defines a label
XQ	SPMwith a single value, while the SET statement defines a value that is
XQ	SPMvalid from the current SET statement to the point where the label
XQ	SPMoccurs on the next SET statement.  The use of the SET is similar to
XQ	SPMthe EQU statement, but is used most often in controlling conditional
XQ	SPassembly.


Q	SPW3.4.5  The IF and ENDIF Directives

Q	SPMT&he IF and ENDIF statements define a range of assembly-language
XQ	SPMstatements that are to be included or excluded during the assembly
XQ	SPprocess.  These statements take on the form:


Q	SPIF  expression

Q	SPstatement#1

Q	SPstatement#2

Q	SP  ...

Q	SPstatement#n

Q	SPENDIF


Q	SPMWhen encountering the IF statement, the assembler evaluates the
XQ	SPMexpression following the IF.  All operands in the expression must be
XQ	SPMdefined ahead of the IF statement.  If the expression evaluates to a
XQ	SPMnonzero value, then statement#1 through statement#n are assembled.
XQ	SPMIf the expression evaluates to zero, the statements are listed but
XQ	SPMnot assembled.  Conditional assembly is often used to write a single
XQ	SPMgeneric program that includes a number of possible run-time
XQ	SPMenvironments, with only a few specific portions of the program
XQ	SPMselected for any particular assembly.  The following program
XQ	SPMsegments, for example, might be part of a program that communicates
XQ	SPMwith either a teletype or a CRT console (but not both) by selecting
XQ	SPa particular value for TTY before the assembly begins.

















M                               3-12X

MCP/M Operating System Guide             3.4  Assembler Directives


XQ	SPTRUE     EQU            OFFFFH     ;DEFINE VALUE OF TRUE
Q	SPFALSE    EQU            NOT TRUE   ;DEFINE VALUE OF FALSE
Q	SP;
Q	SPTTY      EQU            TRUE       ;TRUE IF TTY, FALSE IF CRT
Q	SP;
Q	SPTTYBASE  EQU            10H        ;BASE OF TTY I/O PORTS
Q	SPCRTBASE  EQU            20H        ;BASE OF CRT I/O PORTS
Q	SP         IF             TTY        ;ASSEMBLE RELATIVE TO
Q	SP                                   ;TTYBASE
Q	SPCONIN    EQU            TTYBASE    ;CONSOLE INPUT
Q	SPCONOUT   EQU            TTYBASE+1  ;CONSOLE OUTPUT
Q	SP         ENDIF

Q	SP;        IF             NOT TTY    ;ASSEMBLE RELATIVE TO
Q	SP                                   ;CRTBASE
Q	SPCONIN    EQU            CRTBASE    ;CONSOLE INPUT
Q	SPCONOUT   EQU            CRTBASE+1  ;CONSOLE OUTPUT

Q	SP         ENDIF
Q	SP         ...
Q	SP         IN             CONIN      ;READ CONSOLE DATA
Q	SP         ...
Q	SP         OUT            CONTOUT    ;WRITE CONSOLE DATA


Q	SPMIn this case, the program assembles for an environment where a
XQ	SPMteletype is connected, based at port 10H.  The statement defining
XQ	SPTTY can be changed to

Q	SPTTY      EQU         FALSE

Q	SPMand, in this case, the program assembles for a CRT based at port
XQ	SP20H.


Q	SPW3.4.6  The DB Directive

Q	SPMT&he DB directive allows the programmer to define initialized
XQ	SPMstorage areas in single-precision byte format.  The DB statement
XQ	SPtakes the form:

Q	SPlabel DB e#1, e#2, ..., e#n

Q	SPMwhere e#1 through e#n are either expressions that evaluate to 8-bit
XQ	SPMvalues (the high-order bit must be zero) or are ASCII strings of
XQ	SPMlength no greater than 64 characters.  There is no practical
XQ	SPMrestriction on the number of expressions included on a single source
XQ	SPMline.  The expressions are evaluated and placed sequentially into
XQ	SPMthe machine code file following the last program address generated
XQ	SPMby the assembler.  String characters are similarly placed into
XQ	SPMmemory starting with the first character and ending with the last
XQ	SPMcharacter.  Strings of length greater than two characters cannot be
XQ	SPused as operands in more complicated expressions.




M                               3-13X

MCP/M Operating System Guide             3.4  Assembler Directives


XQ	SPMWNote:  &ASCII characters are always placed in memory with the parity
XQ	SPMbit reset (0).  Also, there is no translation from lower- to upper-
XQ	SPMcase within strings.  The optional label can be used to reference
XQ	SPMthe data area throughout the remainder of the program.  The
XQ	SPfollowing are examples of valid DB statements:


Q	SPdata:        DB        0,1,2,3,4,5
Q	SP             DB        data and 0ffh,5,377Q,1+2+3+4

Q	SPsign-on:     DB        'please type your name',cr,lf,0
Q	SP             DB        'AB' SHR 8, 'C', 'DE' AND 7FH



Q	SPW3.4.7  The DW Directive

Q	SPMT&he DW statement is similar to the DB statement except double-
XQ	SPMprecision two-byte words of storage are initialized.  The DW
XQ	SPstatement takes the form:

Q	SPlabel        DW        e#1, e#2, ..., e#n

Q	SPMwhere e#1 through e#n are expressions that evaluate to 16-bit
XQ	SPMresults.  Note that ASCII strings of one or two characters are
XQ	SPMallowed, but strings longer than two characters are disallowed.  In
XQ	SPMall cases, the data storage is consistent with the 8080 processor;
XQ	SPMthe least significant byte of the expression is stored first in
XQ	SPMmemory, followed by the most significant byte.  The following are
XQ	SPexamples of DW statements:


Q	SPdoub:        DW        0ffefh,doub+4,signon-$,255+255
Q	SP             DW        'a', 5, 'ab', 'CD', 6 shl 8 or llb.



Q	SPW3.4.8  The DS Directive

Q	SPMT&he DS statement is used to reserve an area of uninitialized
XQ	SPmemory, and takes the form:

Q	SPlabel        DS        expression

Q	SPMwhere the label is optional.  The assembler begins subsequent code
XQ	SPMgeneration after the area reserved by the DS.  Thus, the DS
XQ	SPMstatement given above has exactly the same effect as the following
XQ	SPstatement:

Q	SPlabel:       EQU  $  ;LABEL VALUE IS CURRENT CODE LOCATION
Q	SP             ORG  $+expression  ;MOVE PAST RESERVED AREA






M                               3-14X

MCP/M Operating System Manual                 3.5  Operation Codes


XQ	SPW3.5  Operation Codes

Q	SPMA&ssembly-language operation codes form the principal part of
XQ	SPMassembly-language programs and form the operation field of the
XQ	SPMinstruction.  In general, ASM accepts all the standard mnemonics for 
XQ	SPMthe Intel 8080 microcomputer, which are given in detail in the EIntelR 
XQ	SPM8080 Assembly Language Programming Manual.R  Labels are optional on
XQ	SPMeach input line.  The individual operators are listed briefly in the
XQ	SPMfollowing sections for completeness, although the Intel manuals
XQ	SPMshould be referenced for exact operator details.  In Tables 3-4
XQ	SPthrough 3-8, bit values have the following meaning:


Q	SPo Me3 represents a 3-bit value in the range 0-7 that can be one of
XQ	SPthe predefined registers A, B, C, D, E, H, L, M, SP, or PSW.

Q	SPo e8 represents an 8-bit value in the range 0-255.

Q	SPo e16 represents a 16-bit value in the range 0-65535.


Q	SPMThese expressions can be formed from an arbitrary combination
XQ	SPMof operands and operators.  In some cases, the operands are
XQ	SPMrestricted to particular values within the allowable range, such as
XQ	SPMthe PUSH instruction.  These cases are noted as they are
XQ	SPencountered.

Q	SPMIn the sections that follow, each operation code is listed in
XQ	SPMits most general form, along with a specific example, a short
XQ	SPexplanation, and special restrictions.


Q	SPW3.5.1  Jumps, Calls, and Returns

Q	SPMT&he Jump, Call, and Return instructions allow several different
XQ	SPMforms that test the condition flags set in the 8080 microcomputer
XQ	SPCPU.  The forms are shown in Table 3-4.


=WTable 3-4.  Jumps, Calls, and Returns
Q	SP9Q	JSP0
Q	SP  Form   Bit    Example                  Meaning
Q	SP        Value

Q	SP  JMP    e16    JMP L1      Jump unconditionally to label

Q	SP  JNZ    e16    JNZ L2      Jump on nonzero condition to label

Q	SP  JZ     e16    JZ 100H     Jump on zero condition to label

Q	SP  JNC    e16    JNC L1+4    Jump no carry to label

Q	SP  JC     e16    JC L3       Jump on carry to label

Q	SP  JPO    e16    JPO $+8     Jump on parity odd to label


M                               3-15XQ	SP9Q	LSP0

MCP/M Operating System Manual                 3.5  Operation Codes


X=WTable 3-4.  (continued)
Q	SP9Q	JSP0
Q	SP  Form   Bit    Example                  Meaning
Q	SP        Value

Q	SP  JPE    e16    JPE L4      Jump on even parity to label

Q	SP  JP     e16    JP GAMMA    Jump on positive result to label

Q	SP  JM     e16    JM al       Jump on minus to label


Q	SP  CALL   e16    CALL S1     Call subroutine unconditionally

Q	SP  CNZ    e16    CNZ S2      Call subroutine on nonzero
Q	SP                            condition

Q	SP  CZ     e16    CZ 100H     Call subroutine on zero condition

Q	SP  CNC    e16    CNC S1+4    Call subroutine if no carry set

Q	SP  CC     e16    CC S3       Call subroutine if carry set

Q	SP  CPO    e16    CPO $+8     Call subroutine if parity odd

Q	SP  CPE    e16    CPE $4      Call subroutine if parity even

Q	SP  CP     e16    CP GAMMA    Call subroutine if positive result

Q	SP  CM     e16    CM b1$c2    Call subroutine if minus flag


Q	SP  RST    e3     RST 0       Programmed restart, equivalent to
Q	SP                            CALL 8*e3, except one byte call

Q	SP  RET                       Return from subroutine

Q	SP  RNZ                       Return if nonzero flag set

Q	SP  RZ                        Return if zero flag set

Q	SP  RNC                       Return if no carry

Q	SP  RC                        Return if carry flag set

Q	SP  RPO                       Return if parity is odd

Q	SP  RPE                       Return if parity is even

Q	SP  RP                        Return if positive result

Q	SP  RM                        Return if minus flag is set
Q	SP9Q	LSP0




M                               3-16X

MCP/M Operating System Manual                 3.5  Operation Codes


XQ	SPW3.5.2  Immediate Operand Instructions

Q	SPMS&everal instructions are available that load single- or double-
XQ	SPMprecision registers or single-precision memory cells with constant
XQ	SPMvalues, along with instructions that perform immediate arithmetic or
XQ	SPMlogical operations on the accumulator (register A).  Table 3-5
XQ	SPdescribes the immediate operand instructions.


=WTable 3-5.  Immediate Operand Instructions

Q	SP9Q	GSP0Q	SPForm with       Example                Meaning
Q	SPBit Values

Q	SPMVI e3,e8    MVI B,255        MMove immediate data to
XQ	.SPMregister A, B, C, D, E, H,
XQ	.SPL, or M (memory)

Q	SPADI e8       ADI 1            MAdd immediate operand to A
XQ	.SPwithout carry

Q	SPACI e8       ACI 0FFH         MAdd immediate operand to A
XQ	.SPwith carry

Q	SPSUI e8       SUI L + 3        MSubtract from A without
XQ	.SPborrow (carry)

Q	SPSBI e8       SBI L AND 11B    MSubtract from A with borrow
XQ	.SP(carry)

Q	SPANI e8       ANI $ AND 7FH    MLogical and A with
XQ	.SPimmediate data

Q	SPXRI e8       XRI 1111$0000B   MExclusive or A with
XQ	.SPimmediate data

Q	SPORI e8       ORI L AND 1+1    MLogical or A with immediate
XQ	.SPdata

Q	SPCPI e8       CPI 'a'          MCompare A with immediate
XQ	.SPMdata, same as SUI except
XQ	.SPregister A not changed.

Q	SPLXI e3,e16   LXI B,100H       MLoad extended immediate to
XQ	.SPMregister pair.  e3 must be
XQ	.SPMequivalent to B, D, H, or
XQ	.SPSP.
Q	SP9Q	LSP0

Q	SPW3.5.3  Increment and Decrement Instructions

Q	SPMT&he 8080 provides instructions for incrementing or decrementing
XQ	SPMsingle- and double-precision registers.  The instructions are
XQ	SPdescribed in Table 3-6.



M                               3-17X

MCP/M Operating System Manual                 3.5  Operation Codes


X=WTable 3-6.  Increment and Decrement Instructions
Q	SP9Q	GSP0
Q	SPForm with         Example              Meaning
Q	SPBit Value

Q	SPINR e3          INR E       MSingle-precision increment
XQ	.SPMregister.  e3 produces one
XQ	.SPMof A, B, C, D, E, H, L, M.
X
Q	SPDCR e3          DCR A       MSingle-precision decrement
XQ	.SPMregister.  e3 produces one
XQ	.SPMof A, B, C, D, E, H, L, M.
X
Q	SPINX e3          INX SP      MDouble-precision increment
XQ	.SPMregister pair.  e3 must be
XQ	.SPMequivalent to B, D, H, or
XQ	.SPSP.

Q	SPDCX e3          DCX B       MDouble-precision decrement
XQ	.SPMregister pair.  e3 must be
XQ	.SPMequivalent to B, D, H, or
XQ	.SPSP.
Q	SP9Q	LSP0


Q	SPW3.5.4  Data Movement Instructions

Q	SPMI&nstructions that move data from memory to the CPU and from CPU
XQ	SPto memory are given in the following table.


=WTable 3-7.  Data Movement Instructions
Q	SP9Q	GSP0
Q	SPForm with      Example                 Meaning
Q	SPBit Value

Q	SPMOV e3,e3      MOV A,B        MMove data to leftmost
XQ	.SPMelement from rightmost
XQ	.SPMelement.  e3 produces on
XQ	.SPMof A, B, C, D, E, H, L, or
XQ	.SPMM.  MOV M,M is disallowed.
X
Q	SPLDAX e3        LDAX B         MLoad register A from
XQ	.SPMcomputed address.  e3 must
XQ	.SPproduce either B or D.

Q	SPSTAX e3        STAX D         MStore register A to
XQ	.SPMcomputed address.  e3 must
XQ	.SPproduce either B or D.

Q	SPLHLD e16       LHLD L1        MLoad HL direct from
XQ	.SPMlocation e16.  Double-
XQ	.SPMprecision load to H and L.
X



M                               3-18XQ	SP9Q	LSP0

MCP/M Operating System Manual                 3.5  Operation Codes


X=WTable 3-7.  (continued)
Q	SP9Q	GSP0
Q	SPForm with      Example                 Meaning
Q	SPBit Value

Q	SPSHLD e16       SHLD L5+x      MStore  HL  direct  to
XQ	.SPMlocation e16.  Double-
XQ	.SPMprecision store from H and
XQ	.SPL to memory.

Q	SPLDA e16        LDA Gamma      MLoad register A from
XQ	.SPaddress e16.

Q	SPSTA e16        STA X3-5       MStore register A into
XQ	.SPmemory at e16.

Q	SPPOP e3         POP PSW        MLoad register pair from
XQ	.SPMstack, set SP.  e3 must
XQ	.SPMproduce one of B, D, H, or
XQ	.SPPSW.

Q	SPPUSH e3        PUSH B         MStore register pair into
XQ	.SPMstack, set SP.  e3 must
XQ	.SPMproduce on of B, D, H, or
XQ	.SPPSW.

Q	SPIN e8          IN 0           MLoad register A with data
XQ	.SPfrom port e8.

Q	SPOUT e8         OUT 255        MSend data from register A
XQ	.SPto port e8.

Q	SPXTHL                          MExchange data from top of
XQ	.SPstack with HL.

Q	SPPCHL                          MFill program counter with
XQ	.SPdata from HL.

Q	SPSPHL                          MFill stack pointer with
XQ	.SPdata from HL.

Q	SPXCHG                          MExchange DE pair with HL
XQ	.SPpair.
Q	SP9Q	LSP0


Q	SPW3.5.5  Arithmetic Logic Unit Operations

Q	SPMI&nstructions that act upon the single-precision accumulator to
XQ	SPMperform arithmetic and logic operations are given in the following
XQ	SPtable.






M                               3-19X

MCP/M Operating System Manual                 3.5  Operation Codes


X=WTable 3-8.  Arithmetic Logic Unit Operations
Q	SP9Q	GSP0
Q	SPForm with       Example                Meaning
Q	SPBit Value

Q	SPADD e3         ADD B         MAdd register given by e3 to
XQ	.SPMaccumulator without carry.
XQ	.SPMe3 must produce one of A,
XQ	.SPB, C, D, E, H, or L.

Q	SPADC e3         ADC L         MAdd register to A with
XQ	.SPcarry, e3 as above.

Q	SPSUB e3         SUB H         MSubtract reg e3 from A
XQ	.SPMwithout carry, e3 is
XQ	.SPdefined as above.

Q	SPSBB e3         SBB 2         MSubtract register e3 from A
XQ	.SPMwith carry, e3 defined as
XQ	.SPabove.

Q	SPANA e3         ANA 1+1       MLogical and reg with A, e3
XQ	.SPas above.

Q	SPXRA e3         XRA A         MExclusive or with A, e3 as
XQ	.SPabove.

Q	SPORA e3         ORA B         MLogical or with A, e3
XQ	.SPdefined as above.

Q	SPCMP e3         CMP H         MCompare register with A, e3
XQ	.SPas above.

Q	SPDAA                          MDecimal adjust register A
XQ	.SPMbased upon last arithmetic
XQ	.SPlogic unit operation.

Q	SPCMA                          MComplement the bits in
XQ	.SPregister A.

Q	SPSTC                          Set the carry flag to 1.

Q	SPCMC                          MComplement the carry flag.
X
Q	SPRLC                          MRotate bits left, (re)set
XQ	.SPMcarry as a side effect.
XQ	.SPMHigh-order A bit becomes
XQ	.SPcarry.

Q	SPRRC                          MRotate bits right, (re)set
XQ	.SPMcarry as side effect.
XQ	.SPMLow-order A bit becomes
XQ	.SPcarry.




M                               3-20XQ	SP9Q	LSP0

MCP/M Operating System Manual                 3.5  Operation Codes


X=WTable 3-8.  (continued)
Q	SP9Q	GSP0
Q	SPForm with       Example                Meaning
Q	SPBit Value

Q	SPRAL                          MRotate carry/A register to
XQ	.SPMleft.  Carry is involved
XQ	.SPin the rotate.

Q	SPRAR                          MRotate carry/A register to
XQ	.SPMright.  Carry is involved
XQ	.SPin the rotate.

Q	SPDAD e3         DAD B         MDouble-precision add
XQ	.SPMregister pair e3 to HL.
XQ	.SPMe3 must produce B, D, H,
XQ	.SPor SP.
Q	SP9Q	LSP0

Q	SPW3.5.6  Control Instructions

Q	SPMT&he four remaining instructions, categorized as control
XQ	SPinstructions, are the following:

Q	SPo HLT halts the 8080 processor.
Q	SPo DI disables the interrupt system.
Q	SPo EI enables the interrupt system.
Q	SPo NOP means no operation.


Q	SPW3.6  Error Messages

Q	SPMW&hen errors occur within the assembly-language program, they
XQ	SPMare listed as single-character flags in the leftmost position of the
XQ	SPMsource listing.  The line in error is also echoed at the console so
XQ	SPMthat the source listing need not be examined to determine if errors
XQ	SPare present.  The error codes are listed in the following table.


=WTable 3-9.  Error Codes

Q	SP9Q	GSP0Q	SPError Code                       Meaning

Q	SPD            MData error:  element in data statement cannot
XQ	SPbe placed in the specified data area.

Q	SPE            MExpression error:  expression is ill-formed
XQ	SPand cannot be computed at assembly time.

Q	SPL            MLabel error:  label cannot appear in this
XQ	SPcontext; might be duplicate label.

Q	SPN            MNot implemented:  features that will appear in
XQ	SPMfuture ASM versions.  For example, macros are
XQ	SPrecognized, but flagged in this version.


M                               3-21XQ	SP9Q	LSP0

MCP/M Operating System Manual                  3.6  Error Messages


X=WTable 3-9.  (continued)

Q	SP9Q	GSP0Q	SPError Code                       Meaning

Q	SPO            MOverflow:  expression is too complicated (too
XQ	SPMmany pending operators) to be computed and
XQ	SPshould be simplified.

Q	SPP            MPhase error:  label does not have the same
XQ	SPMvalue on two subsequent passes through the
XQ	SPprogram.

Q	SPR            MRegister error:  the value specified as a
XQ	SPMregister is not compatible with the operation
XQ	SPcode.

Q	SPS            MSyntax error:  statement is not properly
XQ	SPformed.

Q	SPV            MValue error:  operand encountered in
XQ	SPexpression is improperly formed.
Q	SP9Q	LSP0

Q	SPMTable 3-10 lists the error messages that are due to terminal
XQ	SPerror conditions.


=WTable 3-10.  Error Messages

Q	SP9Q	GSP0Q	SPMessage       Meaning

Q	SPNO SOURCE FILE PRESENT

Q	SPMThe file specified in the ASM command does
XQ	SPnot exist on disk.


Q	SPNO DIRECTORY SPACE

Q	SPMThe disk directory is full; erase files
XQ	SPthat are not needed and retry.


Q	SPSOURCE FILE NAME ERROR

Q	SPMImproperly formed ASM filename, for
XQ	SPexample, it is specified with ? fields.


Q	SPSOURCE FILE READ ERROR

Q	SPMSource file cannot be read properly by the
XQ	SPMassembler; execute a TYPE to determine the
XQ	SPpoint of error.



M                               3-22XQ	SP9Q	LSP0

MCP/M Operating System Manual                  3.6  Error Messages


X=WTable 3-10.  (continued)

Q	SP9Q	GSP0Q	SPMessage       Meaning

Q	SPOUTPUT FILE WRITE ERROR

Q	SPMOutput files cannot be written properly;
XQ	SPMmost likely cause is a full disk, erase and
XQ	SPretry.


Q	SPCANNOT CLOSE FILE

Q	SPMOutput file cannot be closed; check to see
XQ	SPif disk is write protected.
Q	SP9Q	LSP0


Q	SPW3.7  A Sample Session

Q	SPMT&he following sample session shows interaction with the
XQ	SPMassembler and debugger in the development of a simple assembly-
XQ	SPMlanguage program.  The arrow represents a carriage return keystroke.
X

Q	SPA>WASM SORT      &Assemble SORT.ASM

Q	SPCP/M ASSEMBLER - VER 1.0

Q	SP0015C    Next free address
Q	SP003H USE FACTOR    Percent of table used 00 to ff (hexadecimal)
Q	SPEND OF ASSEMBLY

Q	SPA>WDIR SORT.*

Q	SP&SORT  ASM    Source file
Q	SPSORT  BAK    Back-up from last edit
Q	SPSORT  PRN    Print file (contains tab characters)
Q	SPSORT  HEX    Machine code file

Q	SPA>WTYPE SORT.PRN
Q	SP&                    Source line

Q	SP            ;       SORT PROGRAM IN CP/M ASSEMBLY LANGUAGE
Q	SP            ;       START AT THE BEGINNING OF THE TRANSIENT
Q	SP                    PROGRAM AREA

Q	SPMachine code location
Q	SP0100                ORG               100H

Q	SPGenerated machine code
Q	SP0100 214601 SORT:   LXI H,SW  ;ADDRESS SWITCH TOGGLE
Q	SP0103 3601           MVI M,1   ;SET TO 1 FOR FIRST ITERATION
Q	SP0105 214701         LXI H,I   ;ADDRESS INDEX
Q	SP0108 3600           MVI M,0   ;I=0


M                               3-23X

MCP/M Operating System Manual                3.7  A Sample Session


XQ	SP            ;
Q	SP            ;       COMPARE I WITH ARRAY SIZE
Q	SP010A 7E     COMPL:  MOV A,M   ;A REGISTER = I
Q	SP010B FE09           CPI N-1   ;CY SET IF I<(N-1)
Q	SP010D D21901         JNC CONT  ;CONTINUE IF I<=(N-2)
Q	SP            ;
Q	SP            ;       END OF ONE PASS THROUGH DATA
Q	SP0110 214601         LXI H,SW  ;CHECK FOR ZERO SWITCHES
Q	SP0113 7EB7C200001    MOV A, M! ORA A! JNZ SORT ;END OF SORT IF SW=0
Q	SP            ;
Q	SP0118 FF             RST 7     ;GO TO THE DEBUGGER INSTEAD OF REB
Q	SP            ;
Q	SP            ;       CONTINUE THIS PASS
Q	SPTruncated   ;       ADDRESSING I, SO LOAD AV(I) INTO REGISTERS
Q	SP0119
Q	SP 5F16002148CONT:    MOV E, A! MVI D, 0! LXI H, AV! DAD D! DAD D
Q	SP0121 4E792346       MOV C, M! MOV A, C! INX H! MOV B, M
Q	SP            ;       LOW ORDER BYTE IN A AND C, HIGH ORDER BYTE IN B
Q	SP            ;
Q	SP            ;       MOV H AND L TO ADDRESS AV(I+1)
Q	SP0125 23             INX H
Q	SP            ;
Q	SP            ;       COMPARE VALUE WITH REGS CONTAINING AV (I)
Q	SP0126 965778239E     SUB M! MOV D, A! MOV A, B! INX H! SBB M  ;SUBTRACT
Q	SP            ;
Q	SP            ;       BORROW SET IF AV(I+1)>AV(I)
Q	SP012B DA3F01         JC  INCI  ;SKIP IF IN PROPER ORDER
Q	SP            ;
Q	SP            ;       CHECK FOR EQUAL VALUES
Q	SP012E B2CA3F01       ORA D! JZ INCI ;SKIP IF AV(I) = AV(I+1)
Q	SP0132 56702B5E       MOV D, M! MOV M, B! DCX H! MOV E, M
Q	SP0136 712B722B73     MOV M, C! DCX H! MOV M, D! DCX H! MOV M, E
Q	SP            ;
Q	SP            ;       INCREMENT SWITCH COUNT
Q	SP013B 21460134       LXI H,SW! INR M
Q	SP            ;
Q	SP            ;       INCREMENT I
Q	SP013F 21470134C3INCI:LXI H,I! INR M! JMP COMP
Q	SP            ;
Q	SP            ;       DATA DEFINITION SECTION
Q	SP0146 00     SW:     DB 0      ;RESERVE SPACE FOR SWITCH COUNT
Q	SP0147        I:      DS 1      ;SPACE FOR INDEX
Q	SP0148 050064001EAV:  DW 5, 100, 30, 50, 20, 7, 1000, 300, 100, -32767
Q	SP000A =      N       EQU($-AV)/2    ;COMPUTE N INSTEAD OF PRE
Q	SP015C                END
Q	SPA>WTYPE SORT.HEX     &Equate value

Q	SP:10010000214601360121470136007EFE09D2190140
Q	SP:100110002146017EB7C20001FF5F16002148011988    Machine code in
Q	SP:10012000194E79234623965778239EDA3F01B2CAA7    HEX format

Q	SP:100130003F0156702B5E712B722B732146013421C7
Q	SP:07014000470134C30A01006E                      Machine code in
Q	SP:10014800050064001E00320014000700E8032C01BB    HEX format
Q	SP:0401580064000180BE
Q	SP:0000000000

M                               3-24X

MCP/M Operating System Manual                3.7  A Sample Session


XQ	SPA>WDDT SORT.HEX        &Start debug run

Q	SP16K DDT VER 1.0
Q	SPNEXT PC
Q	SP015C 0000     Default address (no address on END statement)
Q	SP-XP

Q	SPP=0000 100    Change PC to 100

Q	SP-UFFFF    Untrace for 65535 steps
Q	SP                                           Abort with rubout
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0100 LXI H,0146*0100
Q	SP-T10    Trace 10U16D steps

Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0100 LXI H, 0146
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0103 MVI M, 01
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0105 LXI H, 0147
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0147 S=0100 P=0108 MVI M, 00
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0147 S=0100 P=010A MOV A, M
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=010B CPI 09
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=010D JNC 0119
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=0110 LXI H, 0146
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0146 S=0100 P=0113 MOV A, M
Q	SPC1Z0M1E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0114 ORA A
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0115 JNZ 0100
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0100 LXI H, 0146
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0103 MVI M, 01
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0146 S=0100 P=0105 LXI H, 0147
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0147 S=0100 P=0108 MVI M, 00
Q	SPC0Z0M0E0I0 A=01 B=0000 D=0000 H=0147 S=0100 P=010A MOV A, M*010B
Q	SP-A10D                                       Stopped at 10BH

Q	SP010D JC 119   Change to a jump on carry
Q	SP0110

Q	SP-XP

Q	SPP=010B 100   Reset program counter back to beginning of program

Q	SP-T10    Trace execution for 10H steps

Q	SP                                              Altered instruction
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=0100 LXI H,0146
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0146 S=0100 P=0103 MVI M,01
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0146 S=0100 P=0105 LXI H,0147
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=0108 MVI M,00
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=010A MOV A,M
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=010B CPI 09
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=010D JC 0119
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=0119 MOV E,A
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=011A MVI D,00
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0147 S=0100 P=011C LXI H,0148
Q	SPC1Z0M1E0I0 A=00 B=0000 D=0000 H=0148 S=0100 P=011F DAD D
Q	SPC0Z0M1E0I0 A=00 B=0000 D=0000 H=0148 S=0100 P=0120 DAD D
Q	SPC0Z0M1E0I0 A=00 B=0000 D=0000 H=0148 S=0100 P=0121 MOV C,M


M                               3-25X

MCP/M Operating System Manual                3.7  A Sample Session


XQ	SPC0Z0M1E0I0 A=00 B=0005 D=0000 H=0148 S=0100 P=0122 MOV A,C
Q	SPC0Z0M1E0I0 A=05 B=0005 D=0000 H=0148 S=0100 P=0123 INX H
Q	SPC0Z0M1E0I0 A=05 B=0005 D=0000 H=0149 S=0100 P=0124 MOV B,M*0125
Q	SP-L100                               Automatic breakpoint

Q	SP 0100   LXI H,0146
Q	SP 0103   MVI M,01
Q	SP 0105   LXI H,0147
Q	SP 0108   MVI M,00
Q	SP 010A   MOV A,M        List some code
Q	SP 010B   CPI 09         from 100H
Q	SP 010D   JC  0119
Q	SP 0110   LXI H,0146
Q	SP 0113   MOV A,M
Q	SP 0114   ORA A
Q	SP 0115   JNZ 0100
Q	SP -L

Q	SP 0118   RST 07
Q	SP 0119   MOV E,A        List more
Q	SP 011A   MVI D,00
Q	SP 011C   LXI H,0148
Q	SP-Abort list with rubout
Q	SP-G,11B    Start program from current PC (0125H)
Q	SP          and run in real time to 11BH



Q	SP*0127   Stopped with an external interrupt 7 from front panel
Q	SP-T4                        (program was looping indefinitely)
Q	SP      Look at looping program in trace mode

Q	SPC0Z0M0E0I0 A=38 B=0064 D=0006 H=0156 S=0100 P=0127 MOV D,A
Q	SPC0Z0M0E0I0 A=38 B=0064 D=3806 H=0156 S=0100 P=0128 MOV A,B
Q	SPC0Z0M0E0I0 A=00 B=0064 D=3806 H=0156 S=0100 P=0129 INX H
Q	SPC0Z0M0E0I0 A=00 B=0064 D=3806 H=0157 S=0100 P=012A SBB M*012B
Q	SP-D148
Q	SP                        Data are sorted, but program does not stop.
Q	SP0148 05 00 07 00 14 00 1E 00........
Q	SP0150 32 00 64 00 64 00 2C 01 E8 03 01 80 00 00 00 00 2.D.D.,........

Q	SP0160 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00................

Q	SP-G0    Return to CP/M

Q	SPA>WDDT SORT.HEX    &Reload the memory image

Q	SP16K DDT VER 1.0
Q	SPNEXT PC
Q	SP015C 0000
Q	SP-XP

Q	SPP=0000 100    Set PC to beginning of program

Q	SP-L10D   List bad OPCODE


M                               3-26X

MCP/M Operating System Manual                3.7  A Sample Session


X
Q	SP 010D   JNC 0119
Q	SP 0110   LXI H,0146
Q	SP-Abort list with rubout
Q	SP-A10D    Assemble new OPCODE

Q	SP010D JC 119

Q	SP0110

Q	SP-L100   List starting section of program

Q	SP 0100   LXI H,0146
Q	SP 0103   MVI M,01
Q	SP 0105   LXI H,0147
Q	SP 0108   MVI M,00
Q	SP-Abort list with rubout
Q	SP-A103    Change switch initialization to 00

Q	SP0103 MVI M,0

Q	SP0105

Q	SP-^C  Return to CP/M with CTRL-C (G0 works as well)

Q	SPSAVE 1 SORT.COM     Save 1 page (256 bytes, from 100H to 1ffH) on
Q	SP                    disk in case there is need to reload later
Q	SPA>WDDT SORT.COM      &Restart DDT with saved memory image

Q	SP16K DDT VER 1.0
Q	SPNEXT PC
Q	SP0200 0100    COM file always starts with address 100H
Q	SP-G     Run the program from PC=100H

Q	SP*0118    Programmed stop (RST 7) encountered
Q	SP-D148

Q	SP                              Data properly sorted
Q	SP0148 05 00 07 00 14 00 1E 00........
Q	SP0150 32 00 64 00 64 00 2C 01 E8 03 01 80 00 00 00 00 2.D.D.........

Q	SP0160 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00................
Q	SP0170 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00................

Q	SP-G0   Return to CP/M

Q	SPA>WED SORT.ASM     &Make changes to original program

Q	SP*N,0^Z0TT     Find next ,0
Q	SP     MVI        M,0        ;I = 0

Q	SP*-   Up one line in text
Q	SP     LXI            H,I    ;ADDRESS INDEX




M                               3-27X

MCP/M Operating System Manual                3.7  A Sample Session


XQ	SP*-   Up another line
Q	SP     MVI            M,1    ;SET TO 1 FOR FIRST ITERATION

Q	SP*KT  Kill line and type next line
Q	SP     LXI            H,I    ;ADDRESS INDEX

Q	SP*I   Insert new line
Q	SP     MVI            M,0    ;ZERO SW

Q	SP*T
Q	SP     LXI            H,I    ;ADDRESS INDEX

Q	SP*NJNC^Z0T
Q	SP    JNC*T
Q	SP    CONT            ;CONTINUE IF I<=(N-2)

Q	SP*-2DIC^Z0LT
Q	SP    JC              CONT   ;CONTINUE IF I<=(N-2)

Q	SP*E                    Source from disk A
Q	SP                      HEX to disk A
Q	SPA>WASM SORT.AAZ        &Skip PRN file

Q	SPCP/M ASSEMBLER - VER 1.0

Q	SP015C    Next address to assemble
Q	SP003H USE FACTOR
Q	SPEND OF ASSEMBLY

Q	SPA>WDDT SORT.HEX        &Test program changes

Q	SP16K DDT VER 1.0
Q	SPNEXT PC
Q	SP015C 0000
Q	SP-G100

Q	SP*0118
Q	SP-D148
Q	SP                          Data sorted
Q	SP0148 05 00 07 00 14 00 1E 00........
Q	SP0150 32 00 64 00 64 00 2C 01 E8 03 01 80 00 00 00 00 2.D.D..........
Q	SP0160 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00................

Q	SP-Abort with rubout

Q	SP-G0    Return to CP/M--program checks OK.


=End of Section 3








M                               3-28X




XQ	SPW                            Section 4

Q	SPW                   CP/M Dynamic Debugging Tool



Q	SP&W4.1  Introduction

Q	SPMThe DDT program allows dynamic interactive testing and
XQ	SPMdebugging of programs generated in the CP/M environment.  Invoke the
XQ	SPdebugger with a command of one of the following forms:

Q	SPDDT
Q	SPDDT filename.HEX
Q	SPDDT filename.COM

Q	SPMwhere filename is the name of the program to be loaded and tested.
XQ	SPMIn both cases, the DDT program is brought into main memory in place
XQ	SPMof the Console Command Processor (CCP) and resides directly below
XQ	SPMthe Basic Disk Operating System (BDOS) portion of CP/M.  Refer to
XQ	SPMSection 5 for standard memory organization.  The BDOS starting
XQ	SPMaddress, located in the address field of the JMP instruction at
XQ	SPMlocation 5H, is altered to reflect the reduced Transient Program
XQ	SPArea (TPA) size.

Q	SPMThe second and third forms of the DDT command perform the same
XQ	SPMactions as the first, except there is a subsequent automatic load of
XQ	SPMthe specified HEX or COM file.  The action is identical to the
XQ	SPfollowing sequence of commands:

Q	SPDDT
Q	SPIfilename.HEX or Ifilename.COM
Q	SPR

Q	SPMwhere the I and R commands set up and read the specified program to
XQ	SPMtest.  See the explanation of the I and R commands below for exact
XQ	SPdetails.

Q	SPUpon initiation, DDT prints a sign-on message in the form:

Q	SPDDT VER m.m

Q	SPwhere m.m is the revision number.

Q	SPMFollowing the sign-on message, DDT prompts you with the hyphen
XQ	SPMcharacter, -, and waits for input commands from the console.  You
XQ	SPMcan type any of several single-character commands, followed by a
XQ	SPMcarriage return to execute the command.  Each line of input can be
XQ	SPline-edited using the following standard CP/M controls:








M                               4-1X

MCP/M Operating System Manual                    4.1  Introduction


X=WTable 4-1.  Line-editing Controls
Q	SP9Q	GSP0
Q	SPControl                       Result

Q	SPrubout      removes the last character typed

Q	SPCTRL-U      removes the entire line, ready for retyping

Q	SPCTRL-C      reboots system
Q	SP9Q	LSP0

Q	SPMAny command can be up to 32 characters in length.  An automatic
XQ	SPMcarriage return is inserted as character 33, where the first
XQ	SPMcharacter determines the command type.  Table 4-2 describes DDT
XQ	SPcommands.


Q	SPW                    Table 4-2.  DDT Commands

Q	SP    Command                    Result
Q	SP   Character

Q	SP9Q	DSP0Q	SPA        Menters assembly-language mnemonics with
XQ	SPoperands.

Q	SPD        displays memory in hexadecimal and ASCII.

Q	SPF        fills memory with constant data.

Q	SPG        Mbegins execution with optional breakpoints.
X
Q	SPI        Msets up a standard input File Control
XQ	SPBlock.

Q	SPL        lists memory using assembler mnemonics.

Q	SPM        Mmoves a memory segment from source to
XQ	SPdestination.

Q	SPR        reads a program for subsequent testing.

Q	SPS        substitutes memory values.

Q	SPT        traces program execution.

Q	SPU        untraced program monitoring.

Q	SPX        Mexamines and optionally alters the CPU
XQ	SPstate.
Q	SP9Q	LSP0

Q	SPMThe command character, in some cases, is followed by zero, one, two,
XQ	SPMor three hexadecimal values, which are separated by commas or single
XQ	SPMblank characters.  All DDT numeric output is in hexadecimal form.
XQ	SPMThe commands are not execution until the carriage return is typed at
XQ	SPthe end of the command.


M                               4-2X

MCP/M Operating System Manual                    4.1  Introduction


XQ	SPMAt any point in the debug run, you can stop execution of DDT by
XQ	SPMusing either a CTRL-C or G0 (jump to location 0000H) and save the
XQ	SPcurrent memory image by using a SAVE command of the form:

Q	SPSAVE n filename. COM

Q	SPMwhere n is the number of pages (256 byte blocks) to be saved on
XQ	SPMdisk.  The number of blocks is determined by taking the high-order
XQ	SPMbyte of the address in the TPA and converting this number to
XQ	SPMdecimal.  For example, if the highest address in the TPA is 134H,
XQ	SPMthe number of pages is 12H or 18 in decimal.  You could type a CTRL-
XQ	SPC during the debug run, returning to the CCP level, followed by

Q	SPSAVE 18 X.COM

Q	SPMThe memory image is saved as X.COM on the disk and can be directly
XQ	SPMexecuted by typing the name X.  If further testing is required, the
XQ	SPmemory image can be recalled by typing

Q	SPDDT X.COM

Q	SPMwhich reloads the previously saved program from location 100H
XQ	SPMthrough page 18, 23FFH.  The CPU state is not a part of the COM
XQ	SPMfile; thus, the program must be restarted from the beginning to test
XQ	SPit properly.


Q	SPW4.2  DDT Commands

Q	SPMThe individual commands are detailed below.  In each case, the
XQ	SPMoperator must wait for the hyphen prompt character before entering
XQ	SPMthe command.  If control is passed to a program under test, and the
XQ	SPMprogram has not reached a breakpoint, control can be returned to DDT
XQ	SPMby executing a RST 7 from the front panel.  In the explanation of
XQ	SPMeach command, the command letter is shown in some cases with numbers
XQ	SPMseparated by commas, the the numbers are represented by lower-case
XQ	SPMletters.  These numbers are always assumed to be in a hexadecimal
XQ	SPMradix and from one to four digits in length.  Longer numbers are
XQ	SPautomatically truncated on the right.

Q	SPMMany of the commands operate upon a CPU state that corresponds
XQ	SPMto the program under test.  The CPU state holds the registers of the
XQ	SPMprogram being debugged and initially contains zeros for all
XQ	SPMregisters and flags except for the program counter, P, and stack
XQ	SPMpointer, S, which default to 100H.  The program counter is
XQ	SPMsubsequently set to the starting address given in the last record of
XQ	SPMa HEX file if a file of this form is loaded, see the I and R
XQ	SPcommands.


Q	SPW4.2.1  The A (Assembly) Command

Q	SPMDDT allows in-line assembly language to be inserted into the
XQ	SPcurrent memory image using the A command, which takes the form:



M                               4-3X

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPAs

Q	SPMwhere s is the hexadecimal starting address for the in-line
XQ	SPMassembly.  DDT prompts the console with the address of the next
XQ	SPMinstruction to fill and reads the console, looking for assembly-
XQ	SPMlanguage mnemonics followed by register references and operands in 
XQ	SPMabsolute hexadecimal form.  See the EIntel 8080 Assembly LanguageR 
XQ	SPMReference CardR for a list of mnemonics.  Each successive load
XQ	SPMaddress is printed before reading the console.  The A command
XQ	SPterminates when the first empty line is input from the console.

Q	SPMUpon completion of assembly language input, you can review the
XQ	SPmemory segment using the DDT disassembler (see the L command).

Q	SPMNote that the assembler/disassembler portion of DDT can be
XQ	SPMoverlaid by the transient program being tested, in which case the
XQ	SPMDDT program responds with an error condition when the A and L
XQ	SPcommands are used.


Q	SPW4.2.2  The D (Display) Command

Q	SPMThe D command allows you to view the contents of memory in
XQ	SPhexadecimal and ASCII formats.  The D command takes the forms:

Q	SPD
Q	SPDs
Q	SPDs,f

Q	SPMIn the first form, memory is displayed from the current display
XQ	SPMaddress, initially 100H, and continues for 16 display lines.  Each
XQ	SPdisplay line takes the followng form:

Q	SPaaaa bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb cccccccccccccccc

Q	SPMwhere aaaa is the display address in hexadecimal and bb represents
XQ	SPMdata present in memory starting at aaaa.  The ASCII characters
XQ	SPMstarting at aaaa are to the right (represented by the sequence of
XQ	SPMcharacter c) where nongraphic characters are printed as a period.
XQ	SPMYou should note that both upper- and lower-case alphabetics are
XQ	SPMdisplayed, and will appear as upper-case symbols on a console device
XQ	SPMthat supports only upper-case.  Each display line gives the values
XQ	SPMof 16 bytes of data, with the first line truncated so that the next
XQ	SPline begins at an address that is a multiple of 16.

Q	SPMThe second form of the D command is similar to the first,
XQ	SPexcept that the display address is first set to address s.

Q	SPMThe third form causes the display to continue from address s
XQ	SPMthrough address f.  In all cases, the display address is set to the
XQ	SPMfirst address not displayed in this command, so that a continuing
XQ	SPMdisplay can be accomplished by issuing successive D commands with no
XQ	SPexplicit addresses.




M                               4-4X

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPMExcessively long displays can be aborted by pressing the return
XQ	SPkey.


Q	SPW4.2.3  The F (Fill) Command

Q	SPThe F command takes the form:

Q	SPFs,f,c,

Q	SPMwhere s is the starting address, f is the final address, and c is a
XQ	SPMhexadecimal byte constant.  DDT stores the constant c at address s,
XQ	SPMincrements the value of s and test against f.  If s exceeds f, the
XQ	SPMoperation terminates, otherwise the operation is repeated.  Thus,
XQ	SPMthe fill command can be used to set a memory block to a specific
XQ	SPconstant value.


Q	SPW4.2.4  The G (Go) Command

Q	SPMA program is executed using the G command, with up to two
XQ	SPoptional breakpoint addresses.  The G command takes the forms:


Q	SPG
Q	SPGs
Q	SPGs,b
Q	SPGs,b,c
Q	SPG,b
Q	SPG,b,c


Q	SPMThe first form executes the program at the current value of the
XQ	SPMprogram counter in the current machine state, with no breakpoints
XQ	SPMset.  The only way to regain control in DDT is through a RST 7
XQ	SPMexecution.  The current program counter can be viewed by typing an X
XQ	SPor XP command.

Q	SPMThe second form is similar to the first, except that the
XQ	SPMprogram counter in the current machine state is set to address s
XQ	SPbefore execution begins.

Q	SPMThe third form is the same as the second, except that program
XQ	SPMexecution stops when address b is encountered (b must be in the area
XQ	SPMof the program under test).  The instruction at location b is not
XQ	SPexecuted when the breakpoint is encountered.

Q	SPMThe fourth form is identical to the third, except that two
XQ	SPMbreakpoints are specified, one at b and the other at c.
XQ	SPMEncountering either breakpoint causes execution to stop, and both
XQ	SPMbreakpoints are cleared.  The last two forms take the program
XQ	SPMcounter from the current machine state and set one and two
XQ	SPbreakpoints, respectively.




M                               4-5X

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPMExecution continues from the starting address in real-time to
XQ	SPMthe next breakpoint.  There is no intervention between the starting
XQ	SPMaddress and the break address by DDT.  If the program under test
XQ	SPMdoes not reach a breakpoint, control cannot return to DDT without
XQ	SPMexecuting a RST 7 instruction.  Upon encountering a breakpoint, DDT
XQ	SPstops execution and types

Q	SP*d

Q	SPMwhere d is the stop address.  The machine state can be examined at
XQ	SPMthis point using the X (Examine) command.  You must specify
XQ	SPMbreakpoints that differ from the program counter address at the
XQ	SPMbeginning of the G command.  Thus, if the current program counter is
XQ	SP1234H, then the following commands:

Q	SPG,1234
Q	SPG400,400

Q	SPMboth produce an immediate breakpoint without executing any
XQ	SPinstructions.


Q	SPW4.2.5  The I (Input) Command

Q	SPMThe I command allows you to insert a filename into the default
XQ	SPMFile Control Block (FCB) at 5CH.  The FCB created by CP/M for
XQ	SPMtransient programs is placed at this location (see Section 5).  The
XQ	SPMdefault FCB can be used by the program under test as if it had been
XQ	SPMpassed by the CP/M Console Processor.  Note that this filename is
XQ	SPMalso used by DDT for reading additional HEX and COM files.  The I
XQ	SPcommand takes the forms:

Q	SPIfilename
Q	SPIfilename.typ

Q	SPMIf the second form is used and the filetype is either HEX or
XQ	SPMCOM, subsequent R commands can be used to read the pure binary or
XQ	SPhex format machine code.  Section 4.2.8 gives further details.


Q	SPW4.2.6  The L (List) Command

Q	SPMThe L command is used to list assembly-language mnemonics in a
XQ	SPparticular program region.  The L command takes the forms:

Q	SPL
Q	SPLs
Q	SPLs,f

Q	SPMThe first form lists twelve lines of disassembled machine code
XQ	SPMfrom the current list address.  The second form sets the list
XQ	SPMaddress to s and then lists twelve lines of code.  The last form
XQ	SPMlists disassembled code from s through address f.  In all three
XQ	SPMcases, the list address is set to the next unlisted location in
XQ	SPMpreparation for a subsequent L command.  Upon encountering an


M                               4-M6XX

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPMexecution breakpoint, the list address is set to the current value
XQ	SPMof the program counter (G and T commands).  Again, long typeouts can
XQ	SPbe aborted by pressing RETURN during the list process.


Q	SPW4.2.7  The M (Move) Command

Q	SPMThe M command allows block movement of program or data areas
XQ	SPMfrom one location to another in memory.  The M command takes the
XQ	SPform:

Q	SPMs,f,d

Q	SPMwhere s is the start address of the move, f is the final address,
XQ	SPMand d is the destination address.  Data is first removed from s to
XQ	SPMd, and both addresses are incremented.  If s exceeds f, the move
XQ	SPoperation stops; otherwise, the move operation is repeated.


Q	SPW4.2.8  The R (Read) Command

Q	SPMThe R command is used in conjunction with the I command to read
XQ	SPMCOM and HEX files from the disk into the transient program area in
XQ	SPpreparation for the debug run.  The R command takes the forms:

Q	SPR
Q	SPRB

Q	SPMwhere b is an optional bias address that is added to each program or
XQ	SPMdata address as it is loaded.  The load operation must not overwrite
XQ	SPMany of the system parameters from 000H through 0FFH (that is, the
XQ	SPMfirst page of memory).  If b is omitted, then b=0000 is assumed.
XQ	SPMThe R command requires a previous I command, specifying the name of
XQ	SPMa HEX or COM file.  The load address for each record is obtained
XQ	SPMfrom each individual HEX record, while an assumed load address of
XQ	SPM100H is used for COM files.  Note that any number of R commands can
XQ	SPMbe issued following the I command to reread the program under test,
XQ	SPMassuming the tested program does not destroy the default area at
XQ	SPM5CH.  Any file specified with the filetype COM is assumed to contain
XQ	SPMmachine code in pure binary form (created with the LOAD or SAVE
XQ	SPMcommand), and all others are assumed to contain machine code in
XQ	SPIntel hex format (produced, for example, with the ASM command).

Q	SPRecall that the command,

Q	SPDDT filename.filetype

Q	SPwhich initiates the DDT program, equals to the following commands:

Q	SPDDT
Q	SP-Ifilename.filetype
Q	SP-R





M                               4-7X

MCP/M Operating System Manual                    4.2  DDT Commands


X
Q	SPMWhenever the R command is issued, DDT responds with either the
XQ	SPMerror indicator ? (file cannot be opened, or a checksum error
XQ	SPMoccurred in a HEX file) or with a load message.  The load message
XQ	SPtakes the form:

Q	SPNEXT PC
Q	SPnnnn pppp

Q	SPMwhere nnnn is the next address following the loaded program and pppp
XQ	SPMis the assumed program counter (100H for COM files, or taken from
XQ	SPthe last record if a HEX file is specified).


Q	SPW4.2.9  The S (Set) Command

Q	SPMThe S command allows memory locations to be examined and
XQ	SPoptionally altered.  The S command takes the form:

Q	SPSs

Q	SPMwhere s is the hexadecimal starting address for examination and
XQ	SPMalteration of memory.  DDT responds with a numeric prompt, giving
XQ	SPMthe memory location, along with the data currently held in memory.
XQ	SPMIf you type a carriage return, the data is not altered.  If a byte
XQ	SPMvalue is typed, the value is stored at the prompted address.  In
XQ	SPMeither case, DDT continues to prompt with successive addresses and
XQ	SPMvalues until you type either a period or an invalid input value is
XQ	SPdetected.


Q	SPW4.2.10  The T (Trace) Command

Q	SPMThe T command allows selective tracing of program execution for
XQ	SP1 to 65535 program steps.  The T command takes the forms:

Q	SPT
Q	SPTn

Q	SPMIn the first form, the CPU state is displayed and the next
XQ	SPMprogram step is executed.  The program terminates immediately, with
XQ	SPthe termination address displayed as

Q	SP*hhhh

Q	SPMwhere hhhh is the next address to execute.  The display address
XQ	SPM(used in the D command) is set to the value of H and L, and the list
XQ	SPMaddress (used in the L command) is set to hhhh.  The CPU state at
XQ	SPprogram termination can then be examined using the X command.

Q	SPMThe second form of the T command is similar to the first,
XQ	SPMexcept that execution is traced for n steps (n is a hexadecimal
XQ	SPMvalue) before a program breakpoint occurs.  A breakpoint can be
XQ	SPMforced in the trace mode by typing a rubout character.  The CPU
XQ	SPMstate is displayed before each program step is taken in trace mode.
XQ	SPMThe format of the display is the same as described in the X command.
X

M                               4-8X

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPMYou should note that program tracing is discontinued at the
XQ	SPMCP/M interface and resumes after return from CP/M to the program
XQ	SPMunder test.  Thus, CP/M functions that access I/O devices, such as
XQ	SPMthe disk drive, run in real-time, avoiding I/O timing problems.
XQ	SPMPrograms running in trace mode execute approximately 500 times
XQ	SPMslower than real-time because DDT gets control after each user
XQ	SPMinstruction is executed.  Interrupt processing routines can be
XQ	SPMtraced, but commands that use the breakpoint facility (G, T, and U)
XQ	SPMaccomplish the break using an RST 7 instruction, which means that
XQ	SPMthe tested program cannot use this interrupt location.  Further, the
XQ	SPMtrace mode always runs the tested program with interrupts enabled,
XQ	SPMwhich may cause problems if asynchronous interrupts are received
XQ	SPduring tracing.

Q	SPMTo get control back to DDT during trace, press RETURN rather
XQ	SPMthan executing an RST 7.  This ensures that the trace for current
XQ	SPinstruction is completed before interruption.


Q	SPW4.2.11  The U (Untrace) Command

Q	SPMThe U command is identical to the T command, except that
XQ	SPMintermediate program steps are not displayed.  The untrace mode
XQ	SPMallows from 1 to 65535, (0FFFFH) steps to be executed in monitored
XQ	SPMmode and is used principally to retain control of an executing
XQ	SPMprogram while it reaches steady state conditions.  All conditions of
XQ	SPthe T command apply to the U command.


Q	SPW4.2.12  The X (Examine) Command

Q	SPMThe X command allows selective display and alteration of the
XQ	SPMcurrent CPU state for the program under test.  The X command takes
XQ	SPthe forms:

Q	SPX
Q	SPXr

Q	SPMwhere r is one of the 8080 CPU registers listed in the following
XQ	SPtable.


Q	SPW                    Table 4-3.  CPU Registers

Q	SP            Register        Meaning           Value

Q	SP               C        Carry flag            (0/1)
Q	SP               Z        Zero flag             (0/1)
Q	SP               M        Minus flag            (0/1)
Q	SP               E        Even parity flag      (0/1)
Q	SP               I        Interdigit carry      (0/1)
Q	SP               A        Accumulator           (0-FF)
Q	SP               B        BC register pair      (0-FFFF)
Q	SP               D        DE register pair      (0-FFFF)



M                               4-9X

MCP/M Operating System Manual                    4.2  DDT Commands


XQ	SPW                     Table 4-3.  (continued)

Q	SP            Register        Meaning           Value

Q	SP               H        HL register pair      (0-FFFF)
Q	SP               S        Stack pointer         (0-FFFF)
Q	SP               P        Program counter       (0-FFFF)


Q	SPMIn the first case, the CPU register state is displayed in the
XQ	SPformat:

Q	SPCfZfMfEflf A=bb B=dddd D=dddd H=dddd S=dddd P=dddd inst

Q	SPMwhere f is a 0 or 1 flag value, bb is a byte value, and dddd is a
XQ	SPMdouble-byte quantity corresponding to the register pair.  The inst
XQ	SPMfield contains the disassembled instruction, that occurs at the
XQ	SPlocation addressed by the CPU state's program counter.

Q	SPMThe second form allows display and optional alteration of
XQ	SPMregister values, where r is one of the registers given above (C, Z,
XQ	SPMM, E, I, A, B, D, H, S, or P).  In each case, the flag or register
XQ	SPMvalue is first displayed at the console.  The DDT program then
XQ	SPMaccepts input from the console.  If a carriage return is typed, the
XQ	SPMflag or register value is not altered.  If a value in the proper
XQ	SPMrange is typed, the flag or register value is altered.  You should
XQ	SPMnote that BC, DE, and HL are displayed as register pairs.  Thus, you
XQ	SPMmust type the entire register pair when B, C, or the BC pair is
XQ	SPaltered.


Q	SPW4.3  Implementation Notes

Q	SPMThe organization of DDT allows certain nonessential portions to
XQ	SPMbe overlaid to gain a larger transient program area for debugging
XQ	SPMlarge programs.  The DDT program consists of two parts:  the DDT
XQ	SPMnucleus and the assembler/disassembler module.  The DDT nucleus is
XQ	SPMloaded over the CCP and, although loaded with the DDT nucleus, the
XQ	SPMassembler/disassembler is overlayable unless used to assemble or
XQ	SPdisassemble.

Q	SPMIn particular, the BDOS address at location 6H (address field
XQ	SPMof the JMP instruction at location 5H) is modified by DDT to address
XQ	SPMthe base location of the DDT nucleus, which, in turn, contains a JMP
XQ	SPMinstruction to the BDOS.  Thus, programs that use this address field
XQ	SPMto size memory see the logical end of memory at the base of the DDT
XQ	SPnucleus rather than the base of the BDOS.

Q	SPMThe assembler/disassembler module resides directly below the
XQ	SPMDDT nucleus in the transient program area.  If the A, L, T, or X
XQ	SPMcommands are used during the debugging process, the DDT program
XQ	SPMagain alters the address field at 6H to include this module, further
XQ	SPMreducing the logical end of memory.  If a program loads beyond the
XQ	SPMbeginning of the assembler/disassembler module, the A and L commands
XQ	SPMare lost (their use produces a ? in response) and the trace and


M                               4-M10XX

MCP/M Operating System Manual            4.3  Implementation Notes


XQ	SPMdisplay (T and X) commands list the inst field of the display in
XQ	SPhexadecimal, rather than as a decoded instruction.


Q	SPW4.4  A Sample Program

Q	SPMThe following example shows an edit, assemble, and debug for a
XQ	SPMsimple program that reads a set of data values and determines the
XQ	SPMlargest value in the set.  The largest value is taken from the
XQ	SPvector and stored into LARGE at the termination of the program.


Q	SPA>WED SCAN.ASM                &Create source program;
Q	SP                             " " represents carriage return.
Q	SP*I
Q	SP                ORG          1-00H          ;START OF TRANSIENT
Q	SP                                            ;AREA
Q	SP                MVI          B, LEN         ;LENGTH OF VECTOR TO SCAN
Q	SP                MVI          C, 0           ;LARGER_RST VALUE SO FAR
Q	SPLOOP            LXI          H, VECT        ;BASE OF VECTOR
Q	SPLOOP:           MOV          A, M           ;GET VALUE
Q	SP                SUB          C              ;LARGER VALUE IN C?
Q	SP                JNC          NFOUND         ;JUMP IF LARGER VALUE NOT
Q	SP                                            ;FOUND
Q	SP;               NEW LARGEST VALUE, STORE IT TO C
Q	SP                MOV          C, A
Q	SPNFOUND          INX          H              ;TO NEXT ELEMENT
Q	SP                DCR          B              ;MORE TO SCAN?
Q	SP                JNZ          LOOP           ;FOR ANOTHER
Q	SP;
Q	SP;               END OF SCAN, STORE C
Q	SP                MOV          A, C           ;GET LARGEST VALUE
Q	SP                STA          LARGE
Q	SP                JMP          0              ;REBOOT
Q	SP;
Q	SP;               TEST DATA
Q	SPVECT:           DB           2,0,4,3,5,6,1,5
Q	SPLEN             EQU          $-VECT         ;LENGTH
Q	SPLARGE:          DS           1              ;LARGEST VALUE ON EXIT
Q	SP                END

















M                               4-11X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP^-Z
Q	SP*B0P
Q	SP                ORG          100H           ;START OF TRANSIENT AREA
Q	SP                MVI          B,LEN          ;LENGTH OF VECTOR TO SCAN
Q	SP                MVI          C,0            ;LARGEST VALUE SO FAR
Q	SP                LXI          H,VECT         ;BASE OF VECTOR
Q	SPLOOP:           MOV          A,M            ;GET VALUE
Q	SP                SUB          C              ;LARGER VALUE IN C?
Q	SP                JNC          NFOUND         ;JUMP IF LARGER VALUE NOT
Q	SP                                            ;FOUND
Q	SP;               NEW LARGEST VALUE, STORE IT TO C
Q	SP                MOV          C,A
Q	SPNFOUND:         INX          H              ;TO NEXT ELEMENT
Q	SP                DCR          B              ;MORE TO SCAN?
Q	SP                JNZ          LOOP           ;FOR ANOTHER
Q	SP;               END OF SCAN, STORE C
Q	SP                MOV          A,C            ;GET LARGEST VALUE
Q	SP                STA          LARGE
Q	SP                JMP          0              ;REBOOT
Q	SP;
Q	SP;               TEST DATA

Q	SPVECT:           DB           2,0,4,3,5,6,1,5
Q	SPLEN             EQU          $-VECT         ;LENGTH
Q	SPLARGE:          DS           1              ;LARGEST VALUE ON EXIT
Q	SP                END
Q	SP*E <--End of edit

Q	SPA>WASM SCAN     &Start Assembler

Q	SPCP/M ASSEMBLER - VER 1.0

Q	SP0122
Q	SP002H USE FACTOR
Q	SPEND OF ASSEMBLY     Assembly complete; lock at program listing

Q	SPA>WTYPE SCAN.PRN
Q	SP& Code address   Source program
Q	SP 0100                        ORG 100H       ;START OF TRANSIENT AREA
Q	SP 0100    0608                MVI B,LEN      ;LENGTH OF VECTOR TO SCAN
Q	SP 0102    0E00 Machine code   MVI C,0        ;LARGEST VALUE SO FAR
Q	SP 0104    211901              LXI H,VECT.    ;BASE OF VECTOR
Q	SP 0107    7E          LOOP:   MOV A,M        ;GET VALUE
Q	SP 0108    91                  SUB C          ;LARGER VALUE IN C?
Q	SP 0109    D20D01              JNC NFOUND     ;JUMP IF LARGER VALUE NOT
Q	SP                                            ;FOUND
Q	SP                     ;       NEW LARGEST VALUE, STORE IT TO C
Q	SP 010C    4F                  MOV C,A









M                               4-12X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP 010D    23          NFOUND: INX H          ;TO NEXT ELEMENT
Q	SP 010E    05                  DCR  B         ;MORE TO SCAN?
Q	SP 010F    C20701              JNZ LOOP       ;FOR ANOTHER
Q	SP                     ;
Q	SP                     ;       END OF SCAN, STORE C
Q	SP 0112    79                  MOV A,C        ;GET LARGEST VALUE
Q	SP 0113    322101              STA LARGE

Q	SP 0116    C30000              JMP 0          ;REBOOT
Q	SP   Code--data listing;
Q	SP   truncated         ;       TEST DATA
Q	SP 0119    0200040305  VECT:   DB 2,0,4,3,5,6,1,5
Q	SP 0008    = Value of  LEN     EQU $-VECT     ;LENGTH
Q	SP 0121      equate    LARGE:  DS 1           ;LARGEST VALUE ON EXIT
Q	SP 0122                        END


Q	SPA>WDDT SCAN.HEX      &Start debugger using hex format machine code

Q	SPDDT VER 1.0
Q	SPNEXT PC                                              Next instruction
Q	SP0121 0000                                            to execute at
Q	SP-X     Last load address + 1                         PC=0

Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0000 OUT 7F
Q	SP-XP                 Examine registers before debug run

Q	SPP=0000 100    Change PC to 100

Q	SP-X    Look at registers again

Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0100 MVI B,08
Q	SP-L100
Q	SP                              PC changed      Next instruction
Q	SP                                              to execute at PC=100
Q	SP 0100   MVI        B,08
Q	SP 0102   MVI        C,00
Q	SP 0104   LXI        H,0119
Q	SP 0107   MOV        A,M
Q	SP 0108   SUB        C          Disassembled machine
Q	SP 0109   JNC        010D       code at 100H
Q	SP 010C   MOV        C,A        (see source listing
Q	SP 010D   INX        H          for comparison)
Q	SP 010E   DCR        B
Q	SP 010F   JNZ        0107
Q	SP 0112   MOV        A,C
Q	SP-L










M                               4-13X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP 0113   STA        0121
Q	SP 0116   JMP        0000
Q	SP 0119   STAX       B
Q	SP 011A   NOP                   A little more machine
Q	SP 011B   INR        B          code.  Note that pro-
Q	SP 011C   INX        B          gram ends at location
Q	SP 011D   DCR        B          116 with a JMP to
Q	SP 011E   MVI        B,01       0000.  Remainder of
Q	SP 0120   DCR        B          listing is assembly of
Q	SP 0121   LXI        D,2200     data.
Q	SP 0124   LXI        H,0200
Q	SP-A116  Enter in-line assembly mode to change the JMP to 0000 into a RST 7,
Q	SP       which will cause the program under test to return to DDT if 116H is
Q	SP       ever executed.
Q	SP0116 RST 7

Q	SP0117   (Single carriage return stops assemble mode)

Q	SP-L113   List code at 113H to check that RST 7 was properly inserted

Q	SP 0113   STA        0121
Q	SP 0116   RST        07    in place of JMP
Q	SP 0117   NOP
Q	SP 0118   NOP
Q	SP 0119   STAX       B
Q	SP 011A   NOP
Q	SP 011B   INR        B
Q	SP 011C   INX        B
Q	SP-

Q	SP-X    Look at registers

Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0100 MVI B,08
Q	SP-T
Q	SP   Execute Program for one stop. Initial CPU state, before   is executed

Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0100 MVI B,08*0102
Q	SP                                       Automatic breakpoint

Q	SP     Trace one step again (note O8H in B)
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0000 S=0100 P=0102 MVI C,00*0104
Q	SP-T
Q	SP     Trace again (Register C is cleared)
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0000 S=0100 P=0104 LXI H,0119*0107
Q	SP-T3  Trace three steps
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0119 S=0100 P=0107 MOV A,M
Q	SPC0Z0M0E0I0 A=02 B=0800 D=0000 H=0119 S=0100 P=0108 SUB C
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0109 JNC 010D*010D
Q	SP-D119
Q	SP       Display memory starting at 119H. Automatic breakpoint at 10DH

Q	SP0119 02 00 04 03 05 06 01.Program data         Lower-case x
Q	SP0120 05 11 00 22 21 00 02 7E EB 77 13 23 EB 0B 78 B1 ..."!.. . W .#..X.
Q	SP0130 C2 27 01 C3 03 29 00 00 00 00 00 00 00 00 00 00 ...' ...).........
Q	SP0140 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..................


M                               4-14X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP0150 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..................
Q	SP0160 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Data are displayed
Q	SP0170 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 in ASCI with a "."
Q	SP0180 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 in the position of
Q	SP0190 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 nongraphic........
Q	SP01A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 characters........
Q	SP01B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..................
Q	SP01C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..................
Q	SP-X
Q	SP           Current CPU state
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=010D INX H
Q	SP-T5
Q	SP     Trace 5 steps from current CPU state
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=010D INX H
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=011A S=0100 P=010E DCR B
Q	SPC0Z0M0E0I1 A=02 B=0700 D=0000 H=011A S=0100 P=010F JNZ 0107
Q	SPC0Z0M0E0I1 A=02 B=0700 D=0000 H=011A S=0100 P=0107 MOV A,M
Q	SPC0Z0M0E0I1 A=00 B=0700 D=0000 H=011A S=0100 P=0108 SUB C*0109

Q	SPU5
Q	SP                                   Automatic breakpoint
Q	SP     Trace without listing intermediate states
Q	SPC0Z1M0E1I1 A=00 B=0700 D=0000 H=011A S=0100 P=0109 JNC 010D*0108
Q	SP-X
Q	SP                       CPU state at end of U5
Q	SPC0Z0M0E1I1 A=04 B=0600 D=0000 H=011B S=0100 P=0108 SUB C
Q	SP-G   Run program from current PC until completion (in real-time)

Q	SP*0116   breakpoint at 116H, caused by executing RST 7 in machine code.

Q	SP-X
Q	SP     CPU state at end of program
Q	SPC0Z1M0E1I1 A=00 B=0000 D=0000 H=0121 S=0100 P=0116 RST 07
Q	SP-XP
Q	SP     Examine and change program counter

Q	SPP=0116 100

Q	SP-X

Q	SPC0Z1M0E1I1 A=00 B=0000 D=0000 H=0121 S=0100 P=0100 MVI B,08
Q	SP-T10

Q	SP                            First data element
Q	SP                                   Current largest value
Q	SP                                          Subtract for comparison C
Q	SP    Trace 10 (hexadecimal) steps
Q	SPC0Z1M0E1I1 A=00 B=0800 D=0000 H=0121 S=0100 P=0100 MVI B,08
Q	SPC0Z1M0E1I1 A=00 B=0000 D=0000 H=0121 S=0100 P=0102 MVI C,00
Q	SPC0Z1M0E1I1 A=00 B=0800 D=0000 H=0121 S=0100 P=0104 LXI H,0119
Q	SPC0Z1M0E1I1 A=00 B=0800 D=0000 H=0119 S=0100 P=0107 MOV A,M
Q	SPC0Z1M0E1I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0108 SUB C
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0109 JNC 010D
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=010D INX H
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=011A S=0100 P=010E DCR B


M                               4-15X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SPC0Z0M0E0I1 A=02 B=0700 D=0000 H=011A S=0100 P=010F JNZ 0107
Q	SPC0Z0M0E0I1 A=02 B=0700 D=0000 H=011A S=0100 P=0107 MOV A,M
Q	SPC0Z0M0E0I1 A=00 B=0700 D=0000 H=011A S=0100 P=0108 SUB C
Q	SPC0Z1M0E1I1 A=00 B=0700 D=0000 H=011A S=0100 P=0109 JNC 010D
Q	SPC0Z1M0E1I1 A=00 B=0700 D=0000 H=011A S=0100 P=010D INX H
Q	SPC0Z1M0E1I1 A=00 B=0700 D=0000 H=011B S=0100 P=010E DCR B
Q	SPC0Z0M0E1I1 A=00 B=0600 D=0000 H=011B S=0100 P=010F JNZ 0107
Q	SPC0Z0M0E1I1 A=00 B=0600 D=0000 H=011B S=0100 P=0107 MOV A,M*0108
Q	SP-A109
Q	SP             Insert a "hot patch" into    Program should have moved the
Q	SP             the machine code             value from A into C since A>C.
Q	SP0109 JC 10D  to change the                Since this code was not executed,
Q	SP             JNC to JC                    it appears that the JNC should
Q	SP010C                                      have been a JC instruction

Q	SP       Stop DDT so that a version of
Q	SP-G0    the patched program can be saved

Q	SPA>WSAVE 1 SCAN.COM  &Program resides on first
Q	SP                   page, so save 1 page.
Q	SPA>WDDT SCAN.COM
Q	SP&                   Restart DDT with the save memory
Q	SPDDT VER 1.0        image to continue testing
Q	SPNEXT PC
Q	SP0200 0100

Q	SP-L100    List some code

Q	SP 0100    MVI B,08
Q	SP 0102    MVI C,00
Q	SP 0104    LXI H,0119
Q	SP 0107    MOV A,M
Q	SP 0108    SUB C
Q	SP 0109    JC  010D    Previous patch is present in X.COM
Q	SP 010C    MOV C,A
Q	SP 010D    INX H
Q	SP 010E    DCR B
Q	SP 010F    JNZ 0107
Q	SP 0112    MOV A,C
Q	SP -XP

Q	SPP=0100

Q	SP-T10
Q	SP     Trace to see how patched version operates    Data is moved from A to C
Q	SPC0Z0M0E0I0 A=00 B=0000 D=0000 H=0000 S=0100 P=0100 MVI B,08
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0000 S=0100 P=0102 MVI C,00
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0000 S=0100 P=0104 LXI H,0119
Q	SPC0Z0M0E0I0 A=00 B=0800 D=0000 H=0119 S=0100 P=0107 MOV A,M
Q	SPC0Z0M0E0I0 A=02 B=0800 D=0000 H=0119 S=0100 P=0108 SUB C
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0109 JC  010D
Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=010C MOV C,A
Q	SPC0Z0M0E0I1 A=02 B=0802 D=0000 H=0119 S=0100 P=010D INX H
Q	SPC0Z0M0E0I1 A=02 B=0802 D=0000 H=011A S=0100 P=010E DCR B
Q	SPC0Z0M0E0I1 A=02 B=0702 D=0000 H=011A S=0100 P=010F JNZ 0107


M                               4-16X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SPC0Z0M0E0I1 A=02 B=0702 D=0000 H=011A S=0100 P=0107 MOV A,M
Q	SPC0Z0M0E0I1 A=00 B=0702 D=0000 H=011A S=0100 P=0108 SUB C
Q	SPC1Z0M1E0I0 A=FE B=0702 D=0000 H=011A S=0100 P=0109 JC  010D
Q	SPC1Z0M1E0I0 A=FE B=0702 D=0000 H=011A S=0100 P=010D INX H
Q	SPC1Z0M1E0I0 A=FE B=0702 D=0000 H=011B S=0100 P=010E DCR B
Q	SPC1Z0M0E1I1 A=FE B=0602 D=0000 H=011B S=0100 P=010F JNZ 0107*0107
Q	SP-X                                  Breakpoint after 16 steps

Q	SPC1Z0M0E1I1 A=FE B=0602 D=0000 H=011B S=0100 P=0107 MOV A,M
Q	SP-G,108   Run from current PC and breakpoint at 108H

Q	SP*0108
Q	SP-X
Q	SP                Next data item
Q	SPC1Z0M0E1I1 A=04 B=0602 D=0000 H=011B S=0100 P=0108 SUB C
Q	SP-T
Q	SP    Single step for a few cycles
Q	SPC1Z0M0E1I1 A=04 B=0602 D=0000 H=011B S=0100 P=0108 SUB C*0109
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0602 D=0000 H=011B S=0100 P=0109 JC 010D*010C
Q	SP-X

Q	SPC0Z0M0E0I1 A=02 B=0602 D=0000 H=011B S=0100 P=010C MOV C,A
Q	SP-G   Run to completion

Q	SP*0116
Q	SP-X

Q	SPC0Z1M0E1I1 A=03 B=0003 D=0000 H=0121 S=0100 P=0116 RST 07
Q	SP-S121   Look at the value of "LARGE"

Q	SP 0121   03   Wrong value!

Q	SP 0122   00

Q	SP 0123   22

Q	SP 0124   21

Q	SP 0125   00

Q	SP 0126   02

Q	SP 0127   7E  _.    End of the S command

Q	SP-L100

Q	SP 0100   MVI        B,08
Q	SP 0102   MVI        C,00
Q	SP 0104   LXI        H,0119
Q	SP 0107   MOV        A,M
Q	SP 0108   SUB        C
Q	SP 0109   JC         010D
Q	SP 010C   MOV        C,A


M                               4-17X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP 010D   INX        H
Q	SP 010E   DCR        B
Q	SP 010F   JNZ        0107
Q	SP 0112   MOV        A,C
Q	SP-L                            Review the code

Q	SP 0113   STA        0121
Q	SP 0116   RST        07
Q	SP 0117   NOP
Q	SP 0118   NOP
Q	SP 0119   STAX       B
Q	SP 011A   NOP
Q	SP 011B   INR        B
Q	SP 011C   INX        B
Q	SP 011D   DCR        B
Q	SP 011E   MVI        B,01
Q	SP 0120   DCR        B
Q	SP-XP

Q	SPP=0116 100   Reset the PC

Q	SP-T
Q	SP    Single step, and watch data values
Q	SPC0Z1M0E1I1 A=03 B=0003 D=0000 H=0121 S=0100 P=0100 MVI B,08*0102
Q	SP-T

Q	SPC0Z1M0E1I1 A=03 B=0803 D=0000 H=0121 S=0100 P=0102 MVI C,00*0104
Q	SP-T
Q	SP         Count set     Largest set
Q	SPC0Z1M0E1I1 A=03 B=0800 D=0000 H=0121 S=0100 P=0104 LXI H,0119*0107
Q	SP-T
Q	SP                                    Base address of data set
Q	SPC0Z1M0E1I1 A=03 B=0800 D=0000 H=0119 S=0100 P=0107 MOV A,M*0108
Q	SP-T
Q	SP                 First data item brought to A
Q	SPC0Z1M0E1I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0108 SUB C*0109
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=0109 JC 010D*010C
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0800 D=0000 H=0119 S=0100 P=010C MOV C,A*010D
Q	SP-T
Q	SP                       First data item moved to C correctly
Q	SPC0Z0M0E0I1 A=02 B=0802 D=0000 H=0119 S=0100 P=010D INX H*010E
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0802 D=0000 H=011A S=0100 P=010E DCR B*010F
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0702 D=0000 H=011A S=0100 P=010F JNZ 0107*0107
Q	SP-T

Q	SPC0Z0M0E0I1 A=02 B=0702 D=0000 H=011A S=0100 P=0107 MOV A,M*0108
Q	SP-T


M                               4-18X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP                 Second data item brought to A
Q	SPC0Z0M0E0I1 A=00 B=0702 D=0000 H=011A S=0100 P=0108 SUB C*0109
Q	SP-T
Q	SP                 Subtract destroys data value that was loaded!
Q	SPC1Z0M1E0I0 A=FE B=0702 D=0000 H=011A S=0100 P=0109 JC 010D*010D
Q	SP-T

Q	SPC1Z0M1E0I0 A=FE B=0702 D=0000 H=011A S=0100 P=010D INX H*010E
Q	SP-L100

Q	SP 0100   MVI        B,08
Q	SP 0102   MVI        C,00
Q	SP 0104   LXI        H,0119
Q	SP 0107   MOV        A,M
Q	SP 0108   SUB        C       This should have been a CMP so that register A
Q	SP 0109   JC         010D    would not be destroyed.
Q	SP 010C   MOV        C,A
Q	SP 010D   INX        H
Q	SP 010E   DCR        B
Q	SP 010F   JNZ        0107
Q	SP 0112   MOV        A,C
Q	SP -A108

Q	SP0108 CMP C    Hot patch at 108H changes SUB to CMP

Q	SP0109

Q	SP-G0   Stop DDT for SAVE

Q	SPA>WSAVE 1 SCAN.COM    &Save memory image

Q	SPA>WDDT SCAN.COM    &Restart DDT

Q	SPDDT VER 1.0
Q	SPNEXT PC
Q	SP0200 0100
Q	SP-XP

Q	SPP=0100

Q	SP-L116

Q	SP 0116   RST        07
Q	SP 0117   NOP
Q	SP 0118   NOP               Look at code to see if it was properly loaded
Q	SP 0119   STAX       B      (long typeout aborted with rubout)
Q	SP 011A   NOP
Q	SP -

Q	SP-G,116    Run from 100H to completion

Q	SP*0116
Q	SP-XC     Look at carry (accidental typo)
Q	SPC1
Q	SP-X   Look at CPU state


M                               4-19X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SPC1Z1M0E1I1 A=06 B=0006 D=0000 H=0121 S=0100 P=0116 RST 07
Q	SP-S121   Look at "large"--it appears to be correct.

Q	SP0121 06

Q	SP0122 00

Q	SP0123 22

Q	SP-G0    Stop DDT

Q	SPA>WED SCAN.ASM    &Re-edit the source program, and make both changes

Q	SP*NSUB
Q	SP*0LT
Q	SP     CTRL-Z        SUB     C           ;LARGER VALUE IN C?
Q	SP*SSUB^|ZCMP^|Z0LT
Q	SP                   CMP     D           ;LARGER VALUE IN C?
Q	SP*
Q	SP                   JNC     NFOUND      ;JUMP IF LARGER VALUE NOT FOUND
Q	SP*SNC^|ZC^|Z0LT
Q	SP                   JC      NFOUND      ;JUMP IF LARGER VALUE NOT FOUND
Q	SP*E
Q	SP                      Reassemble, selecting source from disk A
Q	SPA>WASM SCAN.AAZ   &<--- Hex to disk A
Q	SP                      Print to Z (selects no print file)
Q	SPCP/M ASSEMBLER    VER 1.0

Q	SP0122
Q	SP002H USE FACTOR
Q	SPEND OF ASSEMBLY

Q	SPA>WDDT SCAN.HEX    &Rerun debugger to check changes

Q	SPDDT VER 1.0
Q	SPNEXT PC
Q	SP0121 0000
Q	SP-L116

Q	SP 0116   JMP        0000     Check to ensure end is still at 116H

Q	SP 0119   STAX       B

Q	SP 011A   NOP
Q	SP 011B   INR        B

Q	SP -(rubout)

Q	SP-G100,116    Go from beginning with breakpoint at end

Q	SP*0116    Breakpoint reached
Q	SP-D121    Look at "LARGE"
Q	SP                      Correct value computed
Q	SP0121 06 00 22 21 00 02 7E EB 77 13 23 EB 0B 78 B1 .. '!... W .#..X.
Q	SP0130 C2 27 01 C3 03 29 00 00 00 00 00 00 00 00 00 00 .'...)........


M                               4-20X

MCP/M Operating System Manual                4.4  A Sample Program


XQ	SP0140 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..............

Q	SP-(rubout) Aborts long typeout

Q	SPG0    Stop DDT, debug session complete.


=End of Section 4

















































M                               4-21X




X=WSection 5

=&WCP/M 2 System Interface


Q	SP&5.1  Introduction

Q	SPMThis chapter describes CP/M (release 2) system organization
XQ	SPMincluding the structure of memory and system entry points.  This
XQ	SPMsection provides the information you need to write programs that
XQ	SPMoperate under CP/M and that use the peripheral and disk I/O
XQ	SPfacilities of the system.

Q	SPMCP/M is logically divided into four parts, called the Basic
XQ	SPMInput/Output System (BIOS), the Basic Disk Operating System (BDOS),
XQ	SPMthe Console Command Processor (CCP), and the Transient Program Area
XQ	SPM(TPA).  The BIOS is a hardware-dependent module that defines the
XQ	SPMexact low level interface with a particular computer system that is
XQ	SPMnecessary for peripheral device I/O.  Although a standard BIOS is
XQ	SPMsupplied by Digital Research, explicit instructions are provided for
XQ	SPMfield reconfiguration of the BIOS to match nearly any hardware
XQ	SPenvironment, see Section 6.

Q	SPMThe BIOS and BDOS are logically combined into a single module
XQ	SPMwith a common entry point and referred to as the FDOS.  The CCP is a
XQ	SPMdistinct program that uses the FDOS to provide a human-oriented
XQ	SPMinterface with the information that is cataloged on the back-up
XQ	SPMstorage device.  The TPA is an area of memory, not used by the FDOS
XQ	SPMand CCP, where various nonresident operating system commands and
XQ	SPMuser programs are executed.  The lower portion of memory is reserved
XQ	SPMfor system information and is detailed in later sections.  Memory
XQ	SPorganization of the CP/M system is shown in Figure 5-1.



Q	SP                  High
Q	SP                  Memory     FDOS (BDOS+BIOS)
Q	SP                  FBASE:

Q	SP                                   CCP
Q	SP                  CBASE:

Q	SP                                   TPA
Q	SP                  TBASE:

Q	SP                             System Parameters
Q	SP                  BOOT:


=WFigure 5-1.  CP/M Memory Organization







M                               5-1X

MCP/M Operating System Manual                    5.1  Introduction


XQ	SPM&The exact memory addresses corresponding to BOOT, TBASE, CBASE,
XQ	SPMand FBASE vary from version to version and are described fully in
XQ	SPMSection 6.  All standard CP/M versions assume BOOT=0000H, which is
XQ	SPMthe base of random access memory.  The machine code found at
XQ	SPMlocation BOOT performs a system warm start, which loads and
XQ	SPMinitializes the programs and variables necessary to return control
XQ	SPMto the CCP.  Thus, transient programs need only jump to location
XQ	SPMBOOT to return control to CP/M at the command level.  Further, the
XQ	SPMstandard versions assume TBASE=BOOT+0100H, which is normally
XQ	SPMlocation 0100H.  The principal entry point to the FDOS is at
XQ	SPMlocation BOOT+0005H (normally 0005H) where a jump to FBASE is found.
XQ	SPMThe address field at BOOT+0006H (normally 0006H) contains the value
XQ	SPMof FBASE and can be used to determine the size of available memory,
XQ	SPassuming that the CCP is being overlaid by a transient program.

Q	SPMTransient programs are loaded into the TPA and executed as
XQ	SPMfollows.  The operator communicates with the CCP by typing command
XQ	SPMlines following each prompt.  Each command line takes one of the
XQ	SPfollowing forms:

Q	SPcommand
Q	SPcommand file1
Q	SPcommand file1 file2

Q	SPMwhere command is either a built-in function, such as DIR or TYPE, or
XQ	SPMthe name of a transient command or program.  If the command is a
XQ	SPMbuilt-in function of CP/M, it is executed immediately.  Otherwise,
XQ	SPMthe CCP searches the currently addressed disk for a file by the name
X
Q	SPcommand.COM

Q	SPMIf the file is found, it is assumed to be a memory image of a
XQ	SPMprogram that executes in the TPA and thus implicity originates at
XQ	SPMTBASE in memory.  The CCP loads the COM file from the disk into
XQ	SPmemory starting at TBASE and can extend up to CBASE.

Q	SPMIf the command is followed by one or two file specifications,
XQ	SPMthe CCP prepares one or two File Control Block (FCB) names in the
XQ	SPMsystem parameter area.  These optional FCBs are in the form
XQ	SPMnecessary to access files through the FDOS and are described in
XQ	SPSection 5.2.

Q	SPMThe transient program receives control from the CCP and begins
XQ	SPMexecution, using the I/O facilities of the FDOS.  The transient
XQ	SPMprogram is called from the CCP.  Thus, it can simply return to the
XQ	SPMCCP upon completion of its processing, or can jump to BOOT to pass
XQ	SPMcontrol back to CP/M.  In the first case, the transient program must
XQ	SPMnot use memory above CBASE, while in the latter case, memory up
XQ	SPthrough FBASE-1 can be used.

Q	SPMThe transient program can use the CP/M I/O facilities to
XQ	SPMcommunicate with the operator's console and peripheral devices,
XQ	SPMincluding the disk subsystem.  The I/O system is accessed by passing
XQ	SPMa function number and an information address to CP/M through the
XQ	SPMFDOS entry point at BOOT+0005H.  In the case of a disk read, for


M                               5-M2XX

MCP/M Operating System Manual                    5.1  Introduction


XQ	SPMexample, the transient program sends the number corresponding to a
XQ	SPMdisk read, along with the address of an FCB to the CP/M FDOS.  The
XQ	SPMFDOS, in turn, performs the operation and returns with either a disk
XQ	SPMread completion indication or an error number indicating that the
XQ	SPdisk read was unsuccessful.


Q	SPW5.2  Operating System Call Conventions

Q	SPMT&his section provides detailed information for performing
XQ	SPMdirect operating system calls from user programs.  Many of the
XQ	SPMfunctions listed below, however, are accessed more simply through
XQ	SPMthe I/O macro library provided with the MAC macro assembler and
XQ	SPMlisted in the Digital Research manual entitled, EProgrammer'sR
XQ	SPUtilities Guide for the CP/M Family of Operating Systems.

Q	SPMRCP/M facilities that are available for access by transient
XQ	SPMprograms fall into two general categories:  simple device I/O and
XQ	SPdisk file I/O.  The simple device operations are

Q	SPo read a console character
Q	SPo write a console character
Q	SPo read a sequential character
Q	SPo write a sequential character
Q	SPo get or set I/O status
Q	SPo print console buffer
Q	SPo interrogate console ready

Q	SPThe following FDOS operations perform disk I/O:

Q	SPo disk system reset
Q	SPo drive selection
Q	SPo file creation
Q	SPo file close
Q	SPo directory search
Q	SPo file delete
Q	SPo file rename
Q	SPo random or sequential read
Q	SPo random or sequential write
Q	SPo interrogate available disks
Q	SPo interrogate selected disk
Q	SPo set DMA address
Q	SPo set/reset file indicators.

Q	SPMAs mentioned above, access to the FDOS functions is
XQ	SPMaccomplished by passing a function number and information address
XQ	SPMthrough the primary point at location BOOT+0005H.  In general, the
XQ	SPMfunction number is passed in register C with the information address
XQ	SPMin the double byte pair DE.  Single byte values are returned in
XQ	SPMregister A, with double byte values returned in HL, a zero value is
XQ	SPMreturned when the function number is out of range.  For reasons of
XQ	SPMcompatibility, register A = L and register B = H upon return in all
XQ	SPMcases.  Note that the register passing conventions of CP/M agree
XQ	SPMwith those of the Intel PL/M systems programming language.  CP/M
XQ	SPfunctions and their numbers are listed below.


M                               5-3X

MCP/M Operating System Manual                5.2  Call Conventions


XQ	SP O  System Reset             19  Delete File
Q	SP 1  Console Input            20  Read Sequential
Q	SP 2  Console Output           21  Write Sequential
Q	SP 3  Reader Input             22  Make File
Q	SP 4  Punch Output             23  Rename File
Q	SP 5  List Output              24  Return Login Vector
Q	SP 6  Direct Console I/O       25  Return Current Disk
Q	SP 7  Get I/O Byte             26  Set DMA Address
Q	SP 8  Set I/O Byte             27  Get Addr(Alloc)
Q	SP 9  Print String             28  Write Protect Disk
Q	SP10  Read Console Buffer      29  Get R/0 Vector
Q	SP11  Get Console Status       30  Set File Attributes
Q	SP12  Return Version Number    31  Get Addr(Disk Parms)
Q	SP13  Reset Disk System        32  Set/Get User Code
Q	SP14  Select Disk              33  Read Random
Q	SP15  Open File                34  Write Random
Q	SP16  Close File               35  Compute File Size
Q	SP17  Search for First         36  Set Random Record
Q	SP18  Search for Next          37  Reset Drive
Q	SP                             40  Write Random with Zero Fill


Q	SPMFunctions 28 and 32 should be avoided in application programs
XQ	SPto maintain upward compatibility with CP/M.

Q	SPMUpon entry to a transient program, the CCP leaves the stack
XQ	SPMpointer set to an eight-level stack area with the CCP return address
XQ	SPMpushed onto the stack, leaving seven levels before overflow occurs.
XQ	SPMAlthough this stack is usually not used by a transient program (most
XQ	SPMtransients return to the CCP through a jump to location 0000H) it is
XQ	SPMlarge enough to make CP/M system calls because the FDOS switches to
XQ	SPMa local stack at system entry.  For example, the assembly-language
XQ	SPMprogram segment below reads characters continuously until an
XQ	SPMasterisk is encountered, at which time control returns to the CCP,
XQ	SPassuming a standard CP/M system with BOOT = 0000H.


Q	SPBDOS      EQU        0005H      ;STANDARD CP/M ENTRY
Q	SPCONIN     EQU        1          ;CONSOLE INPUT FUNCTION
Q	SP;
Q	SP          ORG        0100H      ;BASE OF TPA
Q	SPNEXTC:    MVI        C,CONIN    ;READ NEXT CHARACTER
Q	SP          CALL       BDOS       ;RETURN CHARACTER IN <A>
Q	SP          CPI        '*'        ;END OF PROCESSING?
Q	SP          JNZ        NEXTC      ;LOOP IF NOT
Q	SP          RET                   ;RETURN TO CCP
Q	SP          END


Q	SPMCP/M implements a named file structure on each disk, providing
XQ	SPMa logical organization that allows any particular file to contain
XQ	SPMany number of records from completely empty to the full capacity of
XQ	SPMthe drive.  Each drive is logically distinct with a disk directory
XQ	SPMand file data area.  The disk filenames are in three parts: the
XQ	SPMdrive select code, the filename (consisting of one to eight nonblank


M                               5-M4XX

MCP/M Operating System Manual                5.2  Call Conventions


XQ	SPMcharacters), and the filetype (consisting of zero to three nonblank
XQ	SPMcharacters).  The filetype names the generic category of a
XQ	SPMparticular file, while the filename distinguishes individual files
XQ	SPMin each category.  The filetypes listed in Table 5-1 name a few
XQ	SPMgeneric categories that have been established, although they are
XQ	SPsomewhat arbitrary.


Q	SPW                   Table 5-1.  CP/M Filetypes

Q	SP &               Filetype           Meaning

Q	SPASM        Assembler Source
Q	SPPRN        Printer Listing
Q	SPHEX        Hex Machine Code
Q	SPBAS        Basic Source File
Q	SPINT        Intermediate Code
Q	SPCOM        Command File
Q	SPPLI        PL/I Source File
Q	SPREL        Relocatable Module
Q	SPTEX        TEX Formatter Source
Q	SPBAK        ED Source Backup
Q	SPSYM        SID Symbol File
Q	SP$$$        Temporary File


Q	SPMSource files are treated as a sequence of ASCII characters,
XQ	SPMwhere each line of the source file is followed by a carriage return,
XQ	SPMand line-feed sequence (0DH followed by 0AH).  Thus, one 128-byte
XQ	SPMCP/M record can contain several lines of source text.  The end of an
XQ	SPMASCII file is denoted by a CTRL-Z character (1AH) or a real end-of-
XQ	SPMfile returned by the CP/M read operation.  CTRL-Z characters
XQ	SPMembedded within machine code files (for example, COM files) are
XQ	SPMignored and the end-of-file condition returned by CP/M is used to
XQ	SPterminate read operations.

Q	SPMFiles in CP/M can be thought of as a sequence of up to 65536
XQ	SPMrecords of 128 bytes each, numbered from 0 through 65535, thus
XQ	SPMallowing a maximum of 8 megabytes per file.  Note, however, that
XQ	SPMalthough the records may be considered logically contiguous, they
XQ	SPMmay not be physically contiguous in the disk data area.  Internally,
XQ	SPMall files are divided into 16K byte segments called logical extents,
XQ	SPMso that counters are easily maintained as 8-bit values.  The
XQ	SPMdivision into extents is discussed in the paragraphs that follow:
XQ	SPMhowever, they are not particularly significant for the programmer,
XQ	SPMbecause each extent is automatically accessed in both sequential and
XQ	SPrandom access modes.

Q	SPMIn the file operations starting with Function 15, DE usually
XQ	SPMaddresses a FCB.  Transient programs often use the default FCB area
XQ	SPMreserved by CP/M at location BOOT+005CH (normally 005CH) for simple
XQ	SPMfile operations.  The basic unit of file information is a 128-byte
XQ	SPMrecord used for all file operations.  Thus, a default location for
XQ	SPMdisk I/O is provided by CP/M at location BOOT+0080H (normally 0080H)
XQ	SPwhich is the initial default DMA address.  See Function 26.


M                               5-5X

MCP/M Operating System Manual                5.2  Call Conventions


X
Q	SPMAll directory operations take place in a reserved area that
XQ	SPMdoes not affect write buffers as was the case in release 1, with the
XQ	SPMexception of Search First and Search Next, where compatibility is
XQ	SPrequired.

Q	SPMThe FCB data area consists of a sequence of 33 bytes for
XQ	SPMsequential access and a series of 36 bytes in the case when the file
XQ	SPMis accessed randomly.  The default FCB, normally located at 005CH,
XQ	SPMcan be used for random access files, because the three bytes
XQ	SPMstarting at BOOT+007DH are available for this purpose.  Figure 5-2
XQ	SPshows the FCB format with the following fields.



Q	SP    dr f1 f2 / / f8 t1 t2 t3 ex s1 s2 rc d0 / / dn cr r0 r1 r2
Q	SP    00 01 02 ... 08 09 10 11 12 13 14 15 16 ... 31 32 33 34 35


Q	SPW             Figure 5-2.  File Control Block Format



Q	SPMThe following table lists and describes each of the fields in the
XQ	SPFile Control Block figure.


Q	SPW              Table 5-2.  File Control Block Fields

Q	SP       Field                        Definition

Q	SP     dr                   drive code (0-16)
Q	SP                          0 = use default drive for file
Q	SP                          1 = auto disk select drive A,
Q	SP                          2 = auto disk select drive B,
Q	SP                          .
Q	SP                          .
Q	SP                          .
Q	SP                          16= auto disk select drive P.

Q	SP     f1...f8              contain the filename in ASCII
Q	SP                          upper-case, with high bit = 0

Q	SP     t1, t2, t3           contain the filetype in ASCII
Q	SP                          upper-case, with high bit = 0
Q	SP                          t1', t2', and t3' denote the
Q	SP                          bit of these positions,
Q	SP                          t1' = 1 =>Read-Only file,
Q	SP                          t2' = 1 =>SYS file, no DIR list

Q	SP     ex                   contains the current extent
Q	SP                          number, normally set to 00 by
Q	SP                          the user, but in range 0-31
Q	SP                          during file I/O



M                               5-6X

MCP/M Operating System Manual                5.2  Call Conventions


XQ	SPW                     Table 5-2.  (continued)

Q	SP&       Field                        Definition

Q	SP     s1                   reserved for internal system use

Q	SP     s2                   reserved for internal system use,
Q	SP                          set to zero on call to OPEN, MAKE,
Q	SP                          SEARCH

Q	SP     rc                   record count for extent ex;
Q	SP                          takes on values from 0-127

Q	SP     d0...dn              filled in by CP/M; reserved for
Q	SP                          system use

Q	SP     cr                   current record to read or write in
Q	SP                          a sequential file operation;
Q	SP                          normally set to zero by user

Q	SP     r0, r1, r2           optional random record number in
Q	SP                          the range 0-65535, with overflow
Q	SP                          to r2, r0, r1 constitute a 16-bit
Q	SP                          value with low byte r0, and high
Q	SP                          byte r1


Q	SPMEach file being accessed through CP/M must have a corresponding
XQ	SPMFCB, which provides the name and allocation information for all
XQ	SPMsubsequent file operations.  When accessing files, it is the
XQ	SPMprogrammer's responsibility to fill the lower 16 bytes of the FCB
XQ	SPMand initialize the cr field.  Normally, bytes 1 through 11 are set
XQ	SPMto the ASCII character values for the filename and filetype, while
XQ	SPall other fields are zero.

Q	SPMFCBs are stored in a directory area of the disk, and are
XQ	SPMbrought into central memory before the programmer proceeds with file
XQ	SPMoperations (see the OPEN and MAKE functions).  The memory copy of
XQ	SPMthe FCB is updated as file operations take place and later recorded
XQ	SPMpermanently on disk at the termination of the file operation, (see
XQ	SPthe CLOSE command).

Q	SPMThe CCP constructs the first 16 bytes of two optional FCBs for
XQ	SPMa transient by scanning the remainder of the line following the
XQ	SPMtransient name, denoted by file1 and file2 in the prototype command
XQ	SPMline described above, with unspecified fields set to ASCII blanks.
XQ	SPMThe first FCB is constructed at location BOOT+005CH and can be used
XQ	SPMas is for subsequent file operations.  The second FCB occupies the
XQ	SPMd0...dn portion of the first FCB and must be moved to another area
XQ	SPMof memory before use.  If, for example, the following command line
XQ	SPis typed:

Q	SPPROGNAME B:X.ZOT Y.ZAP




M                               5-7X

MCP/M Operating System Manual                5.2  Call Conventions


XQ	SPMthe file PROGNAME.COM is loaded into the TPA, and the default FCB at
XQ	SPMBOOT+005CH is initialized to drive code 2, filename X, and filetype
XQ	SPMZOT.  The second drive code takes the default value 0, which is
XQ	SPMplaced at BOOT-006CH, with the filename Y placed into location
XQ	SPMBOOT+006DH and filetype ZAP located 8 bytes later at BOOT+0075H.
XQ	SPMAll remaining fields through cr are set to zero.  Note again that it
XQ	SPMis the programmer's responsibility to move this second filename and
XQ	SPMfiletype to another area, usually a separate file control block,
XQ	SPMbefore opening the file that begins at BOOT+005CH, because the open
XQ	SPoperation overwrites the second name and type.

Q	SPMIf no filenames are specified in the original command, the
XQ	SPMfields beginning at BOOT+005DH and BOOT+006DH contain blanks.  In
XQ	SPMall cases, the CCP translates lower-case alphabetics to upper-case
XQ	SPto be consistent with the CP/M file naming conventions.

Q	SPMAs an added convenience, the default buffer area at location
XQ	SPMBOOT+0080H is initialized to the command line tail typed by the
XQ	SPMoperator following the program name.  The first position contains
XQ	SPMthe number of characters, with the characters themselves following
XQ	SPMthe character count.  Given the above command line, the area
XQ	SPbeginning at BOOT+0080H is initialized as follows:


Q	SPBOOT+0080H:

Q	SP+00 +01 +02 +03 +04 +05 +06 +07 +08 +09 +A  +B  +C  +D  +E
Q	SPE   ''  'B' ':' 'X' '.' 'Z' 'O' 'T' ''  'Y' '.' 'Z' 'A' 'P'


Q	SPMwhere the characters are translated to upper-case ASCII with
XQ	SPMuninitialized memory following the last valid character.  Again, it
XQ	SPMis the responsibility of the programmer to extract the information
XQ	SPMfrom this buffer before any file operations are performed, unless
XQ	SPthe default DMA address is explicitly changed.

Q	SPMIndividual functions are described in detail in the pages that
XQ	SPfollow.



















M                               5-8X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 0:  SYSTEM RESET

Q	SP                    Entry Parameters:
Q	SP                           Register C:  00H



Q	SPMThe System Reset function returns control to the CP/M operating
XQ	SPMsystem at the CCP level.  The CCP reinitializes the disk subsystem
XQ	SPMby selecting and logging-in disk drive A.  This function has exactly
XQ	SPthe same effect as a jump to location BOOT.






Q	SP                   FUNCTION 1:  CONSOLE INPUT

Q	SP                Entry Parameters:
Q	SP                      Register C:  01H

Q	SP                Returned Value:
Q	SP                      Register A:  ASCII Character



Q	SPMThe Console Input function reads the next console character to
XQ	SPMregister A.  Graphic characters, along with carriage return, line-
XQ	SPMfeed, and back space (CTRL-H) are echoed to the console.  Tab
XQ	SPMcharacters, CTRL-I, move the cursor to the next tab stop.  A check
XQ	SPMis made for start/stop scroll, CTRL-S, and start/stop printer echo,
XQ	SPMCTRL-P.  The FDOS does not return to the calling program until a
XQ	SPMcharacter has been typed, thus suspending execution if a character
XQ	SPis not ready.


















M                               5-9X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                   FUNCTION 2:  CONSOLE OUTPUT

Q	SP                Entry Parameters
Q	SP                      Register C:  02H
Q	SP                      Register E:  ASCII Character



Q	SPMThe ASCII character from register E is sent to the console
XQ	SPMdevice.  As in Function 1, tabs are expanded and checks are made for
XQ	SPstart/stop scroll and printer echo.






Q	SP                    FUNCTION 3:  READER INPUT

Q	SP                Entry Parameters:
Q	SP                      Register C:  03H

Q	SP                Returned Value:
Q	SP                      Register A:  ASCII Character



Q	SPMThe Reader Input function reads the next character from the
XQ	SPMlogical reader into register A.  See the IOBYTE definition in
XQ	SPMChapter 6.  Control does not return until the character has been
XQ	SPread.






















M                               5-10X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 4:  PUNCH OUTPUT

Q	SP                 Entry Parameters:
Q	SP                       Register C:  04H
Q	SP                       register E:  ASCII Character



Q	SPMThe Punch Output function sends the character from register E
XQ	SPto the logical punch device.






Q	SP                    FUNCTION 5:  LIST OUTPUT

Q	SP                Entry Parameters:
Q	SP                      Register C:  05H
Q	SP                      Register E:  ASCII Character



Q	SPMThe List Output function sends the ASCII character in register
XQ	SPE to the logical listing device.



























M                               5-11X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                 FUNCTION 6:  DIRECT CONSOLE I/O

Q	SP                Entry Parameters:
Q	SP                      Register C:  06H
Q	SP                      Register E:  0FFH (input) or
Q	SP                                   char (output)

Q	SP                Returned Value:
Q	SP                      Register A:  char or status



Q	SPMDirect Console I/O is supported under CP/M for those
XQ	SPMspecialized applications where basic console input and output are
XQ	SPMrequired.  Use of this function should, in general, be avoided since
XQ	SPMit bypasses all of the CP/M normal control character functions (for
XQ	SPMexample, CTRL-S and CTRL-P).  Programs that perform direct I/O
XQ	SPMthrough the BIOS under previous releases of CP/M, however, should be
XQ	SPMchanged to use direct I/O under BDOS so that they can be fully
XQ	SPsupported under future releases of MP/M  and CP/M.

Q	SPMUpon entry to Function 6, register E either contains
XQ	SPMhexadecimal FF, denoting a console input request, or an ASCII
XQ	SPMcharacter.  If the input value is FF, Function 6 returns A = 00 if
XQ	SPMno character is ready, otherwise A contains the next console input
XQ	SPcharacter.

Q	SPMIf the input value in E is not FF, Function 6 assumes that E
XQ	SPcontains a valid ASCII character that is sent to the console.

Q	SPMFunction 6 must not be used in conjunction with other console
XQ	SPI/O functions.






Q	SP                    FUNCTION 7:  GET I/O BYTE

Q	SP                Entry Parameters:
Q	SP                      Register C:  07H

Q	SP                Returned Value:
Q	SP                      Register A:  I/O Byte Value



Q	SPMThe Get I/O Byte function returns the current value of IOBYTE
XQ	SPin register A.  See Chapter 6 for IOBYTE definition.



M                               5-12X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 8:  SET I/O BYTE

Q	SP                Entry Parameters:
Q	SP                      Register C:  08H
Q	SP                      Register E:  I/O Byte Value



Q	SPMThe SET I/O Byte function changes the IOBYTE value to that
XQ	SPgiven in register E.






Q	SP                    FUNCTION 9:  PRINT STRING

Q	SP               Entry Parameters:
Q	SP                     Register C:  09H
Q	SP                   Registers DE:  String Address



Q	SPMThe Print String function sends the character string stored in
XQ	SPMmemory at the location given by DE to the console device, until a $
XQ	SPMis encountered in the string.  Tabs are expanded as in Function 2,
XQ	SPand checks are made for start/stop scroll and printer echo.

























M                               5-13X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                FUNCTION 10:  READ CONSOLE BUFFER

Q	SP                Entry Parameters:
Q	SP                      Register C:  0AH
Q	SP                    Registers DE:  Buffer Address

Q	SP                Returned Value:
Q	SP                     Console Characters in Buffer



Q	SPMThe Read Buffer functions reads a line of edited console input
XQ	SPMinto a buffer addressed by registers DE.  Console input is
XQ	SPMterminated when either input buffer overflows or a carriage return
XQ	SPor line-feed is typed.  The Read Buffer takes the form:

Q	SPDE:+0 +1 +2 +3 +4 +5 +6 +7 +8 . . .+n

Q	SPmx nc c1 c2 c3 c4 c5 c6 c7  ... ??

Q	SPMwhere mx is the maximum number of characters that the buffer will
XQ	SPMhold, 1 to 255, and nc is the number of characters read (set by FDOS
XQ	SPMupon return) followed by the characters read from the console.  If
XQ	SPMnc < mx, then uninitialized positions follow the last character,
XQ	SPMdenoted by ?? in the above figure.  A number of control functions,
XQ	SPsummarized in Table 5-3, are recognized during line editing.


Q	SPW               Table 5-3.  Edit Control Characters

Q	SP       Character             Edit Control Function

Q	SPrub/del     removes and echoes the last character

Q	SPCTRL-C      reboots when at the beginning of line

Q	SPCTRL-E      causes physical end of line

Q	SPCTRL-H      backspaces one character position

Q	SPCTRL-J      (line feed) terminates input line

Q	SPCTRL-M      (return) terminates input line

Q	SPCTRL-R      retypes the current line after new line

Q	SPCTRL-U      removes current line

Q	SPCTRL-X      same as CTRL-U




M                               5-14X

MCP/M Operating System Manual                5.2  Call Conventions


XQ	SPMThe user should also note that certain functions that return the
XQ	SPMcarriage to the leftmost position (for example, CTRL-X) do so only
XQ	SPMto the column position where the prompt ended.  In earlier releases,
XQ	SPMthe carriage returned to the extreme left margin.  This convention
XQ	SPmakes operator data input and line correction more legible.




















































M                               5-15X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                FUNCTION 11:  GET CONSOLE STATUS

Q	SP                Entry Parameters:
Q	SP                      Register C:  0BH

Q	SP                Returned Value:
Q	SP                      Register A:  Console Status



Q	SPMThe Console Status function checks to see if a character has
XQ	SPMbeen typed at the console.  If a character is ready, the value 0FFH
XQ	SPis returned in register A.  Otherwise a 00H value is returned.






Q	SP               FUNCTION 12:  RETURN VERSION NUMBER

Q	SP               Entry Parameters:
Q	SP                     Register C:  0CH

Q	SP               Returned Value:
Q	SP                   Registers HL:  Version Number



Q	SPMFunction 12 provides information that allows version
XQ	SPMindependent programming.  A two-byte value is returned, with H = 00
XQ	SPMdesignating the CP/M release (H = 01 for MP/M) and L = 00 for all
XQ	SPMreleases previous to 2.0.  CP/M 2.0 returns a hexadecimal 20 in
XQ	SPMregister L, with subsequent version 2 releases in the hexadecimal
XQ	SPMrange 21,22, through 2F.  Using Function 12, for example, the user
XQ	SPMcan write application programs that provide both sequential and
XQ	SPrandom access functions.
















M                               5-16X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                 FUNCTION 13:  RESET DISK SYSTEM

Q	SP                    Entry Parameters:
Q	SP                          Register C:  0DH



Q	SPMThe Reset Disk function is used to programmatically restore the
XQ	SPMfile system to a reset state where all disks are set to Read-Write.
XQ	SPMSee functions 28 and 29, only disk drive A is selected, and the
XQ	SPMdefault DMA address is reset to BOOT+0080H.  This function can be
XQ	SPMused, for example, by an application program that requires a disk
XQ	SPchange without a system reboot.






Q	SP                    FUNCTION 14:  SELECT DISK

Q	SP                 Entry Parameters:
Q	SP                       Register C:  0EH
Q	SP                       Register E:  Selected Disk



Q	SPMThe Select Disk function designates the disk drive named in
XQ	SPMregister E as the default disk for subsequent file operations, with
XQ	SPME = O for drive A, 1 for drive B, and so on through 15,
XQ	SPMcorresponding to drive P in a full 16 drive system.  The drive is
XQ	SPMplaced in an on-line status, which activates its directory until the
XQ	SPMnext cold start, warm start, or disk system reset operation.  If the
XQ	SPMdisk medium is changed while it is on-line, the drive automatically
XQ	SPMgoes to a Read-Only status in a standard CP/M environment, see
XQ	SPMFunction 28.  FCBs that specify drive code zero (dr = 00H)
XQ	SPMautomatically reference the currently selected default drive.  Drive
XQ	SPMcode values between 1 and 16 ignore the selected default drive and
XQ	SPdirectly reference drives A through P.














M                               5-17X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                     FUNCTION 15:  OPEN FILE

Q	SP                Entry Parameters:
Q	SP                      Register C:  0FH
Q	SP                    Registers DE:  FCB Address

Q	SP                Returned Value:
Q	SP                     Register  A:  Directory Code



Q	SPMThe Open File operation is used to activate a file that
XQ	SPMcurrently exists in the disk directory for the currently active user
XQ	SPMnumber.  The FDOS scans the referenced disk directory for a match in
XQ	SPMpositions 1 through 14 of the FCB referenced by DE (byte s1 is
XQ	SPMautomatically zeroed) where an ASCII question mark (3FH) matches any
XQ	SPMdirectory character in any of these positions.  Normally, no
XQ	SPMquestion marks are included, and bytes ex and s2 of the FCB are
XQ	SPzero.

Q	SPMIf a directory element is matched, the relevant directory
XQ	SPMinformation is copied into bytes d0 through dn of FCB, thus allowing
XQ	SPMaccess to the files through subsequent read and write operations.
XQ	SPMThe user should note that an existing file must not be accessed
XQ	SPMuntil a successful open operation is completed.  Upon return, the
XQ	SPMopen function returns a directory code with the value 0 through 3 if
XQ	SPMthe open was successful or 0FFH (255 decimal) if the file cannot be
XQ	SPMfound.  If question marks occur in the FCB, the first matching FCB
XQ	SPMis activated.  Note that the current record, (cr) must be zeroed by
XQ	SPMthe program if the file is to be accessed sequentially from the
XQ	SPfirst record.






















M                               5-18X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 16:  CLOSE FILE

Q	SP             Entry Parameters:
Q	SP                   Register C:  10H
Q	SP                 Registers DE:  FCB Address

Q	SP             Returned Value:
Q	SP                  Register  A:  Directory Code



Q	SPMThe Close File function performs the inverse of the Open File
XQ	SPMfunction.  Given that the FCB addressed by DE has been previously
XQ	SPMactivated through an open or make function,  the close function
XQ	SPMpermanently records the new FCB in the reference disk directory see
XQ	SPMfunctions 15 and 22.  The FCB matching process for the close is
XQ	SPMidentical to the open function.  The directory code returned for a
XQ	SPMsuccessful close operation is 0, 1, 2, or 3, while a 0FFH (255
XQ	SPMdecimal) is returned if the filename cannot be found in the
XQ	SPMdirectory.  A file need not be closed if only read operations have
XQ	SPMtaken place.  If write operations have occurred, the close operation
XQ	SPis necessary to record the new directory information permanently.































M                               5-19X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 17:  SEARCH FOR FIRST

Q	SP               Entry Parameters:
Q	SP                     Register C:  11H
Q	SP                   Registers DE:  FCB Address

Q	SP               Returned Value:
Q	SP                    Register  A:  Directory Code



Q	SPMSearch First scans the directory for a match with the file
XQ	SPMgiven by the FCB addressed by DE.  The value 255 (hexadecimal FF) is
XQ	SPMreturned if the file is not found; otherwise, 0, 1, 2, or 3 is
XQ	SPMreturned indicating the file is present.  When the file is found,
XQ	SPMthe current DMA address is filled with the record containing the
XQ	SPMdirectory entry, and the relative starting position is A *32 (that
XQ	SPMis, rotate the A register left 5 bits, or ADD A five times).
XQ	SPMAlthough not normally required for application programs, the
XQ	SPMdirectory information can be extracted from the buffer at this
XQ	SPposition.

Q	SPMAn ASCII question mark (63 decimal, 3F hexadecimal) in any
XQ	SPMposition from f1 through ex matches the corresponding field of any
XQ	SPMdirectory entry on the default or auto-selected disk drive.  If the
XQ	SPMdr field contains an ASCII question mark, the auto disk select
XQ	SPMfunction is disabled and the default disk is searched, with the
XQ	SPMsearch function returning any matched entry, allocated or free,
XQ	SPMbelonging to any user number.  This latter function is not normally
XQ	SPMused by application programs, but it allows complete flexibility to
XQ	SPMscan all current directory values.  If the dr field is not a
XQ	SPquestion mark, the s2 byte is automatically zeroed.





















M                               5-20X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                  FUNCTION 18:  SEARCH FOR NEXT

Q	SP                 Entry Parameters:
Q	SP                       Register C:  12H

Q	SP                   Returned Value:
Q	SP                      Register  A:  Directory Code



Q	SPMThe Search Next function is similar to the Search First
XQ	SPMfunction, except that the directory scan continues from the last
XQ	SPMmatched entry.  Similar to Function 17, Function 18 returns the
XQ	SPdecimal value 255 in A when no more directory items match.






Q	SP                    FUNCTION 19:  DELETE FILE

Q	SP                Entry Parameters:
Q	SP                      Register C:  13H
Q	SP                    Registers DE:  FCB Address

Q	SP                Returned Value:
Q	SP                     Register  A:  Directory Code



Q	SPMThe Delete File function removes files that match the FCB
XQ	SPMaddressed by DE.  The filename and type may contain ambiguous
XQ	SPMreferences (that is, question marks in various positions), but the
XQ	SPMdrive select code cannot be ambiguous, as in the Search and Search
XQ	SPNext functions.

Q	SPMFunction 19 returns a decimal 255 if the referenced file or
XQ	SPMfiles cannot be found; otherwise, a value in the range 0 to 3
XQ	SPreturned.













M                               5-21X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                  FUNCTION 20:  READ SEQUENTIAL

Q	SP               Entry Parameters:
Q	SP                     Register C:  14H
Q	SP                   Registers DE:  FCB Address

Q	SP               Returned Value:
Q	SP                    Register  A:  Directory Code



Q	SPMGiven that the FCB addressed by DE has been activated through
XQ	SPMan Open or Make function, the Read Sequential function reads the
XQ	SPMnext 128-byte record from the file into memory at the current DMA
XQ	SPMaddress.  The record is read from position cr of the extent, and the
XQ	SPMcr field is automatically incremented to the next record position.
XQ	SPMIf the cr field overflows, the next logical extent is automatically
XQ	SPMopened and the cr field is reset to zero in preparation for the next
XQ	SPMread operation.  The value 00H is returned in the A register if the
XQ	SPMread operation was successful, while a nonzero value is returned if
XQ	SPMno data exist at the next record position (for example, end-of-file
XQ	SPoccurs).






Q	SP                 FUNCTION 21:  WRITE SEQUENTAIL

Q	SP               Entry Parameters:
Q	SP                     Register C:  15H
Q	SP                   Registers DE:  FCB Address

Q	SP               Returned Value:
Q	SP                    Register  A:  Directory Code



Q	SPMGiven that the FCB addressed by DE has been activated through
XQ	SPMan Open or Make function, the Write Sequential function writes the
XQ	SPM128-byte data record at the current DMA address to the file named by
XQ	SPMthe FCB.  The record is placed at position cr of the file, and the
XQ	SPMcr field is automatically incremented to the next record position.
XQ	SPMIf the cr field overflows, the next logical extent is automatically
XQ	SPMopened and the cr field is reset to zero in preparation for the next
XQ	SPMwrite operation.  Write operations can take place into an existing
XQ	SPMfile, in which case, newly written records overlay those that
XQ	SPMalready exist in the file.  Register A = 00H upon return from a
XQ	SPMsuccessful write operation, while a nonzero value indicates an
XQ	SPunsuccessful write caused by a full disk.


M                               5-22X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                     FUNCTION 22:  MAKE FILE

Q	SP                 Entry Parameters:
Q	SP                       Register C:  16H
Q	SP                     Registers DE:  FCB Address

Q	SP                 Returned Value:
Q	SP                      Register  A:  Directory Code



Q	SPMThe Make File operation is similar to the Open File operation
XQ	SPMexcept that the FCB must name a file that does not exist in the
XQ	SPMcurrently referenced disk directory (that is, the one named
XQ	SPMexplicitly by a nonzero dr code or the default disk if dr is zero).
XQ	SPMThe FDOS creates the file and initializes both the directory and
XQ	SPMmain memory value to an empty file.  The programmer must ensure that
XQ	SPMno duplicate filenames occur, and a preceding delete operation is
XQ	SPMsufficient if there is any possibility of duplication.  Upon return,
XQ	SPMregister A = 0, 1, 2, or 3 if the operation was successful and 0FFH
XQ	SPM(255 decimal) if no more directory space is available.  The Make
XQ	SPMfunction has the side effect of activating the FCB and thus a
XQ	SPsubsequent open is not necessary.






Q	SP                    FUNCTION 23:  RENAME FILE

Q	SP                Entry Parameters:
Q	SP                      Register C:  17H
Q	SP                    Registers DE:  FCB Address

Q	SP                Returned Value:
Q	SP                     Register  A:  Directory Code



Q	SPMThe Rename function uses the FCB addressed by DE to change all
XQ	SPMoccurrences of the file named in the first 16 bytes to the file
XQ	SPMnamed in the second 16 bytes.  The drive code dr at postion 0 is
XQ	SPMused to select the drive, while the drive code for the new filename
XQ	SPMat position 16 of the FCB is assumed to be zero.  Upon return,
XQ	SPMregister A is set to a value between 0 and 3 if the rename was
XQ	SPMsuccessful and 0FFH (255 decimal) if the first filename could not be
XQ	SPfound in the directory scan.





M                               5-23X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP               FUNCTION 24:  RETURN LOG-IN VECTOR

Q	SP               Entry Parameters:
Q	SP                     Register C:  18H

Q	SP               Returned Value:
Q	SP                   Registers HL:  Log-in Vector



Q	SPMThe log-in vector value returned by CP/M is a 16-bit value in
XQ	SPMHL, where the least significant bit of L corresponds to the first
XQ	SPMdrive A and the high-order bit of H corresponds to the sixteenth
XQ	SPMdrive, labeled P.  A 0 bit indicates that the drive is not on-line,
XQ	SPMwhile a 1 bit marks a drive that is actively on-line as a result of
XQ	SPMan explicit disk drive selection or an implicit drive select caused
XQ	SPMby a file operation that specified a nonzero dr field.  The user
XQ	SPMshould note that compatibility is maintained with earlier releases,
XQ	SPbecause registers A and L contain the same values upon return.






Q	SP                FUNCTION 25:  RETURN CURRENT DISK

Q	SP                Entry Parameters:
Q	SP                      Register C:  19H

Q	SP                Returned Value:
Q	SP                     Register  A:  Current Disk



Q	SPMFunction 25 returns the currently selected default disk number
XQ	SPMin register A.  The disk numbers range from 0 through 15
XQ	SPcorresponding to drives A through P.















M                               5-24X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                  FUNCTION 26:  SET DMA ADDRESS

Q	SP                Entry Parameters:
Q	SP                      Register C:  1AH
Q	SP                    Registers DE:  DMA Address



Q	SPMDMA is an acronym for Direct Memory Address, which is often
XQ	SPMused in connection with disk controllers that directly access the
XQ	SPMmemory of the mainframe computer to transfer data to and from the
XQ	SPMdisk subsystem.  Although many computer systems use non-DMA access
XQ	SPM(that is, the data is transferred through programmed I/O
XQ	SPMoperations), the DMA address has, in CP/M, come to mean the address
XQ	SPMat which the 128-byte data record resides before a disk write and
XQ	SPMafter a disk read.  Upon cold start, warm start, or disk system
XQ	SPMreset, the DMA address is automatically set to BOOT+0080H.  The Set
XQ	SPMDMA function can be used to change this default value to address
XQ	SPManother area of memory where the data records reside.  Thus, the DMA
XQ	SPMaddress becomes the value specified by DE until it is changed by a
XQ	SPMsubsequent Set DMA function, cold start, warm start, or disk system
XQ	SPreset.






Q	SP                 FUNCTION 27:  GET ADDR (ALLOC)

Q	SP              Entry Parameters:
Q	SP                    Register C:  1BH

Q	SP              Returned Value:
Q	SP                  Registers HL:  ALLOC Address



Q	SPMAn allocation vector is maintained in main memory for each on-
XQ	SPMline disk drive.  Various system programs use the information
XQ	SPMprovided by the allocation vector to determine the amount of
XQ	SPMremaining storage (see the STAT program).  Function 27 returns the
XQ	SPMbase address of the allocation vector for the currently selected
XQ	SPMdisk drive.  However, the allocation information might be invalid if
XQ	SPMthe selected disk has been marked Read-Only.  Although this function
XQ	SPMis not normally used by application programs, additional details of
XQ	SPthe allocation vector are found in Chapter 6.






M                               5-25X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                FUNCTION 28:  WRITE PROTECT DISK

Q	SP                    Entry Parameters:
Q	SP                          Register C:  1CH



Q	SPMThe Write Protect Disk function provides temporary write
XQ	SPMprotection for the currently selected disk.  Any attempt to write to
XQ	SPMthe disk before the next cold or warm start operation produces the
XQ	SPmessage:

Q	SPBDOS ERR on d:R/O






Q	SP               FUNCTION 29:  GET READ-ONLY VECTOR

Q	SP             Entry Parameters:
Q	SP                   Register C:  1DH

Q	SP             Returned Value:
Q	SP                 Registers HL:  R/O Vector Value



Q	SPMFunction 29 returns a bit vector in register pair HL, which
XQ	SPMindicates drives that have the temporary Read-Only bit set.  As in
XQ	SPMFunction 24, the least significant bit corresponds to drive A, while
XQ	SPMthe most significant bit corresponds to drive P.  The R/O bit is set
XQ	SPMeither by an explicit call to Function 28 or by the automatic
XQ	SPsoftware mechanisms within CP/M that detect changed disks.


















M                               5-26X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                FUNCTION 30:  SET FILE ATTRIBUTES

Q	SP             Entry Parameters:
Q	SP                   Register C:  1EH
Q	SP                 Registers DE:  FCB Address

Q	SP             Returned Value:
Q	SP                  Register  A:  Directory Code



Q	SPMThe Set File Attributes function allows programmatic
XQ	SPMmanipulation of permanent indicators attached to files.  In
XQ	SPMparticular, the R/O and System attributes (t1' and t2') can be set
XQ	SPMor reset.  The DE pair addresses an unambiguous filename with the
XQ	SPMappropriate attributes set or reset.  Function 30 searches for a
XQ	SPMmatch and changes the matched directory entry to contain the
XQ	SPMselected indicators.  Indicators f1' through f4' are not currently
XQ	SPMused, but may be useful for applications programs, since they are
XQ	SPMnot involved in the matching process during file open and close
XQ	SPMoperations.  Indicators f5' through f8' and t3' are reserved for
XQ	SPfuture system expansion.






Q	SP               FUNCTION 31:  GET ADDR (DISK PARMS)

Q	SP                Entry Parameters:
Q	SP                      Register C:  1FH

Q	SP                Returned Value:
Q	SP                    Registers HL:  DPB Address



Q	SPMThe address of the BIOS resident disk parameter block is
XQ	SPMreturned in HL as a result of this function call.  This address can
XQ	SPMbe used for either of two purposes.  First, the disk parameter
XQ	SPMvalues can be extracted for display and space computation purposes,
XQ	SPMor transient programs can dynamically change the values of current
XQ	SPMdisk parameters when the disk environment changes, if required.
XQ	SPNormally, application programs will not require this facility.








M                               5-27X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                 FUNCTION 32:  SET/GET USER CODE

Q	SP               Entry Parameters:
Q	SP                     Register C:  20H
Q	SP                     Register E:  OFFH (get) or
Q	SP                                  User Code (set)

Q	SP               Returned Value:
Q	SP                    Register  A:  Current Code or
Q	SP                                  (no value)



Q	SPMAn application program can change or interrogate the currently
XQ	SPMactive user number by calling Function 32.  If register E = 0FFH,
XQ	SPMthe value of the current user number is returned in register A,
XQ	SPMwhere the value is in the range of 0 to 15.  If register E is not
XQ	SPM0FFH, the current user number is changed to the value of E, modulo
XQ	SP16.


































M                               5-28X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 33:  READ RANDOM

Q	SP                 Entry Parameters:
Q	SP                       Register C:  21H

Q	SP                 Returned Value:
Q	SP                      Register  A:  Return Code



Q	SPMThe Read Random function is similar to the sequential file read
XQ	SPMoperation of previous releases, except that the read operation takes
XQ	SPMplace at a particular record number, selected by the 24-bit value
XQ	SPMconstructed from the 3-byte field following the FCB (byte positions
XQ	SPMr0 at 33, r1 at 34, and r2 at 35).  The user should note that the
XQ	SPMsequence of 24 bits is stored with least significant byte first
XQ	SPM(r0), middle byte next (r1), and high byte last (r2).  CP/M does not
XQ	SPMreference byte r2, except in computing the size of a file (Function
XQ	SPM35).  Byte r2 must be zero, however, since a nonzero value indicates
XQ	SPoverflow past the end of file.

Q	SPMThus, the r0, r1 byte pair is treated as a double-byte, or word
XQ	SPMvalue, that contains the record to read.  This value ranges from 0
XQ	SPMto 65535, providing access to any particular record of the 8-
XQ	SPMmegabyte file.  To process a file using random access, the base
XQ	SPMextent (extent 0) must first be opened.  Although the base extent
XQ	SPMmight or might not contain any allocated data, this ensures that the
XQ	SPMfile is properly recorded in the directory and is visible in DIR
XQ	SPMrequests.  The selected record number is then stored in the random
XQ	SPrecord field (r0, r1), and the BDOS is called to read the record.

Q	SPMUpon return from the call, register A either contains an error
XQ	SPMcode, as listed below, or the value 00, indicating the operation was
XQ	SPMsuccessful.  In the latter case, the current DMA address contains
XQ	SPMthe randomly accessed record.  Note that contrary to the sequential
XQ	SPMread operation, the record number is not advanced.  Thus, subsequent
XQ	SPrandom read operations continue to read the same record.

Q	SPMUpon each random read operation, the logical extent and current
XQ	SPMrecord values are automatically set.  Thus, the file can be
XQ	SPMsequentially read or written, starting from the current randomly
XQ	SPMaccessed position.  However, note that, in this case, the last
XQ	SPMrandomly read record will be reread as one switches from random mode
XQ	SPMto sequential read and the last record will be rewritten as one
XQ	SPMswitches to a sequential write operation.  The user can simply
XQ	SPMadvance the random record position following each random read or
XQ	SPwrite to obtain the effect of sequential I/O operation.






M                               5-29X

MCP/M Operating System Manual                5.2  Call Conventions


X
Q	SPMError codes returned in register A following a random read are
XQ	SPlisted below.


Q	SP01   reading unwritten data

Q	SP02   (not returned in random mode)

Q	SP03   cannot close current extent

Q	SP04   seek to unwritten extent

Q	SP05   (not returned in read mode)

Q	SP06   seek past physical end of disk


Q	SPMError codes 01 and 04 occur when a random read operation
XQ	SPMaccesses a data block that has not been previously written or an
XQ	SPMextent that has not been created, which are equivalent conditions.
XQ	SPMError code 03 does not normally occur under proper system operation.
XQ	SPMIf it does, it can be cleared by simply rereading or reopening
XQ	SPMextent zero as long as the disk is not physically write protected.
XQ	SPMError code 06 occurs whenever byte r2 is nonzero under the current
XQ	SPM2.0 release.  Normally, nonzero return codes can be treated as
XQ	SPMmissing data, with zero return codes indicating operation complete.
X





























M                               5-30X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                   FUNCTION 34:  WRITE RANDOM

Q	SP                Entry Parameters:
Q	SP                      Register C:  22H
Q	SP                    Registers DE:  FCB Address

Q	SP                Returned Value:
Q	SP                     Register  A:  Return Code



Q	SPMThe Write Random operation is initiated similarly to the Read
XQ	SPMRandom call, except that data is written to the disk from the
XQ	SPMcurrent DMA address.  Further, if the disk extent or data block that
XQ	SPMis the target of the write has not yet been allocated, the
XQ	SPMallocation is performed before the write operation continues.  As in
XQ	SPMthe Read Random operation, the random record number is not changed
XQ	SPMas a result of the write.  The logical extent number and current
XQ	SPMrecord positions of the FCB are set to correspond to the random
XQ	SPMrecord that is being written.  Again, sequential read or write
XQ	SPMoperations can begin following a random write, with the notation
XQ	SPMthat the currently addressed record is either read or rewritten
XQ	SPMagain as the sequential operation begins.  You can also simply
XQ	SPMadvance the random record position following each write to get the
XQ	SPMeffect of a sequential write operation.  Note that reading or
XQ	SPMwriting the last record of an extent in random mode does not cause
XQ	SPan automatic extent switch as it does in sequential mode.

Q	SPMThe error codes returned by a random write are identical to the
XQ	SPMrandom read operation with the addition of error code 05, which
XQ	SPMindicates that a new extent cannot be created as a result of
XQ	SPdirectory overflow.





















M                               5-31X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                 FUNCTION 35:  COMPUTE FILE SIZE

Q	SP                  Entry Parameters:
Q	SP                        Register C:  23H
Q	SP                      Registers DE:  FCB Address

Q	SP                  Returned Value:
Q	SP                      Random Record Field Set



Q	SPMWhen computing the size of a file, the DE register pair
XQ	SPMaddresses an FCB in random mode format (bytes r0, r1, and r2 are
XQ	SPMpresent).  The FCB contains an unambiguous filename that is used in
XQ	SPMthe directory scan.  Upon return, the random record bytes contain
XQ	SPMthe virtual file size, which is, in effect, the record address of
XQ	SPMthe record following the end of the file.  Following a call to
XQ	SPMFunction 35, if the high record byte r2 is 01, the file contains the
XQ	SPMmaximum record count 65536.  Otherwise, bytes r0 and r1 constitute a
XQ	SPM16-bit value as before (r0 is the least significant byte), which is
XQ	SPthe file size.

Q	SPMData can be appended to the end of an existing file by simply
XQ	SPMcalling Function 35 to set the random record position to the end of
XQ	SPMfile and then performing a sequence of random writes starting at the
XQ	SPpreset record address.

Q	SPMThe virtual size of a file corresponds to the physical size
XQ	SPMwhen the file is written sequentially.  If the file was created in
XQ	SPMrandom mode and holes exist in the allocation, the file might
XQ	SPMcontain fewer records than the size indicates.  For example, if only
XQ	SPMthe last record of an 8-megabyte file is written in random mode
XQ	SPM(that is, record number 65535), the virtual size is 65536 records,
XQ	SPalthough only one block of data is actually allocated.



















M                               5-32X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                 FUNCTION 36:  SET RANDOM RECORD

Q	SP                 Entry Parameters:
Q	SP                       Register C:  24H
Q	SP                     Registers DE:  FCB Address

Q	SP                 Returned Value:
Q	SP                        Random Record Field Set



Q	SPMThe Set Random Record function causes the BDOS automatically to
XQ	SPMproduce the random record position from a file that has been read or
XQ	SPMwritten sequentially to a particular point.  The function can be
XQ	SPuseful in two ways.

Q	SPMFirst, it is often necessary initially to read and scan a
XQ	SPMsequential file to extract the positions of various key fields.  As
XQ	SPMeach key is encountered, Function 36 is called to compute the random
XQ	SPMrecord position for the data corresponding to this key.  If the data
XQ	SPMunit size is 128 bytes, the resulting record position is placed into
XQ	SPMa table with the key for later retrieval.  After scanning the entire
XQ	SPMfile and tabulating the keys and their record numbers, the user can
XQ	SPMmove instantly to a particular keyed record by performing a random
XQ	SPMread, using the corresponding random record number that was saved
XQ	SPMearlier.  The scheme is easily generalized for variable record
XQ	SPMlengths, because the program need only store the buffer-relative
XQ	SPMbyte position along with the key and record number to find the exact
XQ	SPstarting position of the keyed data at a later time.

Q	SPMA second use of Function 36 occurs when switching from a
XQ	SPMsequential read or write over to random read or write.  A file is
XQ	SPMsequentially accessed to a particular point in the file, Function 36
XQ	SPMis called, which sets the record number, and subsequent random read
XQ	SPand write operations continue from the selected point in the file.


















M                               5-33X

MCP/M Operating System Manual                5.2  Call Conventions


X



Q	SP                    FUNCTION 37:  RESET DRIVE

Q	SP                 Entry Parameters:
Q	SP                       Register C:  25H
Q	SP                     Registers DE:  Drive Vector

Q	SP                 Returned Value:
Q	SP                      Register  A:  00H



Q	SPMThe Reset Drive function allows resetting of specified drives.
XQ	SPMThe passed parameter is a 16-bit vector of drives to be reset; the
XQ	SPleast significant bit is drive A:.

Q	SPMTo maintain compatibility with MP/M, CP/M returns a zero value.
X





Q	SP            FUNCTION 40:  WRITE RANDOM WITH ZERO FILL

Q	SP                 Entry Parameters:
Q	SP                       Register C:  28H
Q	SP                     Registers DE:  FCB Address

Q	SP                 Returned Value:
Q	SP                      Register  A:  Return Code



Q	SPMThe Write With Zero Fill operation is similar to Function 34,
XQ	SPMwith the exception that a previously unallocated block is filled
XQ	SPwith zeros before the data is written.

















M                               5-34X

MCP/M Operating System Manual           5.3  A Sample Copy Program


XQ	SPW5.3  A Sample File-to-File Copy Program

Q	SPMT&he following program provides a relatively simple example of
XQ	SPMfile operations.  The program source file is created as COPY.ASM
XQ	SPMusing the CP/M ED program and then assembled using ASM or MAC,
XQ	SPMresulting in a HEX file.  The LOAD program is used to produce a
XQ	SPMCOPY.COM file that executes directly under the CCP.  The program
XQ	SPMbegins by setting the stack pointer to a local area and proceeds to
XQ	SPMmove the second name from the default area at 006CH to a 33-byte
XQ	SPMFile Control Block called DFCB.  The DFCB is then prepared for file
XQ	SPMoperations by clearing the current record  field.  At this point,
XQ	SPMthe source and destination FCBs are ready for processing, because
XQ	SPMthe SFCB at 005CH is properly set up by the CCP upon entry to the
XQ	SPMCOPY program.  That is, the first name is placed into the default
XQ	SPMFCB, with the proper fields zeroed, including the current record
XQ	SPMfield at 007CH.  The program continues by opening the source file,
XQ	SPMdeleting any existing destination file, and creating the destination
XQ	SPMfile.  If all this is successful, the program loops at the label
XQ	SPMCOPY until each record is read from the source file and placed into
XQ	SPMthe destination file.  Upon completion of the data transfer, the
XQ	SPMdestination file is closed and the program returns to the CCP
XQ	SPcommand level by jumping to BOOT.
Q	SP9Q	VSP0


Q	SP                            ;        sample file-to-file copy program
Q	SP                            ;
Q	SP                            ;        at the ccp level, the command
Q	SP                            ;
Q	SP                            ;             copy a:x.y b:u.v
Q	SP                            ;
Q	SP                            ;        copies the file named x.y from drive
Q	SP                            ;        a to a file named u.v. on drive b.
Q	SP                            ;
Q	SP0000 =                      boot     equ 0000h      ;system reboot
Q	SP0005 =                      bdos     equ 0005h      ;bdos entry point
Q	SP005c =                      fcbl     equ 005ch      ;first file name
Q	SP005c =                      sfcb     equ fcbl       ;source fcb
Q	SP006c =                      fcb2     equ 006ch      ;second file name
Q	SP0080 =                      dbuff    equ 0080h      ;default buffer
Q	SP0100 =                      tpa      equ 0100h      ;beginning of tpa
Q	SP                            ;
Q	SP0009 =                      printf   equ 9          ;print buffer func#
Q	SP000f =                      openf    equ 15         ;open file func#
Q	SP0010 =                      closef   equ 16         ;close file func#
Q	SP0013 =                      deletef  equ 19         ;delete file func#
Q	SP0014 =                      readf    equ 20         ;sequential read
Q	SP0015 =                      writef   equ 21         ;sequential write
Q	SP0016 =                      makef    equ 22         ;make file func#
Q	SP                            ;
Q	SP0100                                 org tpa        ;beginning of tpa
Q	SP0100 311b02                          lxi sp,stack   ;local stack
Q	SP                            ;
Q	SP                            ;        move second file name to dfcb
Q	SP0103 0e10                            mvi c,16       ;half an fcb


M                               5-35X

MCP/M Operating System Manual           5.3  A Sample Copy Program


XQ	SP0105 116c00                          lxi d,fcb2     ;source of move
Q	SP0108 21da01                          lxi h,dfcb     ;destination fcb
Q	SP010b 1a                     mfcb:    Idax d         ;source fcb
Q	SP010c 13                              inx  d         ;ready next
Q	SP010d 77                              mov  m,a       ;dest fcb
Q	SP010e 23                              inx  h         ;ready next
Q	SP010f 0d                              dcr  c         ;count 16...0
Q	SP0110 c10b01                          jnz  mfcb      ;loop 16 times
Q	SP                            ;
Q	SP                            ;        name has been removed, zero cr
Q	SP0113 af                              xra  a         ;a = 00h
Q	SP0114 32fa01                          sta  dfcbcr    ;current rec = 0
Q	SP                            ;
Q	SP                            ;        source and destination fcb's ready
Q	SP                            ;
Q	SP0117 115c00                          lxi  d,sfcb    ;source file
Q	SP011a cd6901                          call open      ;error if 255
Q	SP011d 118701                          lxi  d,nofile  ;ready message
Q	SP0120 3c                              inr  a         ;255 becomes 0
Q	SP0121 cc6101                          cz   finis     ;done if no file
Q	SP                            ;
Q	SP                            ;        source file open, prep destination
Q	SP0124 11da01                          lxi  d,dfcb    ;destination
Q	SP0127 cd7301                          call delete    ;remove if present
Q	SP                            ;
Q	SP012a 11da01                          lxi  d,dfcb    ;destination
Q	SP012d cd8201                          call make      ;create the file
Q	SP0130 119601                          lxi  d,nodir   ;ready message
Q	SP0133 3c                              inr  a         ;255 becomes 0
Q	SP0134 cc6101                          cz   finis     ;done if no dir space
Q	SP                            ;
Q	SP                            ;        source file open, dest file open
Q	SP                            ;        copy until end of file on source
Q	SP                            ;
Q	SP0137 115c00                 copy:    lxi  d,sfcb    ;source
Q	SP013a cd7801                          call read      ;read next record
Q	SP013d b7                              ora  a         ;end of file?
Q	SP013e c25101                          jnz  eofile    ;skip write if so
Q	SP                            ;
Q	SP                            ;        not end of file, write the record
Q	SP0141 11da01                          lix  d,dfcb    ;destination
Q	SP0144 cd7d01                          call write     ;write record
Q	SP0147 11a901                          lxi  d,space   ;ready message
Q	SP014a b7                              ora  a         ;00 if write ok
Q	SP014b c46101                          cnz  finis     ;end if so
Q	SP014e c33701                          jmp  copy      ;loop until eof
Q	SP                            ;
Q	SP                            eofile:  ;end of file, close destination
Q	SP0151 11da01                          lxi  d,dfcb    ;destination
Q	SP0154 cd6e01                          call close     ;255 if error
Q	SP0157 21bb01                          lxi  h,wrprot  ;ready message
Q	SP015a 3c                              inr  a         ;255 becomes 00
Q	SP015b cc6101                          cz   finis     ;shouldn't happen
Q	SP                            ;
Q	SP                            ;        copy operation complete, end


M                               5-36X

MCP/M Operating System Manual           5.3  A Sample Copy Program


XQ	SP015e 11cc01                          lxi  d,normal  ;ready message
Q	SP                            ;
Q	SP                            finis    ;write message given by de, reboot
Q	SP0161 0e09                            mvi  c,printf
Q	SP0163 cd0500                          call bdos      ;write message
Q	SP0166 c30000                          jmp  boot      ;reboot system
Q	SP                            ;
Q	SP                            ;        system interface subroutines
Q	SP                            ;        (all return directly from bdos)
Q	SP                            ;
Q	SP0169 0e0f                   open:    mvi  c,openf
Q	SP016b c30500                          jmp  bdos
Q	SP                            ;
Q	SP016e 0e10                   close:   mvi  c,closef
Q	SP0170 c30500                          jmp  bdos
Q	SP                            ;
Q	SP0173 0e13                   delete   mvi  c,deletef
Q	SP0175 c30500                          jmp  bdos
Q	SP                            ;
Q	SP0178 0e14                   read:    mvi  c,readf
Q	SP017a c30500                          jmp  bdos
Q	SP                            ;
Q	SP017d 0e15                   write:   mvi  c,writef
Q	SP017f c30500                          jmp  bdos
Q	SP                            ;
Q	SP0182 0e16                   make:    mvi  c,makef
Q	SP0184 c30500                          jmp  bdos
Q	SP                            ;
Q	SP                            ;        console messages
Q	SP0187 6e6f20f                nofile:  db   'no source file$'
Q	SP0196 6e6f209                nodir:   db   'no directory space$'
Q	SP01a9 6f7574f                space:   db   'out of dat space$'
Q	SP01bb 7772695                wrprot:  db   'write protected?$'
Q	SP01cc 636f700                normal:  db   'copy complete$'
Q	SP                            ;
Q	SP                            ;        data areas
Q	SP01da                        dfcb:    ds   33        ;destination fcb
Q	SP01fa                        dfcbcr   equ  dfcb+32   ;current record
Q	SP                            ;
Q	SP01fb                                 ds   32        ;16 level stack
Q	SP                            stack:
Q	SP021b                                 end
Q	SP9Q	LSP0


Q	SPMNote that there are several simplifications in this particular
XQ	SPMprogram.  First, there are no checks for invalid filenames that
XQ	SPMcould contain ambiguous references.  This situation could be
XQ	SPMdetected by scanning the 32-byte default area starting at location
XQ	SPM005CH for ASCII question marks.  A check should also be make to
XQ	SPMensure that the filenames have been included (check locations 005DH
XQ	SPMand 006DH for nonblank ASCII characters).  Finally, a check should
XQ	SPMbe made to ensure that the source and destination filenames are
XQ	SPMdifferent.  An improvement in speed could be obtained by buffering
XQ	SPMmore data on each read operation.  One could, for example, determine


M                               5-M37XX

MCP/M Operating System Manual           5.3  A Sample Copy Program


XQ	SPMthe size of memory by fetching FBASE from location 0006H and using
XQ	SPMthe entire remaining portion of memory for a data buffer.  In this
XQ	SPMcase, the programmer simply resets the DMA address to the next
XQ	SPMsuccessive 128-byte area before each read.  Upon writing to the
XQ	SPMdestination file, the DMA address is reset to the beginning of the
XQ	SPMbuffer and incremented by 128 bytes to the end as each record is
XQ	SPtransferred to the destination file.


Q	SPW5.4  A Sample File Dump Utility

Q	SPMT&he following file dump program is slightly more complex than
XQ	SPMthe simple copy program given in the previous section.  The dump
XQ	SPMprogram reads an input file, specified in the CCP command line, and
XQ	SPMdisplays the content of each record in hexadecimal format at the
XQ	SPMconsole.  Note that the dump program saves the CCP's stack upon
XQ	SPMentry, resets the stack to a local area, and restores the CCP's
XQ	SPMstack before returning directly to the CCP.  Thus, the dump program
XQ	SPdoes not perform and warm start at the end of processing.
Q	SP9Q	VSP0


Q	SPx.in 5
Q	SP                            ;DUMP program reads input file and displays
Q	SP                            hex data
Q	SP                            ;
Q	SP0100                                 org  100h
Q	SP0005 =                      bdos     equ  0005h =   ;bdos entry point
Q	SP0001 =                      cons     equ  1         ;read console
Q	SP0002 =                      typef    equ  2         ;type function
Q	SP0009 =                      printf   equ  9         ;buffer print entry
Q	SP000b =                      brkf     equ  11        ;break key function
Q	SP                                                    ;(true if char
Q	SP000f =                      openf    equ  15        ;file open
Q	SP0014 =                      readf    equ  20        ;read function
Q	SP                            ;
Q	SP005c =                      fcb      equ  5ch       ;file control block
Q	SP                                                    ;address
Q	SP0080 =                      buff     equ  80h       ;input disk buffer
Q	SP                                                    ;address
Q	SP                            ;
Q	SP                            ;        non graphic characters
Q	SP000d =                      cr       equ  0dh       ;carriage return
Q	SP000a =                      If       equ  0ah       ;line feed
Q	SP                            ;
Q	SP                            ;        file control block definitions
Q	SP005c =                      fcbdn    equ  fcb+0     ;disk name
Q	SP005d =                      fcbfn    equ  fcb+1     ;file name
Q	SP0065 =                      fcbft    equ  fcb+9     ;disk file type (3
Q	SP                                                    ;characters)
Q	SP0068 =                      fcbrl    equ  fcb+12    ;file's current reel
Q	SP                                                    ;number
Q	SP006b =                      fcbrc    equ  fcb+15    ;file's record count (0 to
Q	SP                                                    ;128)128)
Q	SP007c =                      fcbcr'   equ  fcb+32    ;current (next) record


M                               5-38X

MCP/M Operating System Manual      5.4  A Sample File Dump Utility


XQ	SP                                                    ;number (0
Q	SP007d =                      fcbin    equ  fcb+33    ;fcb length
Q	SP                            ;
Q	SP                            ;        set up stack
Q	SP0100 210000                          lxi  h,0
Q	SP0103 39                              dad  sp
Q	SP                            ;        entry stack pointer in hl from the ccp
Q	SP0104 221502                          shld oldsp
Q	SP                            ;        set sp to local stack area (restored at
Q	SP                            ;        finis)
Q	SP0107 315702                          lxi  sp,stktop
Q	SP                            ;        read and print successive buffers
Q	SP010a cdc101                          call setup     ;set up input file
Q	SP010d feff                            cpi  255       ;255 if file not present
Q	SP010f c21b01                          jnz  openok    ;skip if open is ok
Q	SP                            ;
Q	SP                            ;        file not there, give error message and
Q	SP                            ;        return
Q	SP0112 11f301                          lxi  d,opnmsg
Q	SP0115 cd9c01                          call err
Q	SP0118 c35101                          jmp finis      ;to return
Q	SP                            ;
Q	SP                            openok:  ;open operation ok, set buffer index to
Q	SP                                     ;end
Q	SP011b 3e80                            mvi  a,80h
Q	SP011d 321302                          sta  ibp       ;set buffer pointer to 80h
Q	SP                            ;        hl contains next address to print
Q	SP0120 210000                          lxi  h,0       ;start with 0000
Q	SP                            ;
Q	SP                            gloop:
Q	SP0123 e5                              push h         ;save line position
Q	SP0124 cda201                          call gnb
Q	SP0127 e1                              pop  h         ;recall line position
Q	SP0138 da5101                          jc   finis     ;carry set by gnb if end
Q	SP                                                    ;file
Q	SP012b 47                              mov  b,a
Q	SP                            ;        print hex values
Q	SP                            ;        check for line fold
Q	SP012c 7d
Q	SP                                     mov  a,l
Q	SP012d e60f                            ani  0fh       ;check low 4 bits
Q	SP012f c24401                          jnz nonum
Q	SP                            ;        print line number
Q	SP0132 cd7201                          call crlf
Q	SP                            ;
Q	SP                            ;        check for break key
Q	SP0135 cd5901                          call break
Q	SP                            ;        accum lsb = 1 if character ready
Q	SP0138 0f                              rrc            ;into carry
Q	SP0139 da5101                          jc   finis     ;don't print any more
Q	SP                            ;
Q	SP013c 7c                              mov  a,h
Q	SP013d cd8f01                          call phex
Q	SP0140 7d                              mov  a,l
Q	SP0141 cd8f01                          call phex


M                               5-39X

MCP/M Operating System Manual      5.4  A Sample File Dump Utility


XQ	SP                            nonum
Q	SP0144 23                              inx  h         ;to next line number
Q	SP0145 3e20                            mvi  a,''
Q	SP0147 cd6501                          call pchar
Q	SP014a 78                              mov  a,b
Q	SP014b cd8f01                          call phex
Q	SP014e c32301                          jmp  gloop
Q	SP                            ;
Q	SP                            finis
Q	SP                            ;        end of dump, return to cco
Q	SP                            ;        (note that a jmp to 0000h reboots)
Q	SP0151 cd7201                          call crif
Q	SP0154 2a1502                          lhld oldsp
Q	SP0157 f9                              sphl
Q	SP                            ;        stack pointer contains ccp's stack
Q	SP                            ;        location
Q	SP0158 c9                              ret            ;to the ccp
Q	SP                            ;
Q	SP                            ;
Q	SP                            ;        subroutines
Q	SP                            ;
Q	SP                            break:   ;check break key (actually any key will
Q	SP                                     ;do)
Q	SP0159 e5d5c5                          push h! push d! push b; environment
Q	SP                                     ;saved
Q	SP015c 0e0b                            mvi  c,brkf
Q	SP015e cd0500                          call bdos
Q	SP0161 c1d1e1                          pop b! pop d! pop h; environment
Q	SP                                     restored
Q	SP0164 c9                              ret
Q	SP                            ;
Q	SP                            pchar:   ;print a character
Q	SP0165 e5d5c5                          push h! push d! push b; saved
Q	SP0168 0e02                            mvi  c, typef
Q	SP016a 5f                              mov  e,a
Q	SP016b cd0500                          call bdos
Q	SP016e c1d1e1                          pop b! pop d! pop h; restored
Q	SP0171 c9                              ret
Q	SP                            ;
Q	SP                            crlf
Q	SP0172 3e0d                            mvi  a,cr
Q	SP0174 cd6501                          call pchar
Q	SP0177 3e0a                            mvi  a,lf
Q	SP0179 cd6501                          call pchar
Q	SP017c c9                              ret
Q	SP                            ;
Q	SP                            ;
Q	SP                            pnib:    ;print nibble in reg a
Q	SP017d e60f                            ani  ofh       ;low 4 bits
Q	SP017f fe0a                            cpi  10
Q	SP0181 d28901                          jnc  p10
Q	SP                            ;        less than or equal to 9
Q	SP0184 c630                            adi  '0'
Q	SP0186 c38b01                          jmp  prn
Q	SP                            ;


M                               5-40X

MCP/M Operating System Manual      5.4  A Sample File Dump Utility


XQ	SP                            ;        greater or equal to 10
Q	SP0189 c637                   p10:     adi  'a' - 10
Q	SP018b cd6501                 prn:     call pchar
Q	SP018e c9                              ret
Q	SP                            ;
Q	SP                            phex     ;print hex char in reg a
Q	SP018f f5                              pushpsw
Q	SP0190 0f                              rrc
Q	SP0191 0f                              rrc
Q	SP0192 0f                              rrc
Q	SP0193 0f                              rrc
Q	SP0194 cd7d01                          call pnib      ;print nibble
Q	SP0197 f1                              pop  psw
Q	SP0198 cd7d01                          call pnip
Q	SP019b c9                              ret
Q	SP                            ;
Q	SP                            err:     ;print error message
Q	SP                            ;        d,e addresses message ending with "$"
Q	SP019c 0e09                            mvi  c,printf  ;print buffer
Q	SP                                                    ;function
Q	SP019e cd0500                          call bdos
Q	SP01a1 c9                              ret
Q	SP                            ;
Q	SP                            ;
Q	SP                            gnb:     ;get next byte
Q	SP01a2 3a1302                          lda  ibp
Q	SP01a5 fe80                            cpi  80h
Q	SP01a7 c2b301                          jnz  g0
Q	SP                            ;        read another buffer
Q	SP                            ;
Q	SP                            ;
Q	SP 01aa cdce01                         call diskr
Q	SP01ad b7                              ora  a         ;zero value if read ok
Q	SP01ae cab301                          jz   g0        ;for another byte
Q	SP                            ;        end of data, return with carry set for eof
Q	SP01b1 37                              stc
Q	SP01b2 c9                              ret
Q	SP                            ;
Q	SP                            g0:      ;read the byte at buff+reg a
Q	SP01b3 5f                              mov  e,a       ;Is byte of buffer index
Q	SP01b4 1600                            mvi  d,0       ;double precision
Q	SP                                                    ;index to de
Q	SP01b6 3c                              inr  a         ;index=index+1
Q	SP01b7 321302                          sta  ibp       ;back to memory
Q	SP                            ;        pointer is incremented
Q	SP                            ;        save the current file address
Q	SP01ba 218000                          lxi  h,buff
Q	SP01bd 19                              dad  d
Q	SP                            ;        absolute character address is in hl
Q	SP01be 7e                              mov  a,m
Q	SP                            ;        byte is in the accumulator
Q	SP01bf b7                              ora  a         ;reset carry bit
Q	SP01c0 c9                              ret
Q	SP                            ;
Q	SP                            setup:   ;set up file


M                               5-41X

MCP/M Operating System Manual      5.4  A Sample File Dump Utility


XQ	SP                            ;        open the file for input
Q	SP01c1 af                              xra  a         ;zero to accum
Q	SP01c2 327c00                          sta  fcbcr     ;clear current record
Q	SP                            ;
Q	SP01c5 115c00                          lxi  d,fcb
Q	SP01c8 0e0f                            mvi  c,openf
Q	SP01ca cd0500                          call bdos
Q	SP                            ;        255 in accum if open error
Q	SP01cd c9                              ret
Q	SP                            ;
Q	SP                            diskr:   ;read disk file record
Q	SP01ce e5d5c5                          push h! push d! push b
Q	SP01d1 115c00                          lxi  d,fcb
Q	SP01d4 0e14                            mvi  c,readf
Q	SP01d6 cd0500                          call bdos
Q	SP01d9 c1d1e1                          pop b! pop d! pop h
Q	SP01dc c9                              ret
Q	SP                            ;
Q	SP                            ;        fixed message area
Q	SP01dd 46494c0                signon:  db   'file dump version 2.0$'
Q	SP01f3 0d0a4e0                opnmsg:  db   cr,lf,'no  input file present on
Q	SP                                          disk$'

Q	SP                            ;        variable area
Q	SP0213                        ibp:     ds   2         ;input buffer pointer
Q	SP0215                        oldsp:   ds   2         ;entry sp value from ccp
Q	SP                            ;
Q	SP                            ;        stack area
Q	SP0217                        ;        ds   64        ;reserve 32 level stack
Q	SP                            stktop:
Q	SP                            ;
Q	SP0257                                 end
Q	SP9Q	LSP0


Q	SPW5.5  A Sample Random Access Program

Q	SPMT&his chapter concludes with an extensive example of random
XQ	SPMaccess operation.  The program listed below performs the simple
XQ	SPMfunction of reading or writing random records upon command from the
XQ	SPMterminal.  When a program has been created, assembled, and placed
XQ	SPinto a file labeled RANDOM.COM, the CCP level command

Q	SPRANDOM X.DAT

Q	SPMstarts the test program.  The program looks for a file by the name
XQ	SPMX.DAT and, if found, proceeds to prompt the console for input.  If
XQ	SPMnot found, the file is created before the prompt is given.  Each
XQ	SPprompt takes the form

Q	SPnext command?

Q	SPMand is followed by operator input, followed by a carriage return.
XQ	SPThe input commands take the form



M                               5-42X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SPnW  nR  Q

Q	SPMwhere n is an integer value in the range 0 to 65535, and W, R, and Q
XQ	SPMare simple command characters corresponding to random write, random
XQ	SPMread, and quit processing, respectively.  If the W command is
XQ	SPissued, the RANDOM program issues the prompt

Q	SPtype data:

Q	SPMThe operator then responds by typing up to 127 characters, followed
XQ	SPMby a carriage return.  RANDOM then writes the character string into
XQ	SPMthe X.DAT file at record n.  If the R command is issued, RANDOM
XQ	SPMreads record number n and displays the string value at the console,
XQ	SPMIf the Q command is issued, the X.DAT file is closed, and the
XQ	SPMprogram returns to the CCP.  In the interest of brevity, the only
XQ	SPerror message is

Q	SPerror, try again.

Q	SPMThe program begins with an initialization section where the
XQ	SPMinput file is opened or created, followed by a continuous loop at
XQ	SPMthe label ready where the individual commands are interpreted.  The
XQ	SPMDFBC at 005CH and the default buffer at 0080H are used in all disk
XQ	SPMoperations.  The utility subroutines then follow, which contain the
XQ	SPMprincipal input line processor, called readc.  This particular
XQ	SPMprogram shows the elements of random access processing, and can be
XQ	SPused as the basis for further program development.
Q	SP9Q	VSP0


Q	SPW                            Sample Random Access Program for CP/M 2.0

Q	SP&0100                              org    100h      ;base of tpa
Q	SP                         ;
Q	SP0000 =                   reboot   equ    0000h     ;system reboot
Q	SP0005 =                   bdos     equ    0005h     ;bdos entry point
Q	SP                         ;
Q	SP0001 =                   coninp   equ    1         ;console input function
Q	SP0002 =                   conout   equ    2         ;console output function
Q	SP0009 =                   pstring  equ    9         ;print string until '$'
Q	SP000a =                   rstring  equ    10        ;read console buffer
Q	SP000c =                   version  equ    12        ;return version number
Q	SP000f =                   openf    equ    15        ;file open function
Q	SP0010 =                   closef   equ    16        ;close function
Q	SP0016 =                   makef    equ    22        ;make file function
Q	SP0021 =                   readr    equ    33        ;read random
Q	SP0022 =                   writer   equ    34        ;write random
Q	SP                         ;
Q	SP005c =                   fcb      equ    005ch     ;default file control
Q	SP                                                   ;block
Q	SP007d =                   ranrec   equ    fcb+33    ;random record position
Q	SP007f =                   ranovf   equ    fcb+35    ;high order (overflow)
Q	SP                                                   ;byte
Q	SP0080 =                   buff     equ    0080h     ;buffer address
Q	SP                         ;


M                               5-43X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SP000d =                   cr       equ    0dh       ;carriage return
Q	SP000a =                   lf       equ    0ah       ;line feed
Q	SP                         ;


Q	SPW                          Load SP, Set-Up File for Random Access

Q	SP&0100 31bc00                       lxi    sp,stack
Q	SP                         ;
Q	SP                         ;        version 2.0
Q	SP0103 0e0c                         mvi    c,version
Q	SP0105 cd0500                       call   bdos
Q	SP0108 fe20                         cpi    20h       ;version 2.0 or better?
Q	SP010a d21600                       jnc    versok
Q	SP                         ;        bad version, message and go back
Q	SP010d 111b00                       lxi    d,badver
Q	SP0110 cdda00                       call   print
Q	SP0113 c30000                       jmp    reboot
Q	SP                         ;
Q	SP                         versok:
Q	SP                         ;        correct versionm for random access
Q	SP0116 0e0f                         mvi    c,openf   ;open default fcb
Q	SP0118 115c00                       lxi    d,fcb
Q	SP011b cd 0500                      call   bdos
Q	SP011e 3c                           inr    a         ;err 255 becomes zero
Q	SP011f c23700                       jnz    ready
Q	SP                         ;
Q	SP                         ;        connot open file, so create it
Q	SP0122 0e16                         mvi    c,makef
Q	SP0124 115c00                       lxi    d,fcb
Q	SP0127 cd0500                       call   bdos
Q	SP012a 3c                           inr    a         ;err 255 becomes zero
Q	SP012b c23700                       jnz    ready
Q	SP                         ;
Q	SP                         ;        cannot create file, directory full
Q	SP012e 113a00                       lxi    d,nospace
Q	SP0131 cdda00                       call   print
Q	SP0134 c30000                       jmp    reboot    ;back to ccp


Q	SPW                          Loop Back to Ready After Each Command

Q	SP&                         ;
Q	SP                         ready:
Q	SP                         ;        file is ready for processing
Q	SP                         ;
Q	SP0137 cde500                       call   readcom   ;read next command
Q	SP013a 227d00                       shld   ranrec    ;store input record#
Q	SP013d 217f00                       lxi    h,ranovf
Q	SP0140 3600                         mvi    m,0       ;clear high byte if set
Q	SP0142 fe51                         cpi    'Q'       ;quit?
Q	SP0144 c25600                       jnz    notq
Q	SP                         ;
Q	SP                         ;        quit processing, close file
Q	SP0147 0e10                         mvi    c,closef


M                               5-44X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SP0149 115c00                       lxi    d,fcb
Q	SP014c cd0500                       call   bdos
Q	SP014f 3c                           inr    a         ;err 255 becomes 0
Q	SP0150 cab900                       jz     error     ;error message, retry
Q	SP0153 c30000                       jmp    reboot    ;back to ccp
Q	SP                         ;


Q	SPW                          End of Quit Command, Process Write

Q	SP&                         notq:
Q	SP                         ;        not the quit command, random write?
Q	SP0156 fe57                         cpi    'W'
Q	SP0158 c28900                       jnz    notw
Q	SP                         ;
Q	SP                         ;        this is a random write, fill buffer untill cr
Q	SP015b 114d00                       lxi    d,datmsg
Q	SP015e cdda00                       call   print     ;data prompt
Q	SP0161 0e7f                         mvi    c,127     ;up to 127 characters
Q	SP0163 218000                       lxi    h,buff    ;destination
Q	SP                         rloop:   ;read next character to buff
Q	SP0166 c5                           push   b         ;save counter
Q	SP0167 e5                           push   h         ;next destination
Q	SP0168 cdc200                       call   getchr    ;character to a
Q	SP016b e1                           pop    h         ;restore counter
Q	SP016c c1                           pop    b         ;restore next to fill
Q	SP016d fe0d                         cpi    cr        ;end of line?
Q	SP016f ca7800                       jz     erloop
Q	SP                         ;        not end, store character
Q	SP0172 77                           mov    m,a
Q	SP0173 23                           inx    h         ;next to fill
Q	SP0174 0d                           dcr    c         ;counter goes down
Q	SP0175 c26600                       jnz    rloop     ;end of buffer?
Q	SP                         erloop:
Q	SP                         ;        end of read loop, store 00
Q	SP0178 3600                         mvi    m,0
Q	SP                         ;
Q	SP                         ;        write the record to selected record number
Q	SP017a 0e22                         mvi    c,writer
Q	SP017c 115c00                       lxi    d,fcb
Q	SP017c cd0500                       call   bdos
Q	SP0182 b7                           ora    a         ;erro code zero?
Q	SP0183 c2b900                       jnz    error     ;message if not
Q	SP0186 c33700                       jmp    ready     ;for another record
Q	SP                         ;


Q	SPW                          End of Write Command, Process Read

Q	SP&                         notw:
Q	SP                         ;        not a write command, read record?
Q	SP0189 fe52                         cpi    'R'
Q	SP018b c2b900                       jnz    error     ;skip if not
Q	SP                         ;
Q	SP                         ;        read random record


M                               5-45X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SP018e 0e21                         mvi    c,readr
Q	SP0190 115c00                       lxi    d,fcb
Q	SP0193 cd0500                       call   bdos
Q	SP0196 b7                           ora    a         ;return code 00?
Q	SP0197 c2b900                       jnz    error
Q	SP                         ;
Q	SP                         ;        read was successful, write to console
Q	SP019a cdcf00                       call   crlf      ;new line
Q	SP019d 0e80                         mvi    c,128     ;max 128 characters
Q	SP019f 218000                       lxi    h,buff    ;next to get
Q	SP                         wloop:
Q	SP01a2 7e                           mov    a,m       ;next character
Q	SP01a3 23                           inx    h         ;next to get
Q	SP01a4 e67f                         ani    7fh       ;mask parity
Q	SP01a6 ca3700                       jz     ready     ;for another command
Q	SP                                                   ;if 00
Q	SP01a9 c5                           push   b         ;save counter
Q	SP01aa e5                           push   h         ;save next to get
Q	SP01ab fe20                         cpi    ''        ;graphic?
Q	SP01ad d4c800                       cnc    putchr    ;skip output if not
Q	SP01b0 e1                           pop    h
Q	SP01b1 c1                           pop    b
Q	SP01b2 0d                           dcr    c         ;count=count-1
Q	SP01b3 c2a200                       jnz    wloop
Q	SP01b6 c33700                       jmp    ready
































M                               5-46X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SPW                          End of Read Command, All Errors End Up Here

Q	SP&                         ;
Q	SP                         error:
Q	SP01b9 115900                       lxi    d,errmsg
Q	SP01bc cdda00                       call   print
Q	SP01bf c33700                       jmp    ready
Q	SP                         ;


Q	SPW                          Utility Subroutines for Console I/O

Q	SP&                         getchr:
Q	SP                                  ;read next console character to a
Q	SP01c2 0e01                         mvi    c,coninp
Q	SP01c4 cd0500                       call   bdos
Q	SP01c7 c9                           ret
Q	SP                         ;
Q	SP                         putchr:
Q	SP                                  ;write character from a to console
Q	SP01c8 0e02                         mvi    c,conout
Q	SP01ca 5f                           mov    e,a       ;character to send
Q	SP01cb cd0500                       call   bdos      ;send character
Q	SP01ce c9                           ret
Q	SP                         ;
Q	SP                         crlf:
Q	SP                                  ;send carriage return line feed
Q	SP01cf 3e0d                         mvi    a,cr      ;carriage return
Q	SP01d1 cdc800                       call   putchr
Q	SP01d4 3e0a                         mvi    a,lf      ;line feed
Q	SP01d6 cdc800                       call   putchr
Q	SP01d9 c9                           ret
Q	SP                         ;
Q	SP                         print:
Q	SP                                  ;print the buffer addressed by de untill $
Q	SP01da d5                           push   d
Q	SP01db cdcf00                       call   crlf
Q	SP01de d1                           pop    d         ;new line
Q	SP01df 0e09                         mvi    c,pstring
Q	SP01e0 cd0500                       call   bdos      ;print the string
Q	SP01e4 c9                           ret
Q	SP                         ;
Q	SP                         readcom:
Q	SP                                  ;read the next command line to the conbuf
Q	SP01e5 116b00                       lxi    d,prompt
Q	SP01e8 cdda00                       call   print     ;command?
Q	SP01eb 0e0a                         mvi    c,rstring
Q	SP01ed 117a00                       lxi    d,conbuf
Q	SP01f0 cd0500                       call   bdos      ;read command line
Q	SP                         ;        command line is present, scan it
Q	SP01f3 210000                       lxi    h,0       ;start with 0000
Q	SP01f6 117c00                       lxi    d,conlin  ;command line
Q	SP01f9 1a                  readc:   ldax   d         ;next command
Q	SP                                                   ;character
Q	SP01fa 13                           inx    d         ;to next command


M                               5-47X

MCP/M Operating System Manual   5.5   Sample Random Access Program


XQ	SP                                                   ;position
Q	SP01fb b7                           ora    a         ;cannot be end of
Q	SP                                                   ;command
Q	SP01fc c8                           rz
Q	SP                         ;        not zero, numeric?
Q	SP01fd d630                         sui    '0'
Q	SP01ff fe0a                         cpi    10        ;carry if numeric
Q	SP0201 d21300                       jnc    endrd
Q	SP                         ;        add-in next digit
Q	SP0204 29                           dad    h         ;*2
Q	SP0205 4d                           mov    c,l
Q	SP0206 44                           mov    b,h       ;bc = value * 2
Q	SP0207 29                           dad    h         ;*4
Q	SP0208 29                           dad    h         ;*8
Q	SP0209 09                           dad    b         ;*2 + *8 = *10
Q	SP020a 85                           add    l         ;*digit
Q	SP020b 6f                           mov    l,a
Q	SP020c d2f900                       jnc    readc     ;for another char
Q	SP020f24                            inr    h         ;overflow
Q	SP0210 c3f900                       jmp    readc     ;for another char
Q	SP                         endrd:
Q	SP                         ;        end of read, restore value in a
Q	SP0213 c630                         adi    '0'       ;command
Q	SP0215 fe61                         cpi    'a'       ;translate case?
Q	SP0217 d8                           rc
Q	SP                         ;        lower case, mask lower case bits
Q	SP0218 e65f                         ani    101$1111b
Q	SP021a c9                           ret
Q	SP                         ;


Q	SPW                          String Data Area for Console Messages

Q	SP&                         badver:
Q	SP021b 536f79                       db     'sorry, you need cp/m version 2$'
Q	SP                         nospace:
Q	SP023a 4e6f29                       db     'no directory space$'
Q	SP                         datmsg:
Q	SP024d 547970                       db     'type data: $'
Q	SP                         errmsg:
Q	SP0259 457272                       db     'error, try again.$'
Q	SP                         prompt:
Q	SP026b 4e6570                       db     'next command? $'
Q	SP                         ;


Q	SPW                          Fixed and Variable Data Area

Q	SP&027a 21                  conbuf:  db     conlen     ;length of console buffer
Q	SP027b                     consiz:  ds     1          ;resulting size after read
Q	SP027c                     conlin:  ds     32         ;length 32 buffer
Q	SP0021 =                   conlen   equ    $-consiz
Q	SP                         ;
Q	SP029c                              ds     32         ;16 level stack
Q	SP                         stack:
Q	SP02bc                              end

M                               5-48XQ	SP9Q	LSP0

MCP/M Operating System Manual   5.5   Sample Random Access Program


X
Q	SPMMajor improvements could be made to this particular program to
XQ	SPMenhance its operation.  In fact, with some work, this program could
XQ	SPMevolve into a simple data base management system.  One could, for
XQ	SPMexample, assume a standard record size of 128 bytes, consisting to
XQ	SPMarbitrary fields within the record.  A program, called GETKEY, could
XQ	SPMbe developed that first reads a sequential file and extracts a
XQ	SPspecific field defined by the operator.  For example, the command

Q	SPGETKEY NAMES.DAT LASTNAME 10 20

Q	SPMwould cause GETKEY to read the data base file NAMES.DAT and extract
XQ	SPMthe LAST-NAME field from each record, starting in position 10 and
XQ	SPMending at character 20.  GETKEY builds a table in memory consisting
XQ	SPMof each particular LASTNAME field, along with its 16-bit record
XQ	SPMnumber location within the file.  The GETKEY program then sorts this
XQ	SPMlist and writes a new file, called LASTNAME.KEY, which is an
XQ	SPMalphabetical list of LASTNAME fields with their corresponding record
XQ	SPMnumbers.  This list is called an inverted index in information
XQ	SPretrieval parlance.

Q	SPMIf the programmer were to rename the program shown above as
XQ	SPMQUERY and modify it so that it reads a sorted key file into memory,
XQ	SPthe command line might appear as

Q	SPQUERY NAMES.DAT LASTNAME.KEY

Q	SPMInstead of reading a number, the QUERY program reads an alphanumeric
XQ	SPMstring that is a particular key to find in the NAMES.DAT data base.
XQ	SPMBecause the LASTNAME.KEY list is sorted, one can find a particular
XQ	SPMentry rapidly by performing a binary search, similar to looking up a
XQ	SPMname in the telephone book.  Starting at both ends of the list, one
XQ	SPMexamines the entry halfway in between and, if not matched, splits
XQ	SPMeither the upper half or the lower half for the next search.  You
XQ	SPMwill quickly reach the item you are looking for and find the
XQ	SPMcorresponding record number.  You should fetch and display this
XQ	SPMrecord at the console, just as was done in the program shown above.
X
Q	SPMWith some more work, you can allow a fixed grouping size that
XQ	SPMdiffers from the 128-byte record shown above.  This is accomplished
XQ	SPMby keeping track of the record number and the byte offset within the
XQ	SPMrecord.  Knowing the group size, you randomly access the record
XQ	SPMcontaining the proper group, offset to the beginning of the group
XQ	SPMwithin the record read sequentially until the group size has been
XQ	SPexhausted.

Q	SPMFinally, you can improve QUERY considerably by allowing boolean
XQ	SPMexpressions, which compute the set of records that satisfy several
XQ	SPMrelationships, such as a LASTNAME between HARDY and LAUREL and an
XQ	SPMAGE lower than 45.  Display all the records that fit this
XQ	SPMdescription.  Finally, if your lists are getting too big to fit into
XQ	SPmemory, randomly access key files from the disk as well.





M                               5-49X

MCP/M Operating System Manual         5.6  System Function Summary


XQ	SPW5.6  System Function Summary

Q	SPF&unction        Function                Input                Output
Q	SPNumber          Name

Q	SPDecimal     Hex

Q	SP 0           0   System Reset            C = 00H              none
Q	SP 1           1   Console Input           C = 01H              A = ASCII char
Q	SP 2           2   Console Output          E = char             none
Q	SP 3           3   Reader Input                                 A = ASCII char
Q	SP 4           4   Punch Output            E = char             none
Q	SP 5           5   List Output             E = char             none
Q	SP 6           6   Direct Console I/O      C = 06H              A = char or status

Q	SP                                         E = 0FFH (input) or  (no value)
Q	SP                                             0FEH (status) or
Q	SP                                             char (output)
Q	SP 7           7   Get I/O Byte            none                 A = I/O byte
Q	SP                                                               Value
Q	SP 8           8   Set I/O Byte            E = I/O Byte         none
Q	SP 9           9   Print String            DE = Buffer Address  none
Q	SP10           A   Read Console Buffer     DE = Buffer          Console
Q	SP                                                               Characters
Q	SP                                                               in Buffer
Q	SP11           B   Get Console Status      none                 A = 00/non zero
Q	SP12           C   Return Version Number   none                 HL: Version
Q	SP                                                                 Number
Q	SP13           D   Reset Disk System       none                   none
Q	SP14           E   Select Disk             E = Disk Number        none
Q	SP15           F   Open File               DE = FCB Address       FF if not found
Q	SP16          10   Close File              DE = FCB Address       FF if not found
Q	SP17          11   Search For First        DE = FCB Address       A = Directory
Q	SP                                                                  Code
Q	SP18          12   Search For Next         none                   A = Directory
Q	SP                                                                  Code
Q	SP19          13   Delete File             DE = FCB Address       A = none
Q	SP20          14   Read Sequential         DE = FCB Address       A = Error Code
Q	SP21          15   Write Sequential        DE = FCB Address       A = Error Code
Q	SP22          16   Make File               DE = FCB Address       A = FF if no DIR
Q	SP                                                                  Space
Q	SP23          17   Rename File             DE = FCB Address       A = FF in not
Q	SP                                                                  found
Q	SP24          18   Return Login Vector     none                   HL = Login
Q	SP                                                                   Vector*
Q	SP25          19   Return Current Disk     none                   A = Current Disk
Q	SP                                                                  Number
Q	SP26          1A   Set DMA Address         DE = DMA Address       none
Q	SP27          1B   Get ADDR (ALLOC)        none                   HL = ALLOC
Q	SP                                                                   Address*
Q	SP28          1C   Write Protect Disk      none                   none
Q	SP29          1D   Get Read/only Vector    none                   HL = R/O
Q	SP                                                                 Vector Value*
Q	SP30          1E   Set File Attributes     DE = FCB Address       A = none
Q	SP31          1F   Get ADDR (Disk Parms)   none                   HL = DPB


M                               5-50X

MCP/M Operating System Manual         5.6  System Function Summary


XQ	SP                                                                 Address
Q	SP32          20   Set/Get User Code       E = 0FFH for Get       User Number
Q	SP                                         E = 00 to 0FH for Set
Q	SP33          21   Read Random             DE = FCB Address       A = Error Code
Q	SP34          22   Write Random            DE = FCB Address       A = Error Code
Q	SP35          23   Compute File Size       DE = FCB Address       r0, r1, r2
Q	SP36          24   Set Random Record       DE = FCB Address       r0, r1, r2
Q	SP37          25   Reset Drive             DE = Drive Vector      A = 0
Q	SP38          26   Access Drive            not supported
Q	SP39          27   Free Drive              not supported
Q	SP40          28   Write Random with Fill  DE = FCB               A = Error Code




Q	SP*Note that A = L, and B = H upon return.


=End of Section 5






































M                               5-51X




X=WSection 6

=&WCP/M 2 Alteration



Q	SP&W6.1  Introduction

Q	SPMT&he standard CP/M system assumes operation on an Intel Model
XQ	SPM800 microcomputer development system , but is designed so you can
XQ	SPMalter a specific set of subroutines that define the hardware
XQ	SPoperating environment.

Q	SPMAlthough standard CP/M 2 is configured for single-density
XQ	SPMfloppy disks, field-alteration features allow adaptation to a wide
XQ	SPMvariety of disk subsystems from single-drive minidisks to high-
XQ	SPMcapacity, hard disk systems.  To simplify the following adaptation
XQ	SPMprocess, it is assumed that CP/M 2 is first configured for single-
XQ	SPMdensity floppy disks where minimal editing and debugging tools are
XQ	SPMavailable.  If an earlier version of CP/M is available, the
XQ	SPMcustomizing process is eased considerably.  In this latter case, you
XQ	SPMmight want to review the system generation process and skip to later
XQ	SPMsections that discuss system alteration for nonstandard disk
XQ	SPsystems.

Q	SPMTo achieve device independence, CP/M is separated into three
XQ	SPdistinct modules:

Q	SPo BIOS is the Basic I/O System, which is environment dependent.

Q	SPo MBDOS is the Basic Disk Operating System, which is not dependent
XQ	SPupon the hardware configuration.

Q	SPo CCP is the Console Command Processor, which uses the BDOS.

Q	SPMOf these modules, only the BIOS is dependent upon the
XQ	SPMparticular hardware.  You can patch the distribution version of CP/M
XQ	SPMto provide a new BIOS that provides a customized interface between
XQ	SPMthe remaining CP/M modules and the hardware system.  This document
XQ	SPMprovides a step-by-step procedure for patching a new BIOS into CP/M.
X
Q	SPMAll disk-dependent portions of CP/M 2 are placed into a BIOS, a
XQ	SPMresident disk parameter block, which is either hand coded or
XQ	SPMproduced automatically using the disk definition macro library
XQ	SPMprovided with CP/M 2.  The end user need only specify the maximum
XQ	SPMnumber of active disks, the starting and ending sector numbers, the
XQ	SPMdata allocation size, the maximum extent of the logical disk,
XQ	SPMdirectory size information, and reserved track values.  The macros
XQ	SPMuse this information to generate the appropriate tables and table
XQ	SPMreferences for use during CP/M 2 operation.  Deblocking information
XQ	SPMis provided, which aids in assembly or disassembly of sector sizes
XQ	SPMthat are multiples of the fundamental 128-byte data unit, and the
XQ	SPMsystem alteration manual includes general purpose subroutines that
XQ	SPMuse the deblocking information to take advantage of larger sector
XQ	SPMsizes.  Use of these subroutines, together with the table-drive data
XQ	SPMaccess algorithms, makes CP/M 2 a universal data management system.
X

M                               6-1X

MCP/M Operating System Manual                    6.1  Introduction


XQ	SPMFile expansion is achieved by providing up to 512 logical file
XQ	SPMextents, where each logical extent contains 16K bytes of data.  CP/M
XQ	SPM2 is structured, however, so that as much as 128K bytes of data are
XQ	SPMaddressed by a single physical extent, corresponding to a single
XQ	SPMdirectory entry, maintaining compatibility with previous versions
XQ	SPwhile taking advantage of directory space.

Q	SPMIf CP/M is being tailored to a computer system for the first
XQ	SPMtime, the new BIOS requires some simple software development and
XQ	SPMtesting.  The standard BIOS is listed in Appendix A and can be used
XQ	SPMas a model for the customized package.  A skeletal version of the
XQ	SPMBIOS given in Appendix B can serve as the basis for a modified BIOS.
X
Q	SPMIn addition to the BIOS, you must write a simple memory loader,
XQ	SPMcalled GETSYS, which brings the operating system into memory.  To
XQ	SPMpatch the new BIOS into CP/M, you must write the reverse of GETSYS,
XQ	SPMcalled PUTSYS, which places an altered version of CP/M back onto the
XQ	SPMdisk.  PUTSYS can be derived from GETSYS by changing the disk read
XQ	SPMcommands into disk write commands.  Sample skeletal GETSYS and
XQ	SPMPUTSYS programs are described in Section 6.4 and listed in Appendix
XQ	SPC.

Q	SPMTo make the CP/M system load automatically, you must also
XQ	SPMsupply a cold start loader, similar to the one provided with CP/M,
XQ	SPMlisted in Appendixes A and D.  A skeletal form of a cold start
XQ	SPMloader is given in Appendix E, which serves as a model for the
XQ	SPloader.


Q	SPW6.2  First-level System Regeneration

Q	SPMT&he procedure to patch the CP/M system is given below.  Address
XQ	SPMreferences in each step are shown with H denoting the hexadecimal
XQ	SPMradix, and are given for a 20K CP/M system.  For larger CP/M
XQ	SPMsystems, a bias is added to each address that is shown with a +b
XQ	SPMfollowing it, where b is equal to the memory size-20K.  Values for b
XQ	SPin various standard memory sizes are listed in Table 6-1.


Q	SPW             Table 6-1.  Standard Memory Size Values

Q	SP          Memory Size                Value

Q	SP24K:         b = 24K - 20K =  4K = 1000H

Q	SP32K:         b = 32K - 20K = 12K = 3000H

Q	SP40K:         b = 40K - 20K = 20K = 5000H

Q	SP48K:         b = 48K - 20K = 28K = 7000H

Q	SP56K:         b = 56K - 20K = 36K = 9000H

Q	SP62K:         b = 62K - 20K = 42K = A800H

Q	SP64K:         b = 64K - 20K = 44K = B000H


M                               6-2X

MCP/M Operating System Manual        6.2  First-level Regeneration


XQ	SPMNote that the standard distribution version of CP/M is set for
XQ	SPMoperation within a 20K CP/M system. Therefore, you must first bring
XQ	SPMup the 20K CP/M system, then configure it for actual memory size
XQ	SP(see Section 6.3).

Q	SPFollow these steps to patch your CP/M system:


Q	SP1) MRead Section 6.4 and write a GETSYS program that reads the
XQ	SPMfirst two tracks of a disk into memory.  The program from
XQ	SPMthe disk must be loaded starting at location 3380H.  GETSYS
XQ	SPMis coded to start at location 100H (base of the TPA) as
XQ	SPshown in Appendix C.

Q	SP2) MTest the GETSYS program by reading a blank disk into memory,
XQ	SPMand check to see that the data has been read properly and
XQ	SPMthat the disk has not been altered in any way by the GETSYS
XQ	SPprogram.

Q	SP3) MRun the GETSYS program using an initialized CP/M disk to see
XQ	SPMif GETSYS loads CP/M starting at 3380H (the operating
XQ	SPsystem actually starts 128 bytes later at 3400H).

Q	SP4) MRead Section 6.4 and write the PUTSYS program.  This writes
XQ	SPMmemory starting at 3380H back onto the first two tracks of
XQ	SPMthe disk.  The PUTSYS program should be located at 200H, as
XQ	SPshown in Appendix C.

Q	SP5) MTest the PUTSYS program using a blank, uninitialized disk by
XQ	SPMwriting a portion of memory to the first two tracks; clear
XQ	SPMmemory and read it back using GETSYS.  Test PUTSYS
XQ	SPMcompletely, because this program will be used to alter CP/M
XQ	SPon disk.

Q	SP6) MStudy Sections 6.5, 6.6, and 6.7 along with the distribution
XQ	SPMversion of the BIOS given in Appendix A and write a simple
XQ	SPMversion that performs a similar function for the customized
XQ	SPMenvironment.  Use the program given in Appendix B as a
XQ	SPMmodel.  Call this new BIOS by name CBIOS (customized BIOS).
XQ	SPMImplement only the primitive disk operations on a single
XQ	SPMdrive and simple console input/output functions in this
XQ	SPphase.

Q	SP7) MTest CBIOS completely to ensure that it properly performs
XQ	SPMconsole character I/O and disk reads and writes.  Be
XQ	SPMcareful to ensure that no disk write operations occur
XQ	SPMduring read operations and check that the proper track and
XQ	SPMsectors are addressed on all reads and writes.  Failure to
XQ	SPMmake these checks might cause destruction of the
XQ	SPinitialized CP/M system after it is patched.

Q	SP8) MReferring to Table 6-3 in Section 6.5, note that the BIOS is
XQ	SPMplaced between locations 4A00H and 4FFFH.  Read the CP/M
XQ	SPMsystem using GETSYS and replace the BIOS segment by the
XQ	SPMCBIOS developed in step 6 and tested in step 7.  This
XQ	SPreplacement is done in memory.


M                               6-3X

MCP/M Operating System Manual        6.2  First-level Regeneration


XQ	SP9) MUse PUTSYS to place the patched memory image of CP/M onto
XQ	SPthe first two tracks of a blank disk for testing.

Q	SP10) MUse GETSYS to bring the copied memory image from the test
XQ	SPMdisk back into memory at 3380H and check to ensure that it
XQ	SPMhas loaded back properly (clear memory, if possible, before
XQ	SPMthe load).  Upon successful load, branch to the cold start
XQ	SPMcode at location 4A00H.  The cold start routine initializes
XQ	SPMpage zero, then jumps to the CCP at location 3400H, which
XQ	SPMcalls the BDOS, which calls the CBIOS.  The CCP asks the
XQ	SPMCBIOS to read sixteen sectors on track 2, and CP/M types
XQ	SPA>, the system prompt.

Q	SPMIf difficulties are encountered, use whatever debug
XQ	SPMfacilities are available to trace and breakpoint the CBIOS.
X
Q	SP11) MUpon completion of step 10, CP/M has prompted the console
XQ	SPMfor a command input.  To test the disk write operation,
XQ	SPtype

Q	SPSAVE 1 X.COM

Q	SPMAll commands must be followed by a carriage return.  CP/M
XQ	SPresponds with another prompt after several disk accesses:

Q	SPA>

Q	SPIf it does not, debug the disk write functions and retry.

Q	SP12) Test the directory command by typing

Q	SPDIR

Q	SPCP/M responds with

Q	SPA:X     COM

Q	SP13) Test the erase command by typing

Q	SPERA X.COM

Q	SPMCP/M responds with the A prompt.  This is now an
XQ	SPMoperational system that only requires a bootstrap loader to
XQ	SPfunction completely.

Q	SP14) MWrite a bootstrap loader that is similar to GETSYS and place
XQ	SPMit on track 0, sector 1, using PUTSYS (again using the test
XQ	SPMdisk, not the distribution disk).  See Sections 6.5 and 6.8
XQ	SPfor more information on the bootstrap operation.

Q	SP15) MRetest the new test disk with the bootstrap loader installed
XQ	SPMby executing steps 11, 12, and 13.  Upon completion of
XQ	SPMthese tests, type a CTRL-C.  The system executes a warm
XQ	SPstart, which reboots the system, and types the A prompt.



M                               6-4X

MCP/M Operating System Manual        6.2  First-level Regeneration


XQ	SP16) MAt this point, there is probably a good version of the
XQ	SPMcustomized CP/M system on the test disk.  Use GETSYS to
XQ	SPMload CP/M from the test disk.  Remove the test disk, place
XQ	SPMthe distribution disk, or a legal copy, into the drive, and
XQ	SPMuse PUTSYS to replace the distribution version with the
XQ	SPMcustomized version.  Do not make this replacement if you
XQ	SPMare unsure of the patch because this step destroys the
XQ	SPsystem that was obtained from Digital Research.

Q	SP17) Load the modified CP/M system and test it by typing

Q	SPDIR

Q	SPMCP/M responds with a list of files that are provided on the
XQ	SPMinitialized disk.  The file DDT.COM is the memory image for
XQ	SPMthe debugger.  Note that from now on, you must always
XQ	SPMreboot the CP/M system (CTRL-C is sufficient) when the disk
XQ	SPMis removed and replaced by another disk, unless the new
XQ	SPdisk is to be Read-Only.

Q	SP18) Load and test the debugger by typing

Q	SPDDT

Q	SPSee Chapter 4 for operating procedures.

Q	SP19) MBefore making further CBIOS modifications, practice using
XQ	SPMthe editor (see Chapter 2), and assembler (see Chapter 3).
XQ	SPMRecode and test the GETSYS, PUTSYS, and CBIOS programs
XQ	SPMusing ED, ASM, and DDT.  Code and test a COPY program that
XQ	SPMdoes a sector-to-sector copy from one disk to another to
XQ	SPMobtain back-up copies of the original disk.  Read the CP/M
XQ	SPMLicensing Agreement specifying legal responsibilities when
XQ	SPMcopying the CP/M system.  Place the following copyright
XQ	SPnotice:

Q	SPCopyright (c), 1983
Q	SP Digital Research

Q	SPon each copy that is made with the COPY program.

Q	SP20) MModify the CBIOS to include the extra functions for punches,
XQ	SPMreaders, and sign-on messages, and add the facilities for
XQ	SPMadditional disk drives, if desired.  These changes can be
XQ	SPMmade with the GETSYS and PUTSYS programs or by referring to
XQ	SPthe regeneration process in Section 6.3.


Q	SPMYou should now have a good copy of the customized CP/M system.
XQ	SPMAlthough the CBIOS portion of CP/M belongs to the user, the modified
XQ	SPversion cannot be legally copied.

Q	SPMIt should be noted that the system remains file-compatible with
XQ	SPMall other CP/M systems (assuming media compatibility) which allows
XQ	SPtransfer of nonproprietary software between CP/M users.


M                               6-5X

MCP/M Operating System Manual  6.3  Second-level System Generation


XQ	SPW6.3  Second-level System Generation

Q	SPMO&nce the system is running, the next step is to configure CP/M
XQ	SPMfor the desired memory size.  Usually, a memory image is first
XQ	SPMproduced with the MOVCPM program (system relocator) and then placed
XQ	SPMinto a named disk file.  The disk file can then be loaded, examined,
XQ	SPMpatched, and replaced using the debugger and the system generation
XQ	SPprogram (refer to Chapter 1).

Q	SPMThe CBIOS and BOOT are modified using ED and assembled using
XQ	SPMASM, producing files called CBIOS.HEX and BOOT.HEX, which contain
XQ	SPthe code for CBIOS and BOOT in Intel hex format.

Q	SPMTo get the memory image of CP/M into the TPA configured for the
XQ	SPdesired memory size, type the command:

Q	SPMOVCPM xx*

Q	SPMwhere xx is the memory size in decimal K bytes, for example, 32 for
XQ	SP32K.  The response is as follows:

Q	SPCONSTRUCTING xxK CP/M VERS 2.0

Q	SPREADY FOR "SYSGEN" OR

Q	SP"SAVE 34 CPMxx.COM"

Q	SPMAn image of CP/M in the TPA is configured for the requested
XQ	SPMmemory size.  The memory image is at location 0900H through 227FH,
XQ	SPMthat is, the BOOT is at 0900H, the CCP is at 980H, the BDOS starts
XQ	SPMat 1180H, and the BIOS is at 1F80H.  Note that the memory image has
XQ	SPMthe standard Model 800 BIOS and BOOT on it.  It is now necessary to
XQ	SPMsave the memory image in a file so that you can patch the CBIOS and
XQ	SPCBOOT into it:

Q	SPSAVE 34 CPMxx.COM

Q	SPMThe memory image created by the MOVCPM program is offset by a
XQ	SPMnegative bias so that it loads into the free area of the TPA, and
XQ	SPMthus does not interfere with the operation of CP/M in higher memory.
XQ	SPMThis memory image can be subsequently loaded under DDT and examined
XQ	SPMor changed in preparation for a new generation of the system.  DDT
XQ	SPis loaded with the memory image by typing:

Q	SPDDT CPMxx.COM       Loads DDT, then reads the CP/M image.

Q	SPDDT should respond with the following:

Q	SPNEXT PC
Q	SP2300 0100
Q	SP-                                          The DDT prompt

Q	SPMYou can then give the display and disassembly commands to examine
XQ	SPMportions of the memory image between 900H and 227FH.  Note, however,
XQ	SPMthat to find any particular address within the memory image, you


M                               6-M6XX

MCP/M Operating System Manual  6.3  Second-level System Generation


XQ	SPMmust apply the negative bias to the CP/M address to find the actual
XQ	SPMaddress.  Track 00, sector 01, is loaded to location 900H (the user
XQ	SPMshould find the cold start loader at 900H to 97FH); track 00, sector
XQ	SPM02, is loaded into 980H (this is the base of the CCP); and so on
XQ	SPMthrough the entire CP/M system load.  In a 20K system, for example,
XQ	SPMthe CCP resides at the CP/M address 3400H, but is placed into memory
XQ	SPMat 980H by the SYSGEN program.  Thus, the negative bias, denoted by
XQ	SPn, satisfies

Q	SP3400H + n = 980H, or n =980H - 3400H

Q	SPMAssuming two's complement arithmetic, n = D580H, which can be
XQ	SPchecked by

Q	SP3400H + D580H = 10980H = 0980H (ignoring high-order
Q	SP                                       overflow).

Q	SPNote that for larger systems, n satisfies

Q	SP(3400H+b) + n = 980H, or
Q	SPn = 980H - (3400H + b), or
Q	SPn = D580H - b

Q	SPThe value of n for common CP/M systems is given below.


Q	SPW           Table 6-2.  Common Values for CP/M Systems

Q	SP         Memory Size      BIAS b      Negative Offset n

Q	SP20K          0000H     D580H - 0000H = D580H
Q	SP24K          1000H     D580H - 1000H = C580H
Q	SP32K          3000H     D580H - 3000H = A580H
Q	SP40K          5000H     D580H - 5000H = 8580H
Q	SP48K          7000H     D580H - 7000H = 6580H
Q	SP56K          9000H     D580H - 9000H = 4580H
Q	SP62K          A800H     D580H - A800H = 2D80H
Q	SP64K          B000H     D580H - B000H = 2580H


Q	SPMIf you want to locate the address x within the memory image
XQ	SPloaded under DDT in a 20K system, first type

Q	SPHx,n            Hexadecimal sum and difference

Q	SPMand DDT responds with the value of x+n (sum) and x-n (difference).
XQ	SPMThe first number printed by DDT is the actual memory address in the
XQ	SPMimage where the data or code is located.  For example, the following
XQ	SPDDT command:

Q	SPH3400,D580

Q	SPMproduces 980H as the sum, which is where the CCP is located in the
XQ	SPmemory image under DDT.



M                               6-7X

MCP/M Operating System Manual  6.3  Second-level System Generation


XQ	SPMType the L command to disassemble portions of the BIOS located
XQ	SPMat (4A00H+b)-n, which, when one uses the H command, produces an
XQ	SPMactual address of 1F80H.  The disassembly command would thus be as
XQ	SPfollows:

Q	SPL1F80

Q	SPMIt is now necessary to patch in the CBOOT and CBIOS routines.  The
XQ	SPMBOOT resides at location 0900H in the memory image.  If the actual
XQ	SPMload address is n, then to calculate the bias (m), type the command:
X
Q	SPMH900,n          Subtract load address from target address.
X
Q	SPMThe second number typed by DDT in response to the command is
XQ	SPMthe desired bias (m).  For example, if the BOOT executes at 0080H,
XQ	SPthe command

Q	SPH900,80

Q	SPproduces

Q	SP0980 0880       Sum and difference in hex.

Q	SPMTherefore, the bias m would be 0880H.  To read-in the BOOT, give the
XQ	SPcommand:

Q	SPICBOOT.HEX      Input file CBOOT.HEX

Q	SPThen

Q	SPRm              Read CBOOT with a bias of m (=900H-n).

Q	SPExamine the CBOOT with

Q	SPL900

Q	SPMYou are now ready to replace the CBIOS by examining the area at
XQ	SPM1F80H, where the original version of the CBIOS resides, and then
XQ	SPtyping

Q	SPICBIOS.HEX      Ready the hex file for loading.

Q	SPMAssume that the CBIOS is being integrated into a 20K CP/M
XQ	SPMsystem and thus originates at location 4A00H.  To locate the CBIOS
XQ	SPMproperly in the memory image under DDT, you must apply the negative
XQ	SPMbias n for a 20K system when loading the hex file.  This is
XQ	SPaccomplished by typing

Q	SPRD580           Read the file with bias D580H.

Q	SPMUpon completion of the read, reexamine the area where the CBIOS has
XQ	SPMbeen loaded (use an L1F80 command) to ensure that it is properly
XQ	SPMloaded.  When you are satisfied that the change has been made,
XQ	SPreturn from DDT using a CTRL-C or, G0 command.



M                               6-8X

MCP/M Operating System Manual  6.3  Second-level System Generation


XQ	SPMSYSGEN is used to replace the patched memory image back onto a
XQ	SPMdisk (you use a test disk until sure of the patch) as shown in the
XQ	SPfollowing interaction:


Q	SPSYSGEN                    Start the SYSGEN program.

Q	SPSYSGEN VERSION 2.0        Sign-on message from SYSGEN.

Q	SPSOURCE DRIVE NAME         Respond with a carriage return
Q	SP(OR RETURN TO SKIP)       to skip the CP/M read operation
Q	SP                          because the system is already
Q	SP                          in memory.

Q	SPDESTINATION DRIVE NAME    Respond with B to write the new
Q	SP(OR RETURN TO REBOOT)     system to the disk in drive B.


Q	SPDESTINATION ON B,         Place a scratch disk in drive
Q	SPTHEN TYPE RETURN          B, then press RETURN.

Q	SPFUNCTION COMPLETE
Q	SPDESTINATION DRIVE NAME
Q	SP(OR RETURN TO REBOOT)


Q	SPMPlace the scratch disk in drive A, then perform a cold start to
XQ	SPbring up the newly-configured CP/M system.

Q	SPMThe new CP/M system is then tested and the Digital Research
XQ	SPMcopyright notice is placed on the disk, as specified in the
XQ	SPLicensing Agreement:

Q	SPCopyright (c), 1979
Q	SP Digital Research


Q	SPW6.4  Sample GETSYS and PUTSYS Programs

Q	SPMT&he following program provides a framework for the GETSYS and
XQ	SPMPUTSYS programs referenced in Sections 6.1 and 6.2.  To read and
XQ	SPMwrite the specific sectors, you must insert the READSEC and WRITESEC
XQ	SPsubroutines.














M                               6-9X

MCP/M Operating System Manual        6.4  Sample GETSYS and PUTSYS


XQ	SP;  GETSYS PROGRAM -- READ TRACKS 0 AND 1 TO MEMORY AT 3380H
Q	SP;  REGISTER                    USE

Q	SP;         A               (SCRATCH REGISTER)

Q	SP;         B               TRACK COUNT (0, 1)

Q	SP;         C               SECTOR COUNT (1,2,...,26)

Q	SP;         DE              (SCRATCH REGISTER PAIR)

Q	SP;         HL              LOAD ADDRESS

Q	SP;         SP              SET TO STACK ADDRESS

Q	SP;
Q	SPSTART:    LXI  SP,3380H   ;SET STACK POINTER TO SCRATCH
Q	SP                          ;AREA
Q	SP          LXI  H,3380H    ;SET BASE LOAD ADDRESS
Q	SP          MVI  B,0        ;START WITH TRACK 0
Q	SPRDTRK:                    ;READ NEXT TRACK (INITIALLY 0)
Q	SP          MVI  C,1        ;READ STARTING WITH SECTOR 1

Q	SPRDSEC:                    ;READ NEXT SECTOR
Q	SP          CALL READSEC    ;USER-SUPPLIED SUBROUTINE
Q	SP          LXI  D,128      ;MOVE LOAD ADDRESS TO NEXT 1/2
Q	SP                          ;PAGE
Q	SP          DAD  D          ;HL = HL + 128
Q	SP          INR  C          ;SECTOR = SECTOR + 1
Q	SP          MOV  A,C        ;CHECK FOR END OF TRACK
Q	SP          CPI  27
Q	SP          JC   RDSEC      ;CARRY GENERATED IF SECTOR <27

Q	SP;
Q	SP;  ARRIVE HERE AT END OF TRACK, MOVE TO NEXT TRACK
Q	SP          INR  B
Q	SP          MOV  A,B        ;TEST FOR LAST TRACK
Q	SP          CPI  2
Q	SP          JC   RDTRK      ;CARRY GENERATED IF TRACK <2

Q	SP;
Q	SP;  USER-SUPPLIED SUBROUTINE TO READ THE DISK
Q	SPREADSEC:
Q	SP;  ENTER WITH TRACK NUMBER IN REGISTER B,
Q	SP          SECTOR NUMBER IN REGISTER C, AND

Q	SP;         ADDRESS TO FILL IN HL

Q	SP;
Q	SP          PUSH B          ;SAVE B AND C REGISTERS
Q	SP          PUSH H          ;SAVE HL REGISTERS


Q	SPW                  Listing 6-1.  GETSYS Program



M                               6-10X

MCP/M Operating System Manual        6.4  Sample GETSYS and PUTSYS


XQ	SP          .................................................
Q	SP          perform disk read at this point, branch to
Q	SP          label START if an error occurs
Q	SP          .................................................
Q	SP          POP H           ;RECOVER HL
Q	SP          POP B           ;RECOVER B AND C REGISTERS
Q	SP          RET             ;BACK TO MAIN PROGRAM

Q	SP          END START


Q	SPW                    Listing 6-1.  (continued)



Q	SPMThis program is assembled and listed in Appendix B for
XQ	SPMreference purposes, with an assumed origin of 100H.  The hexadecimal
XQ	SPMoperation codes that are listed on the left might be useful if the
XQ	SPprogram has to be entered through the panel switches.

Q	SPMThe PUTSYS program can be constructed from GETSYS by changing
XQ	SPMonly a few operations in the GETSYS program given above, as shown in
XQ	SPMAppendix C.  The register pair HL becomes the dump address, next
XQ	SPMaddress to write, and operations on these registers do not change
XQ	SPMwithin the program.  The READSEC subroutine is replaced by a
XQ	SPMWRITESEC subroutine, which performs the opposite function; data from
XQ	SPMaddress HL is written to the track given by register B and sector
XQ	SPMgiven by register C.  It is often useful to combine GETSYS and
XQ	SPMPUTSYS into a single program during the test and development phase,
XQ	SPas shown in Appendix C.


Q	SPW6.5  Disk Organization

Q	SPMT&he sector allocation for the standard distribution version of
XQ	SPMCP/M is given here for reference purposes.  The first sector
XQ	SPMcontains an optional software boot section (see the table on the
XQ	SPMfollowing page.   Disk controllers are often set up to bring track
XQ	SPM0, sector 1, into memory at a specific location, often location
XQ	SPM0000H.  The program in this sector, called BOOT, has the
XQ	SPMresponsibility of bringing the remaining sectors into memory
XQ	SPMstarting at location 3400H+b.  If the controller does not have a
XQ	SPMbuilt-in sector load, the program in track 0, sector 1 can be
XQ	SPMignored.  In this case, load the program from track 0, sector 2, to
XQ	SPlocation 3400H+b.

Q	SPMAs an example, the Intel Model 800 hardware cold start loader
XQ	SPMbrings track 0, sector 1, into absolute address 3000H.  Upon loading
XQ	SPMthis sector, control transfers to location 3000H, where the
XQ	SPMbootstrap operation commences by loading the remainder of track 0
XQ	SPMand all of track 1 into memory, starting at 3400H+b.  Note that this
XQ	SPMbootstrap loader is of little use in a non-microcomputer development
XQ	SPMsystem environment, although it is useful to examine it because some
XQ	SPMof the boot actions will have to be duplicated in the user's cold
XQ	SPstart loader.


M                               6-11X

MCP/M Operating System Manual               6.5  Disk Organization


XQ	SPW             Table 6-3.  CP/M Disk Sector Allocation

Q	SPTrack #    Sector   Page#   Memory Address    CP/M Module name

Q	SP  00         01             (boot address)    Cold Start Loader
Q	SP  00         02      00        3400H+b               CCP
Q	SP  '          03      '         3480H+b                '
Q	SP  '          04      01        3500H+b                '
Q	SP  '          05      '         3580H+b                '
Q	SP  '          06      02        3600H+b                '
Q	SP  '          07      '         3680H+b                '
Q	SP  '          08      03        3700H+b                '
Q	SP  '          09      '         3780H+b                '
Q	SP  '          10      04        3800H+b                '
Q	SP  '          11      '         3880H+b                '
Q	SP  '          12      05        3900H+b                '
Q	SP  '          13      '         3980H+b                '
Q	SP  '          14      06        3A00H+b                '
Q	SP  '          15      '         3A80H+b                '
Q	SP  '          16      07        3B00H+b                '
Q	SP  00         17      '         3B80H+b               CCP
Q	SP  00         18      08        3C00H+b              BDOS
Q	SP  '          19      '         3C80H+b                '
Q	SP  '          20      09        3D00H+b                '
Q	SP  '          21      '         3D80H+b                '
Q	SP  '          22      10        3E00H+b                '
Q	SP  '          23      '         3E80H+b                '
Q	SP  '          24      11        3F00H+b                '
Q	SP  '          25      '         3F80H+b                '
Q	SP  '          26      12        4000H+b                '
Q	SP  01         01      '         4080H+b                '
Q	SP  '          02      13        4100H+b                '
Q	SP  '          03      '         4180H+B                '
Q	SP  '          04      14        4200H+b                '
Q	SP  '          05      '         4280H+b                '
Q	SP  '          06      15        4300H+b                '
Q	SP  '          07      '         4380H+b                '
Q	SP  '          08      16        4400H+b                '
Q	SP  '          09      '         4480H+b                '
Q	SP  '          10      17        4500H+b                '
Q	SP  '          11      '         4580H+b                '
Q	SP  '          12      18        4600H+b                '
Q	SP  '          13      '         4680H+b                '
Q	SP  '          14      19        4700H+b                '
Q	SP  '          15      '         4780H+b                '
Q	SP  '          16      20        4800H+b                '
Q	SP  '          17      '         4880H+b                '
Q	SP  '          18      21        4900H+b                '
Q	SP  01         19      '         4900H+b              BDOS
Q	SP  07         20      22        4A00H+b              BIOS
Q	SP  '          21      '         4A80H+b                '
Q	SP  '          22      23        4B00H+b                '
Q	SP  '          23      '         4B80H+b                '
Q	SP  '          24      24        4C00H+b                '
Q	SP  01         25      '         4C80H+b              BIOS
Q	SP  01         26      25        4D00H+b              BIOS
Q	SP02-76      01-26                            (directory and data)

M                               6-12X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW6.6  The BIOS Entry Points

Q	SPMT&he entry points into the BIOS from the cold start loader and
XQ	SPMBDOS are detailed below.  Entry to the BIOS is through a jump vector
XQ	SPMlocated at 4A00H+b, as shown below.  See Appendixes A and B.  The
XQ	SPMjump vector is a sequence of 17 jump instructions that send program
XQ	SPMcontrol to the individual BIOS subroutines.  The BIOS subroutines
XQ	SPMmight be empty for certain functions (they might contain a single
XQ	SPMRET operation) during reconfiguration of CP/M, but the entries must
XQ	SPbe present in the jump vector.

Q	SPMThe jump vector at 4A00H+b takes the form shown below, where
XQ	SPthe individual jump addresses are given to the left:


Q	SP4A00H+b      JMP BOOT       ;ARRIVE HERE FROM COLD
Q	SP                             START LOAD

Q	SP4A03H+b      JMP WBOOT      ;ARRIVE HERE FOR WARM START

Q	SP4A06H+b      JMP CONST      ;CHECK FOR CONSOLE CHAR
Q	SP                             READY

Q	SP4A09H+b      JMP CONIN      ;READ CONSOLE CHARACTER IN

Q	SP4A0CH+b      JMP CONOUT     ;WRITE CONSOLE CHARACTER
Q	SP                             OUT

Q	SP4A0FH+b      JMP LIST       ;WRITE LISTING CHARACTER OUT

Q	SP4A12H+b      JMP PUNCH      ;WRITE CHARACTER TO PUNCH
Q	SP                             DEVICE

Q	SP4A15H+b      JMP READER     ;READ READER DEVICE

Q	SP4A18H+b      JMP HOME       ;MOVE TO TRACK 00 ON
Q	SP                             SELECTED DISK

Q	SP4A1BH+b      JMP SELDSK     ;SELECT DISK DRIVE

Q	SP4A1EH+b      JMP SETTRK     ;SET TRACK NUMBER

Q	SP4A21H+b      JMP SETSEC     ;SET SECTOR NUMBER

Q	SP4A24H+b      JMP SETDMA     ;SET DMA ADDRESS

Q	SP4A27H+b      JMP READ       ;READ SELECTED SECTOR

Q	SP4A2AH+b      JMP WRITE      ;WRITE SELECTED SECTOR

Q	SP4A2DH+b      JMP LISTST     ;RETURN LIST STATUS

Q	SP4A30H+b      JMP SECTRAN    ;SECTOR TRANSLATE
Q	SP                             SUBROUTINE


Q	SPW                 Listing 6-2.  BIOS Entry Points

M                               6-13X

MCP/M Operating System Manual               6.6  BIOS Entry Points

X
Q	SPMEach jump address corresponds to a particular subroutine that
XQ	SPMperforms the specific function, as outlined below.  There are three
XQ	SPMmajor divisions in the jump table:  the system reinitialization,
XQ	SPMwhich results from calls on BOOT and WBOOT; simple character I/O,
XQ	SPMperformed by calls on CONST, CONIN, CONOUT, LIST, PUNCH, READER, and
XQ	SPMLISTST; and disk I/O, performed by calls on HOME, SELDSK, SETTRK,
XQ	SPSETSEC, SETDMA, READ, WRITE, and SECTRAN.

Q	SPMAll simple character I/O operations are assumed to be performed
XQ	SPMin ASCII, upper- and lower-case, with high-order (parity bit) set to
XQ	SPMzero.  An end-of-file condition for an input device is given by an
XQ	SPMASCII CTRL-Z (1AH).  Peripheral devices are seen by CP/M as logical
XQ	SPdevices and are assigned to physical devices within the BIOS.

Q	SPMTo operate, the BDOS needs only the CONST, CONIN, and CONOUT
XQ	SPMsubroutines.  LIST, PUNCH, and READER can be used by PIP, but not
XQ	SPMthe BDOS.  Further, the LISTST entry is currently used only by
XQ	SPMDESPOOL, the print spooling utility.  Thus, the initial version of
XQ	SPCBIOS can have empty subroutines for the remaining ASCII devices.

Q	SPMThe following list describes the characteristics of each
XQ	SPdevice.


Q	SPo MCONSOLE is the principal interactive console that communicates
XQ	SPMwith the operator and it is accessed through CONST, CONIN, and
XQ	SPMCONOUT.  Typically, the CONSOLE is a device such as a CRT or
XQ	SPteletype.

Q	SPo MLIST is the principal listing device.  If it exists on the
XQ	SPMuser's system, it is usually a hard-copy device, such as a
XQ	SPprinter or teletype.

Q	SPo MPUNCH is the principal tape punching device.  If it exists, it
XQ	SPis normally a high-speed paper tape punch or teletype.

Q	SPo MREADER is the principal tape reading device, such as a simple
XQ	SPoptical reader or teletype.


Q	SPMA single peripheral can be assigned as the LIST, PUNCH, and
XQ	SPMREADER device simultaneously.  If no peripheral device is assigned
XQ	SPMas the LIST, PUNCH, or READER device, the CBIOS gives an appropriate
XQ	SPMerror message so that the system does not hang if the device is
XQ	SPMaccessed by PIP or some other user program.  Alternately, the PUNCH
XQ	SPMand LIST routines can just simply return, and the READER routine can
XQ	SPMreturn with a 1AH (CTRL-Z) in register A to indicate immediate end-
XQ	SPof-file.

Q	SPMFor added flexibility, you can optionally implement the IOBYTE
XQ	SPMfunction, which allows reassignment of physical devices.  The IOBYTE
XQ	SPMfunction creates a mapping of logical-to-physical devices that can
XQ	SPMbe altered during CP/M processing, see the STAT command in Section
XQ	SP1.6.1.




M                               6-14X

MCP/M Operating System Manual               6.6  BIOS Entry Points

XQ	SPMThe definition of the IOBYTE function corresponds to the Intel
XQ	SPMstandard as follows:  a single location in memory, currently
XQ	SPMlocation 0003H, is maintained, called IOBYTE, which defines the
XQ	SPMlogical-to-physical device mapping that is in effect at a particular
XQ	SPMtime.  The mapping is performed by splitting the IOBYTE into four
XQ	SPMdistinct fields of two bits each, called the CONSOLE, READER, PUNCH,
XQ	SPand LIST fields, as shown in the following figure.


Q	SP                      most significant      least significant

Q	SP    IOBYTE AT 003H    LIST       PUNCH      READER     CONSOLE

Q	SP                      bits 6,7  bits 4,5  bits 2,3   bits 0,1


Q	SPW                   Figure 6-1.  IOBYTE Fields



Q	SPMThe value in each field can be in the range 0-3, defining the
XQ	SPMassigned source or destination of each logical device.  Table 6-4
XQ	SPgives the values that can be assigned to each field.


Q	SPW                 Table 6-4. IOBYTE Field Values

Q	SP        Value                   Meaning

Q	SP                    CONSOLE field (bits 0,1)

Q	SP         0     console is assigned to the console printer
Q	SP               device (TTY:)
Q	SP         1     console is assigned to the CRT device (CRT:)
Q	SP         2     batch mode:  use the READER as the CONSOLE input,
Q	SP               and the LIST device as the CONSOLE output (BAT:)
Q	SP         3     user-defined console device (UC1:)

Q	SP                     READER field (bits 2,3)

Q	SP         0     READER is the teletype device (TTY:)
Q	SP         1     READER is the high speed reader device (PTR:)
Q	SP         2     user-defined reader #1 (UR1:)
Q	SP         3     user-defined reader #2 (UR2:)

Q	SP                     PUNCH field (bits 4,5)

Q	SP         0     PUNCH is the teletype device (TTY:)
Q	SP         1     PUNCH is the high speed punch device (PTP:)
Q	SP         2     user-defined punch #1 (UP1:)
Q	SP         3     user-defined punch #2 (UP2:)

Q	SP                      LIST field (bits 6,7)

Q	SP         0     LIST is the teletype device (TTY:)
Q	SP         1     LIST is the CRT device (CRT:)
Q	SP         2     LIST is the line printer device (LPT:)
Q	SP         3     user-defined list device (UL1:)

M                               6-15X

MCP/M Operating System Manual               6.6  BIOS Entry Points

X
Q	SPMThe implementation of the IOBYTE is optional and effects only
XQ	SPMthe organization of the CBIOS.  No CP/M systems use the IOBYTE
XQ	SPM(although they tolerate the existence of the IOBYTE at location
XQ	SPM0003H) except for PIP, which allows access to the physical devices,
XQ	SPMand STAT, which allows logical-physical assignments to be make or
XQ	SPMdisplayed.  For more information see Section 1.  In any case the
XQ	SPMIOBYTE implementation should be omitted until the basic CBIOS is
XQ	SPMfully implemented and tested; then you should add the IOBYTE to
XQ	SPincrease the facilities.

Q	SPMDisk I/O is always performed through a sequence of calls on the
XQ	SPMvarious disk access subroutines that set up the disk number to
XQ	SPMaccess, the track and sector on a particular disk, and the Direct
XQ	SPMMemory Access (DMA) address involved in the I/O operation.  After
XQ	SPMall these parameters have been set up, a call is made to the READ or
XQ	SPWRITE function to perform the actual I/O operation.

Q	SPMThere is often a single call to SELDSK to select a disk drive,
XQ	SPMfollowed by a number of read or write operations to the selected
XQ	SPMdisk before selecting another drive for subsequent operations.
XQ	SPMSimilarly, there might be a single call to set the DMA address,
XQ	SPMfollowed by several calls that read or write from the selected DMA
XQ	SPMaddress before the DMA address is changed.  The track and sector
XQ	SPMsubroutines are always called before the READ or WRITE operations
XQ	SPare performed.

Q	SPMThe READ and WRITE routines should perform several retries (10
XQ	SPMis standard) before reporting the error condition to the BDOS.  If
XQ	SPMthe error condition is returned to the BDOS, it reports the error to
XQ	SPMthe user.  The HOME subroutine might or might not actually perform
XQ	SPMthe track 00 seek, depending upon controller characteristics; the
XQ	SPMimportant point is that track 00 has been selected for the next
XQ	SPMoperation and is often treated in exactly the same manner as SETTRK
XQ	SPwith a parameter of 00.

Q	SPMThe following table describes the exact responsibilities of
XQ	SPeach BIOS entry point subroutine.


Q	SPW                  Table 6-5.  BIOS Entry Points

Q	SP   Entry Point                    Function

Q	SP9Q	GSP0Q	SPBOOT     MThe BOOT entry point gets control from the cold
XQ	SPMstart loader and is responsible for basic
XQ	SPMsystem initialization, including sending a
XQ	SPMsign-on message, which can be omitted in the
XQ	SPMfirst version.  If the IOBYTE function is
XQ	SPMimplemented, it must be set at this point.  The
XQ	SPMvarious system parameters that are set by the
XQ	SPMWBOOT entry point must be initialized, and
XQ	SPMcontrol is transferred to the CCP at 3400+b for
XQ	SPMfurther processing.  Note that register C must
XQ	SPbe set to zero to select drive A.



M                               6-16X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW                     Table 6-5.  (continued)

Q	SP   Entry Point                    Function

Q	SPWBOOT    MThe WBOOT entry point gets control when a warm
XQ	SPMstart occurs.  A warm start is performed
XQ	SPMwhenever a user program branches to location
XQ	SPM0000H, or when the CPU is reset from the front
XQ	SPMpanel.  The CP/M system must be loaded from the
XQ	SPMfirst two tracks of drive A up to, but not
XQ	SPMincluding, the BIOS, or CBIOS, if the user has
XQ	SPMcompleted the patch.  System parameters must be
XQ	SPinitialized as follows:

Q	SPlocation 0,1,2   MSet to JMP WBOOT for warm
XQ	+SPstarts (000H: JMP 4A03H+b)

Q	SPlocation 3       MSet initial value of IOBYTE,
XQ	+SPif implemented in the CBIOS

Q	SPlocation 4       MHigh nibble = current user no;
XQ	+SPlow nibble = current drive

Q	SPlocation 5,6,7   MSet to JMP BDOS, which is the
XQ	+SPMprimary entry point to CP/M
XQ	+SPMfor transient programs.
XQ	+SP(0005H: JMP 3C06H+b)

Q	SPMRefer to Section 6.9 for complete details of
XQ	SPMpage zero use.  Upon completion of the
XQ	SPMinitialization, the WBOOT program must branch
XQ	SPMto the CCP at 3400H+b to restart the system.
XQ	SPMUpon entry to the CCP, register C is set to the
XQ	SPMdrive to select after system initialization.
XQ	SPMThe WBOOT routine should read location 4 in
XQ	SPMmemory, verify that is a legal drive, and pass
XQ	SPit to the CCP in register C.

Q	SPCONST    MYou should sample the status of the currently
XQ	SPMassigned console device and return 0FFH in
XQ	SPMregister A if a character is ready to read and
XQ	SPM00H in register A if no console characters are
XQ	SPready.

Q	SPCONIN    MThe next console character is read into
XQ	SPMregister A, and the parity bit is set, high-
XQ	SPMorder bit, to zero.  If no console character is
XQ	SPMready, wait until a character is typed before
XQ	SPreturning.








M                               6-17X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW                     Table 6-5.  (continued)

Q	SP   Entry Point                    Function

Q	SPCONOUT   MThe character is sent from register C to the
XQ	SPMconsole output device.  The character is in
XQ	SPMASCII, with high-order parity bit set to zero.
XQ	SPMYou might want to include a time-out on a line-
XQ	SPMfeed or carriage return, if the console device
XQ	SPMrequires some time interval at the end of the
XQ	SPMline (such as a TI Silent 700 terminal).  You
XQ	SPMcan filter out control characters that cause
XQ	SPMthe console device to react in a strange way
XQ	SPM(CTRL-Z causes the Lear-Seigler terminal to
XQ	SPclear the screen, for example).

Q	SPLIST     MThe character is sent from register C to the
XQ	SPMcurrently assigned listing device.  The
XQ	SPcharacter is in ASCII with zero parity bit.

Q	SPPUNCH    MThe character is sent from register C to the
XQ	SPMcurrently assigned punch device.  The character
XQ	SPis in ASCII with zero parity.

Q	SPREADER   MThe next character is read from the currently
XQ	SPMassigned reader device into register A with
XQ	SPMzero parity (high-order bit must be zero); an
XQ	SPMend-of-file condition is reported by returning
XQ	SPan ASCII CTRL-Z(1AH).

Q	SPHOME     MThe disk head of the currently selected disk
XQ	SPM(initially disk A) is moved to the track 00
XQ	SPMposition.  If the controller allows access to
XQ	SPMthe track 0 flag from the drive, the head is
XQ	SPMstepped until the track 0 flag is detected.  If
XQ	SPMthe controller does not support this feature,
XQ	SPMthe HOME call is translated into a call to
XQ	SPSETTRK with a parameter of 0.

Q	SPSELDSK   MThe disk drive given by register C is selected
XQ	SPMfor further operations, where register C
XQ	SPMcontains 0 for drive A, 1 for drive B, and so
XQ	SPMon up to 15 for drive P (the standard CP/M
XQ	SPMdistribution version supports four drives).  On
XQ	SPMeach disk select, SELDSK must return in HL the
XQ	SPMbase address of a 16-byte area, called the Disk
XQ	SPMParameter Header, described in Section 6.10.
XQ	SPMFor standard floppy disk drives, the contents
XQ	SPMof the header and associated tables do not
XQ	SPMchange; thus, the program segment included in
XQ	SPMthe sample CBIOS performs this operation
XQ	SPautomatically.





M                               6-18X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW                     Table 6-5.  (continued)

Q	SP   Entry Point                    Function

Q	SPMIf there is an attempt to select a nonexistent
XQ	SPMdrive, SELDSK returns HL=0000H as an error
XQ	SPMindicator.  Although SELDSK must return the
XQ	SPMheader address on each call, it is advisable to
XQ	SPMpostpone the physical disk select operation
XQ	SPMuntil an I/O function (seek, read, or write) is
XQ	SPMactually performed, because disk selects often
XQ	SPMoccur without utimately performing any disk
XQ	SPMI/O, and many controllers unload the head of
XQ	SPMthe current disk before selecting the new
XQ	SPMdrive.  This causes an excessive amount of
XQ	SPMnoise and disk wear.  The least significant bit
XQ	SPMof register E is zero if this is the first
XQ	SPMoccurrence of the drive select since the last
XQ	SPcold or warm start.

Q	SPSETTRK   MRegister BC contains the track number for
XQ	SPMsubsequent disk accesses on the currently
XQ	SPMselected drive.  The sector number in BC is the
XQ	SPMsame as the number returned from the SECTRAN
XQ	SPMentry point.  You can choose to seek the
XQ	SPMselected track at this time or delay the seek
XQ	SPMuntil the next read or write actually occurs.
XQ	SPMRegister BC can take on values in the range 0-
XQ	SPM76 corresponding to valid track numbers for
XQ	SPMstandard floppy disk drives and 0-65535 for
XQ	SPnonstandard disk subsystems.

Q	SPSETSEC   MRegister BC contains the sector number, 1
XQ	SPMthrough 26, for subsequent disk accesses on the
XQ	SPMcurrently selected drive.  The sector number in
XQ	SPMBC is the same as the number returned from the
XQ	SPMSECTRAN entry point.  You can choose to send
XQ	SPMthis information to the controller at this
XQ	SPMpoint or delay sector selection until a read or
XQ	SPwrite operation occurs.

Q	SPSETDMA   MRegister BC contains the DMA (Disk Memory
XQ	SPMAccess) address for subsequent read or write
XQ	SPMoperations.  For example, if B = 00H and C =
XQ	SPM80H when SETDMA is called, all subsequent read
XQ	SPMoperations read their data into 80H through
XQ	SPM0FFH and all subsequent write operations get
XQ	SPMtheir data from 80H through 0FFH, until the
XQ	SPMnext call to SETDMA occurs.  The initial DMA
XQ	SPMaddress is assumed to be 80H.  The controller
XQ	SPMneed not actually support Direct Memory Access.
XQ	SPMIf, for example, all data transfers are through
XQ	SPMI/O ports, the CBIOS that is constructed uses
XQ	SPMthe 128-byte area starting at the selected DMA
XQ	SPMaddress for the memory buffer during the
XQ	SPsubsequent read or write operations.


M                               6-19X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW                     Table 6-5.  (continued)

Q	SP   Entry Point                    Function

Q	SPREAD     MAssuming the drive has been selected, the track
XQ	SPMhas been set, and the DMA address has been
XQ	SPMspecified, the READ subroutine attempts to read
XQ	SPMone sector based upon these parameters and
XQ	SPMreturns the following error codes in register
XQ	SPA:

Q	SP0  no errors occurred

Q	SP1  nonrecoverable error condition occurred

Q	SPMCurrently, CP/M responds only to a zero or
XQ	SPMnonzero value as the return code.  That is, if
XQ	SPMthe value in register A is 0, CP/M assumes that
XQ	SPMthe disk operation was completed properly.  IF
XQ	SPMan error occurs the CBIOS should attempt at
XQ	SPMleast 10 retries to see if the error is
XQ	SPMrecoverable.  When an error is reported the
XQ	SPMBDOS prints the message BDOS ERR ONx:  BAD
XQ	SPMSECTOR.  The operator then has the option of
XQ	SPMpressing a carriage return to ignore the error,
XQ	SPor CTRL-C to abort.

Q	SPWRITE    MData is written from the currently selected DMA
XQ	SPMaddress to the currently selected drive, track,
XQ	SPMand sector.  For floppy disks, the data should
XQ	SPMbe marked as nondeleted data to maintain
XQ	SPMcompatibility with other CP/M systems.  The
XQ	SPMerror codes given in the READ command are
XQ	SPMreturned in register A, with error recovery
XQ	SPattempts as described above.

Q	SPLISTST   MYou return the ready status of the list device
XQ	SPMused by the DESPOOL program to improve console
XQ	SPMresponse during its operation.  The value 00 is
XQ	SPMreturned in A if the list device is not ready
XQ	SPMto accept a character and 0FFH if a character
XQ	SPMcan be sent to the printer.  A 00 value should
XQ	SPMbe returned if LIST status is not implemented.
X













M                               6-20X

MCP/M Operating System Manual               6.6  BIOS Entry Points


XQ	SPW                     Table 6-5.  (continued)

Q	SP   Entry Point                    Function

Q	SPSECTRAN  MLogical-to-physical sector translation is
XQ	SPMperformed to improve the overall response of
XQ	SPMCP/M.  Standard CP/M systems are shipped with a
XQ	SPMskew factor of 6, where six physical sectors
XQ	SPMare skipped between each logical read
XQ	SPMoperation.  This skew factor allows enough time
XQ	SPMbetween sectors for most programs to load their
XQ	SPMbuffers without missing the next sector.  In
XQ	SPMparticular computer systems that use fast
XQ	SPMprocessors, memory, and disk subsystems, the
XQ	SPMskew factor might be changed to improve overall
XQ	SPMresponse.  However, the user should maintain a
XQ	SPMsingle-density IBM-compatible version of CP/M
XQ	SPMfor information transfer into and out of the
XQ	SPcomputer system, using a skew factor of 6.

Q	SPMIn general, SECTRAN receives a logical sector
XQ	SPMnumber relative to zero in BC and a translate
XQ	SPMtable address in DE.  The sector number is used
XQ	SPMas an index into the translate table, with the
XQ	SPMresulting physical sector number in HL.  For
XQ	SPMstandard systems, the table and indexing code
XQ	SPMis provided in the CBIOS and need not be
XQ	SPchanged.
Q	SP9Q	LSP0

Q	SPW6.7  A Sample BIOS

Q	SPMT&he program shown in Appendix B can serve as a basis for your
XQ	SPMfirst BIOS.  The simplest functions are assumed in this BIOS, so
XQ	SPMthat you can enter it through a front panel, if absolutely
XQ	SPMnecessary.  You must alter and insert code into the subroutines for
XQ	SPMCONST, CONIN, CONOUT, READ, WRITE, and WAITIO subroutines.  Storage
XQ	SPMis reserved for user-supplied code in these regions.  The scratch
XQ	SPMarea reserved in page zero (see Section 6.9) for the BIOS is used in
XQ	SPthis program, so that it could be implemented in ROM, if desired.

Q	SPMOnce operational, this skeletal version can be enhanced to
XQ	SPMprint the initial sign-on message and perform better error recovery.
XQ	SPMThe subroutines for LIST, PUNCH, and READER can be filled out and
XQ	SPthe IOBYTE function can be implemented.


Q	SPW6.8  A Sample Cold Start Loader

Q	SPMT&he program shown in Appendix E can serve as a basis for a cold
XQ	SPMstart loader.  The disk read function must be supplied by the user,
XQ	SPMand the program must be loaded somehow starting at location 0000.
XQ	SPMSpace is reserved for the patch code so that the total amount of
XQ	SPstorage required for the cold start loader is 128 bytes.



M                               6-21X

MCP/M Operating System Manual      6.8  A Sample Cold Start Loader


XQ	SPMEventually, you might want to get this loader onto the first
XQ	SPMdisk sector (track 0, sector 1) and cause the controller to load it
XQ	SPMinto memory automatically upon system start up.  Alternatively, the
XQ	SPMcold start loader can be placed into ROM, and above the CP/M system.
XQ	SPMIn this case, it is necessary to originate the program at a higher
XQ	SPMaddress and key in a jump instruction at system start up that
XQ	SPMbranches to the loader.  Subsequent warm starts do not require this
XQ	SPMkey-in operation, because the entry point WBOOT gets control, thus
XQ	SPMbringing the system in from disk automatically.  The skeletal cold
XQ	SPMstart loader has minimal error recovery, which might be enhanced in
XQ	SPlater versions.


Q	SPW6.9  Reserved Locations in Page Zero

Q	SPMM&ain memory page zero, between locations 00H and 0FFH, contains
XQ	SPMseveral segments of code and data that are used during CP/M
XQ	SPMprocessing.  The code and data areas are given in the following
XQ	SPtable.


Q	SPW           Table 6-6.  Reserved Locations in Page Zero

Q	SP     Locations                       Contents

Q	SP9Q	GSP0Q	SP000H-0002H       MContains a jump instruction to the warm
XQ	!SPMstart entry location 4A03H+b.  This
XQ	!SPMallows a simple programmed restart (JMP
XQ	!SPM0000H) or manual restart from the front
XQ	!SPpanel.

Q	SP0003H-0003H      MContains the Intel standard IOBYTE is
XQ	!SPMoptionally included in the user's CBIOS
XQ	!SP(refer to Section 6.6).

Q	SP0004H-0004H      MCurrent default drive number
XQ	!SP(0=A,...,15=P).

Q	SP0005H-0007H      MContains a jump instruction to the BDOS
XQ	!SPMand serves two purposes:  JMP 0005H
XQ	!SPMprovides the primary entry point to the
XQ	!SPMBDOS, as described in Chapter 5, and
XQ	!SPMLHLD 0006H brings the address field of
XQ	!SPMthe instruction to the HL register
XQ	!SPMpair.  This value is the lowest address
XQ	!SPMin memory used by CP/M, assuming the
XQ	!SPMCCP is being overlaid.  The DDT program
XQ	!SPMchanges the address field to reflect
XQ	!SPMthe reduced memory size in debug mode.
X
Q	SP0008H-0027H      MInterrupt locations 1 through 5 not
XQ	!SPused.

Q	SP0030H-0037H      MInterrupt location 6 (not currently
XQ	!SPused) is reserved.


M                               6-22X

MCP/M Operating System Manual 6.9  Reserved Locations in Page Zero


XQ	SPW                     Table 6-6.  (continued)

Q	SP     Locations                       Contents

Q	SP0038H-003AH      MRestart 7; contains a jump instruction
XQ	!SPMinto the DDT or SID program when
XQ	!SPMrunning in debug mode for programmed
XQ	!SPMbreakpoints, but is not otherwise used
XQ	!SPby CP/M.

Q	SP003BH-003FH      Not currently used; reserved.

Q	SP0040H-004FH      MA 16-byte area reserved for scratch by
XQ	!SPMCBIOS, but is not used for any purpose
XQ	!SPin the distribution version of CP/M.

Q	SP0050H-005BH      Not currently used; reserved.

Q	SP005CH-007CH      MDefault File Control Block produced for
XQ	!SPa transient program by the CCP.

Q	SP007DH-007FH      MOptional default random record position.
X
Q	SP0080H-00FFH      MDefault 128-byte disk buffer, also
XQ	!SPMfilled with the command line when a
XQ	!SPtransient is loaded under the CCP.
Q	SP9Q	LSP0

Q	SPMThis information is set up for normal operation under the CP/M
XQ	SPMsystem, but can be overwritten by a transient program if the BDOS
XQ	SPfacilities are not required by the transient.

Q	SPMIf, for example, a particular program performs only simple I/O
XQ	SPMand must begin execution at location 0, it can first be loaded into
XQ	SPMthe TPA, using normal CP/M facilities, with a small memory move
XQ	SPMprogram that gets control when loaded.  The memory move program must
XQ	SPMget control from location 0100H, which is the assumed beginning of
XQ	SPMall transient programs.  The move program can then proceed to the
XQ	SPMentire memory image down to location 0 and pass control to the
XQ	SPstarting address of the memory load.

Q	SPMIf the BIOS is overwritten or if location 0, containing the
XQ	SPMwarm start entry point, is overwritten, the operator must bring the
XQ	SPCP/M system back into memory with a cold start sequence.


Q	SPW6.10  Disk Parameter Tables

Q	SPMT&ables are included in the BIOS that describe the particular
XQ	SPMcharacteristics of the disk subsystem used with CP/M.  These tables
XQ	SPMcan be either hand-coded, as shown in the sample CBIOS in Appendix
XQ	SPMB, or automatically generated using the DISKDEF macro library, as
XQ	SPMshown in Appendix F.  The purpose here is to describe the elements
XQ	SPof these tables.




M                               6-23X

MCP/M Operating System Manual          6.10  Disk Parameter Tables


X
Q	SPMIn general, each disk drive has an associated (16-byte) disk
XQ	SPMparameter header that contains information about the disk drive and
XQ	SPMprovides a scratch pad area for certain BDOS operations.  The format
XQ	SPMof the disk parameter header for each drive is shown in Figure 6-2,
XQ	SPwhere each element is a word (16-bit) value.



Q	SPXLT     0000     0000     0000     DIRBUF     DPB     CSV     ALV
Q	SP16b     16b      16b      16b      16b        16b     16b     16b


Q	SPW            Figure 6-2.  Disk Parameter Header Format



Q	SPMThe meaning of each Disk Parameter Header (DPH) element is
XQ	SPdetailed in Table 6-7.


Q	SPW               Table 6-7.  Disk Parameter Headers

Q	SP  Disk Parameter                 Meaning
Q	SP      Header
Q	SP9Q	GSP0
Q	SPXLT           MAddress of the logical-to-physical
XQ	SPMtranslation vector, if used for this
XQ	SPMparticular drive, or the value 0000H if no
XQ	SPMsector translation takes place (that is,
XQ	SPMthe physical and logical sector numbers
XQ	SPMare the same).  Disk drives with identical
XQ	SPMsector skew factors share the same
XQ	SPtranslate tables.

Q	SP0000          MScratch pad values for use within the
XQ	SPBDOS, initial value is unimportant.

Q	SPDIRBUF        MAddress of a 128-byte scratch pad area for
XQ	SPMdirectory operations within BDOS.  All
XQ	SPDPHs address the same scratch pad area.

Q	SPDPB           MAddress of a disk parameter block for this
XQ	SPMdrive.  Drives with identical disk
XQ	SPMcharacteristics address the same disk
XQ	SPparameter block.

Q	SPCSV           MAddress of a scratch pad area used for
XQ	SPMsoftware check for changed disks.  This
XQ	SPaddress is different for each DPH.

Q	SPALV           MAddress of a scratch pad area used by the
XQ	SPMBDOS to keep disk storage allocation
XQ	SPMinformation.  This address is different
XQ	SPfor each DPH.


M                               6-24XQ	SP9Q	LSP0

MCP/M Operating System Manual          6.10  Disk Parameter Tables


X
Q	SPMGiven n disk drives, the DPHs are arranged in a table whose
XQ	SPMfirst row of 16 bytes corresponds to drive 0, with the last row
XQ	SPMcorresponding to drive n-1.  In the following figure the lable
XQ	SPDPBASE defines the base address of the DPH table.



Q	SP   DPBASE:

Q	SP      00  XLT 00  0000  0000  0000  DIRBUF DBP 00 CSV 00 ALV 00

Q	SP      01  XLT 01  0000  0000  0000  DIRBUF DBP 01 CSV 01 ALV 01
Q	SP                                    .
Q	SP                                    .
Q	SP                                    .
Q	SP     n-1  XLTn-1  0000  0000  0000  DIRBUF DBTn-1 CSVn-1 ALVn-1


Q	SPW            Figure 6-3.  Disk Parameter Header Table



Q	SPMA responsibility of the SELDSK subroutine is to return the base
XQ	SPMaddress of the DPH for the selected drive.  The following sequence
XQ	SPMof operations returns the table address, with a 0000H returned if
XQ	SPthe selected drive does not exist.


Q	SP NDISKS      EQU     4         ;NUMBER OF DISK DRIVES
Q	SP .....
Q	SP SELDSK:     ;SELECT DISK GIVEN BY BC
Q	SP             LSI     H,0000H   ;ERROR CODE
Q	SP             MOV     A,C       ;DRIVE OK?
Q	SP             CPI     NDISKS    ;CY IF SO
Q	SP             RNC               ;RET IF ERROR
Q	SP             ;NO ERROR, CONTINUE
Q	SP             MOV     L,C       ;LOW(DISK)
Q	SP             MOV     H,B       ;HIGH(DISK)
Q	SP             DAD     H         ;*2
Q	SP             DAD     H         ;*4
Q	SP             DAD     H         ;*8
Q	SP             DAD     H         ;*16
Q	SP             LXI     D,DPBASE;FIRST DPH
Q	SP             DAD     D         ;DPH(DISK)
Q	SP             RET


Q	SPMThe translation vectors, XLT 00 through XLTn-1, are located
XQ	SPMelsewhere in the BIOS, and simply correspond one-for-one with the
XQ	SPMlogical sector numbers zero through the sector count 1.  The Disk
XQ	SPMParameter Block (DPB) for each drive is more complex.  As shown in
XQ	SPMFigure 6-4, particular DPB, that is addressed by one or more DPHs,
XQ	SPtakes the general form:



M                               6-25X

MCP/M Operating System Manual          6.10  Disk Parameter Tables


XQ	SP    SPT   BSH   BLM   EXM   DSM   DRM   AL0   AL1   CKS   0FF
Q	SP    16b   8b    8b    8b    16b   16b   8b    8b    16b   16b


Q	SPW            Figure 6-4.  Disk Parameter Block Format



Q	SPMwhere each is a byte or word value, as shown by the 8b or 16b
XQ	SPindicator below the field.

Q	SPThe following field abbreviations are used in Figure 6-4:


Q	SPo SPT is the total number of sectors per track.

Q	SPo MBSH is the data allocation block shift factor, determined by
XQ	SPthe data block allocation size.

Q	SPo BLM is the data allocation block mask (2[BSH-1]).

Q	SPo MEXM is the extent mask, determined by the data block allocation
XQ	SPsize and the number of disk blocks.

Q	SPo DSM determines the total storage capacity of the disk drive.

Q	SPo MDRM determines the total number of directory entries that can
XQ	SPMbe stored on this drive.  AL0, AL1 determine reserved directory
XQ	SPblocks.

Q	SPo CKS is the size of the directory check vector.

Q	SPo M0FF is the number of reserved tracks at the beginning of the
XQ	SP(logical) disk.

Q	SPMThe values of BSH and BLM determine the data allocation size BLS,
XQ	SPMwhich is not an entry in the DPB.  Given that the designer has
XQ	SPMselected a value for BLS, the values of BSH and BLM are shown Table
XQ	SP6-8.


Q	SPW                 Table 6-8.  BSH and BLM Values

Q	SP  BLS         BSH         BLM

Q	SP  1024         3            7
Q	SP  2048         4           15
Q	SP  4096         5           31
Q	SP  8192         6           63
Q	SP16,384         7          127


Q	SPMwhere all values are in decimal.  The value of EXM depends upon both
XQ	SPMthe BLS and whether the DSM value is less than 256 or greater than
XQ	SP255, as shown in Table 6-9.


M                               6-26X

MCP/M Operating System Manual          6.10  Disk Parameter Tables


XQ	SPW                     Table 6-9.  EXM Values

Q	SP                    BLS             EXM values

Q	SP            DSM<256    DSM>255

Q	SP  1024         0         N/A
Q	SP  2048         1          0
Q	SP  4096         3          1
Q	SP  8192         7          3
Q	SP16,384        15          7


Q	SPMThe value of DSM is the maximum data block number supported by
XQ	SPMthis particular drive, measured in BLS units.  The product (DSM+1)
XQ	SPMis the total number of bytes held by the drive and must be within
XQ	SPMthe capacity of the physical disk, not counting the reserved
XQ	SPoperating system tracks.

Q	SPMThe DRM entry is the one less than the total number of
XQ	SPMdirectory entries that can take on a 16-bit value.  The values of
XQ	SPMAL0 and AL1, however, are determined by DRM.  The values AL0 and AL1
XQ	SPMcan together be considered a string of 16-bits, as shown in Figure
XQ	SP6-5.



Q	SP                AL0                            AL1

Q	SP 00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15


Q	SPW                    Figure 6-5.  AL0 and AL1



Q	SPMPosition 00 corresponds to the high-order bit of the byte
XQ	SPMlabeled AL0 and 15 corresponds to the low-order bit of the byte
XQ	SPMlabeled AL1.  Each bit position reserves a data block for number of
XQ	SPMdirectory entries, thus allowing a total of 16 data blocks to be
XQ	SPMassigned for directory entries (bits are assigned starting at 00 and
XQ	SPMfilled to the right until position 15).  Each directory entry
XQ	SPoccupies 32 bytes, resulting in the following tabulation:


Q	SPW                  Table 6-10.   BLS Tabulation

Q	SP BLS         Directory Entries

Q	SP  1024         32 times # bits
Q	SP  2048         64 times # bits
Q	SP  4096        128 times # bits
Q	SP  8192        256 times # bits
Q	SP16,384        512 times # bits



M                               6-27X

MCP/M Operating System Manual          6.10  Disk Parameter Tables


X
Q	SPMThus, if DRM = 127 (128 directory entries) and BLS = 1024,
XQ	SPMthere are 32 directory entries per block, requiring 4 reserved
XQ	SPMblocks.  In this case, the 4 high-order bits of AL0 are set,
XQ	SPresulting in the values AL0 = 0F0H and AL1 = 00H.

Q	SPMThe CKS value is determined as follows:  if the disk drive
XQ	SPMmedia is removable, then CKS = (DRM+1)/4, where DRM is the last
XQ	SPMdirectory entry number.  If the media are fixed, then set CKS = 0
XQ	SP(no directory records are checked in this case).

Q	SPMFinally, the 0FF field determines the number of tracks that are
XQ	SPMskipped at the beginning of the physical disk.  This value is
XQ	SPMautomatically added whenever SETTRK is called and can be used as a
XQ	SPMmechanism for skipping reserved operating system tracks or for
XQ	SPpartitioning a large disk into smaller segmented sections.

Q	SPMTo complete the discussion of the DPB, several DPHs can address
XQ	SPMthe same DPB if their drive characteristics are identical.  Further,
XQ	SPMthe DPB can be dynamically changed when a new drive is addressed by
XQ	SPMsimply changing the pointer in the DPH; because the BDOS copies the
XQ	SPMDPB values to a local area whenever the SELDSK function is invoked.
X
Q	SPMReturning back to DPH for a particular drive, the two address
XQ	SPMvalues CSV and ALV remain.  Both addresses reference an area of
XQ	SPMuninitialized memory following the BIOS.  The areas must be unique
XQ	SPMfor each drive, and the size of each area is determined by the
XQ	SPvalues in the DPB.

Q	SPMThe size of the area addressed by CSV is CKS bytes, which is
XQ	SPMsufficient to hold the directory check information for this
XQ	SPMparticular drive,  If CKS = (DRM+1)/4, you must reserve (DRM+1)/4
XQ	SPMbytes for directory check use.  If CKS = 0, no storage is reserved.
X
Q	SPMThe size of the area addressed by ALV is determined by the
XQ	SPMmaximum number of data blocks allowed for this particular disk and
XQ	SPis computed as (DSM/8)+1.

Q	SPMThe CBIOS shown in Appendix B demonstrates an instance of these
XQ	SPMtables for standard 8-inch, single-density drives.  It might be
XQ	SPMuseful to examine this program and compare the tabular values with
XQ	SPthe definitions given above.


Q	SPW6.11  The DISKDEF Macro Library

Q	SPMA& macro library called DISKDEF (shown in Appendix F), greatly
XQ	SPMsimplifies the table construction process.  You must have access to
XQ	SPMthe MAC macro assembler, of course, to use the DISKDEF facility,
XQ	SPMwhile the macro library is included with all CP.M 2 distribution
XQ	SPdisks.






M                               6-28X

MCP/M Operating System Manual      6.11  The DISKDEF Macro Library


X
Q	SPMA BIOS disk definition consists of the following sequence of
XQ	SPmacro statements:

Q	SP MACLIB         DISKDEF
Q	SP .....
Q	SP DISKS          n
Q	SP DISKDEF        0,...
Q	SP DISKDEF        1,...
Q	SP .....
Q	SP DISKDEF        n-1
Q	SP .....
Q	SP ENDEF

Q	SPMwhere the MACLIB statement loads the DISKDEF.LIB file, on the same
XQ	SPMdisk as the BIOS, into MAC's internal tables.  The DISKS macro call
XQ	SPMfollows, which specifies the number of drives to be configured  with
XQ	SPMthe user's system, where n is an integer in the range 1 to 16.  A
XQ	SPMseries of DISKDEF macro calls then follow that define the
XQ	SPMcharacteristics of each logical disk, 0 through n-1, corresponding
XQ	SPMto logical drives A through P.  The DISKS and DISKDEF macros
XQ	SPMgenerate the in-line fixed data tables described in the previous
XQ	SPMsection and thus must be placed in a nonexecutable portion of the
XQ	SPBIOS, typically directly following the BIOS jump vector.

Q	SPMThe remaining portion of the BIOS is defined following the
XQ	SPMDISKDEF macros, with the ENDEF macro call immediately preceding the
XQ	SPMEND statement.  The ENDEF (End of Diskdef) macro generates the
XQ	SPMnecessary uninitialized RAM areas that are located in memory above
XQ	SPthe BIOS.

Q	SPThe DISKDEF macro call takes the form:

Q	SPDISKDEF  dn,fsc,lsc,[skf],bls dks,dir,cks,ofs,[0]

Q	SPwhere

Q	SPo dn is the logical disk number, 0 to n-1.
Q	SPo fsc is the first physical sector number (0 or 1).
Q	SPo lsc is the last sector number.
Q	SPo skf is the optional sector skew factor.
Q	SPo bls is the data allocation block size.
Q	SPo dks is the number of blocks on the disk.
Q	SPo dir is the number of directory entries.
Q	SPo cks is the number of checked directory entries.
Q	SPo ofs is the track offset to logical track 00.
Q	SPo [0] is an optional 1.4 compatibility flag.


Q	SPMThe value dn is the drive number being defined with this
XQ	SPMDISKDEF macro invocation.  The fsc parameter accounts for differing
XQ	SPMsector numbering systems and is usually 0 to 1.  The lsc is the last
XQ	SPMnumbered sector on a track.  When present, the skf parameter defines
XQ	SPMthe sector skew factor, which is used to create a sector translation
XQ	SPtable according to the skew.


M                               6-29X

MCP/M Operating System Manual      6.11  The DISKDEF Macro Library


X
Q	SPMIf the number of sectors is less than 256, a single-byte table
XQ	SPMis created, otherwise each translation table element occupies two
XQ	SPMbytes.  No translation table is created if the skf parameter is
XQ	SPomitted, or equal to 0.

Q	SPMThe bls parameter specifies the number of bytes allocated to
XQ	SPMeach data block, and takes on the values 1024, 2048, 4096, 8192, or
XQ	SPM16384.  Generally, performance increases with larger data block
XQ	SPMsizes because there are fewer directory references, and logically
XQ	SPMconnected data records are physically close on the disk.  Further,
XQ	SPMeach directory entry addresses more data and the BIOS-resident RAM
XQ	SPspace is reduced.

Q	SPMThe dks parameter specifies the total disk size in bls units.
XQ	SPMThat is, if the bls = 2048 and dks = 1000, the total disk capacity
XQ	SPMis 2,048,000 bytes.  If dks is greater than 255, the block size
XQ	SPMparameter bls must be greater than 1024.  The value of dir is the
XQ	SPMtotal number of directory entries that might exceed 255, if desired.
X
Q	SPMThe cks parameter determines the number of directory items to
XQ	SPMcheck on each directory scan and is used internally to detect
XQ	SPMchanged disks during system operation, where an intervening cold or
XQ	SPMwarm start has not occurred.  When this situation is detected, CP/M
XQ	SPMautomatically marks the disk Read-Only so that data is not
XQ	SPsubsequently destroyed.

Q	SPMAs stated in the previous section, the value of cks = dir when
XQ	SPMthe medium is easily changed, as is the case with a floppy disk
XQ	SPMsubsystem.  If the disk is permanently mounted, the value of cks is
XQ	SPMtypically 0, because the probability of changing disks without a
XQ	SPrestart is low.

Q	SPMThe ofs value determines the number of tracks to skip when this
XQ	SPMparticular drive is addressed, which can be used to reserve
XQ	SPMadditional operating system space or to simulate several logical
XQ	SPMdrives on a single large capacity physical drive.  Finally, the [0]
XQ	SPMparameter is included when file compatibility is required with
XQ	SPMversions of 1.4 that have been modified for higher density disks.
XQ	SPMThis parameter ensures that only 16K is allocated for each directory
XQ	SPMrecord, as was the case for previous versions.  Normally, this
XQ	SPparameter is not included.

Q	SPFor convenience and economy of table space, the special form:

Q	SPDISKDEF      i,j

Q	SPMgives disk i the same characteristics as a previously defined drive
XQ	SPMj.  A standard four-drive, single-density system, which is
XQ	SPMcompatible with version 1.4, is defined using the following macro
XQ	SPinvocations:

Q	SP DISKS        4
Q	SP DISKDEF      0,1,26,6,1024,243,64,2
Q	SP DISKDEF      1,0


M                               6-30X

MCP/M Operating System Manual      6.11  The DISKDEF Macro Library


XQ	SP DISKDEF      2,0
Q	SP DISKDEF      3,0
Q	SP ....
Q	SP ENDEF

Q	SPMwith all disks having the same parameter values of 26 sectors per
XQ	SPMtrack, numbered 1 through 26, with 6 sectors skipped between each
XQ	SPMaccess, 1024 bytes per data block, 243 data blocks for a total of
XQ	SPM243K-byte disk capacity, 64 checked directory entries, and two
XQ	SPoperating system tracks.

Q	SPMThe DISKS macro generates n DPHs, starting at the DPH table
XQ	SPMaddress DPBASE generated by the macro.  Each disk header block
XQ	SPMcontains sixteen bytes, as described above, and correspond one-for-
XQ	SPMone to each of the defined drives.  In the four-drive standard
XQ	SPsystem, for example, the DISKS macro generates a table of the form:

Q	SPDPBASE     EQU$
Q	SPDPE0:      DW XLT0,0000H,0000H,0000H,DIRBUF,DPB0,CSV0,ALV0
Q	SPDPE1:      DW XLT0,0000H,0000H,0000H,DIRBUF,DPB0,CSV1,ALV1
Q	SPDPE2:      DW XLT0,0000H,0000H,0000H,DIRBUF,DPB0,CSV2,ALV2
Q	SPDPE3:      DW XLT0,0000H,0000H,0000H,DIRBUF,DPB0,CSV3,ALV3

Q	SPMwhere the DPH labels are included for reference purposes to show the
XQ	SPMbeginning table addresses for each drive 0 through 3.  The values
XQ	SPMcontained within the DPH are described in detail in the previous
XQ	SPMsection.  The check and allocation vector addresses are generated by
XQ	SPMthe ENDEF macro in the ram area following the BIOS code and tables.
X
Q	SPMNote that if the skf (skew factor) parameter is omitted, or
XQ	SPMequal to 0, the translation table is omitted and a 0000H value is
XQ	SPMinserted in the XLT position of the DPH for the disk.  In a
XQ	SPMsubsequent call to perform the logical-to-physical translation,
XQ	SPMSECTRAN receives a translation table address of DE = 0000H and
XQ	SPMsimply returns the original logical sector from BC in the HL
XQ	SPregister pair.

Q	SPMA translate table is constructed when the skf parameter is
XQ	SPMpresent, and the (nonzero) table address is placed into the
XQ	SPMcorresponding DPHs.  The following for example, is constructed when
XQ	SPMthe standard skew factor skf = 6 is specified in the DISKDEF macro
XQ	SPcall:

Q	SPXLT0:    DB    1,7,13,19,25,5,11,17,23,3,9,15,21
Q	SP         DB    2,8,14,20,26,6,12,18,24,4,10,16,22

Q	SPMFollowing the ENDEF macro call, a number of uninitialized data
XQ	SPMareas are defined.  These data areas need not be a part of the BIOS
XQ	SPMthat is loaded upon cold start, but must be available between the
XQ	SPMBIOS and the end of memory.  The size of the uninitialized RAM area
XQ	SPMis determined by EQU statements generated by the ENDEF macro.  For a
XQ	SPMstandard four-drive system, the ENDEF macro might produce the
XQ	SPfollowing EQU statement:




M                               6-31X

MCP/M Operating System Manual      6.11  The DISKDEF Macro Library


XQ	SP4C72 =        BEGDAT EQU $
Q	SP              (data areas)

Q	SP4DB0 =        ENDDAT EQU $

Q	SP013C =        DATSIZ EQU $-BEGDAT

Q	SPMwhich indicates that uninitialized RAM begins at location 4C72H,
XQ	SPMends at 4DB0H-1, and occupies 013CH bytes.  You must ensure that
XQ	SPthese addresses are free for use after the system is loaded.

Q	SPMAfter modification, you can use the STAT program to check drive
XQ	SPMcharacteristics, because STAT uses the disk parameter block to
XQ	SPdecode the drive information.  A STAT command of the form:

Q	SPSTAT d:DSK:

Q	SPMdecodes the disk parameter block for drive d (d=A,...,P) and
XQ	SPdisplays the following values:


Q	SPr:  128-byte record capacity
Q	SPk:  kilobyte drive capacity
Q	SPd:  32-byte directory entries
Q	SPc:  checked directory entries
Q	SPe:  records/extent
Q	SPb:  records/block
Q	SPs:  sectors/track
Q	SPt:  reserved tracks


Q	SPMThree examples of DISKDEF macro invocations are shown below
XQ	SPMwith corresponding STAT parameter values.  The last example produces
XQ	SPa full 8-megabyte system.

Q	SP           DISKDEF 0,1,58,,2048,256,128,128,2
Q	SPr=4096,    k=512, d=128, c=128, e=256, b=16, s=58, t=2

Q	SP           DISKDEF 0,1,58,,2048,1024,300,0,2
Q	SPr=16348,   k=2048, d=300, c=0, e=128, b=16, s=58, t=2

Q	SP           DISKDEF 0,1,58,,16348,512,128,128,2
Q	SPr=65536,   k=8192, d=128, c=128, e=1024, b=128, s=58, t=2


Q	SPW6.12  Sector Blocking and Deblocking

Q	SPMU&pon each call to BIOS WRITE entry point, the CP/M BDOS
XQ	SPMincludes information that allows effective sector blocking and
XQ	SPMdeblocking where the host disk subsystem has a sector size that is a
XQ	SPMmultiple of the basic 128-byte unit.  The purpose here is to present
XQ	SPMa general-purpose algorithm that can be included within the BIOS and
XQ	SPMthat uses the BDOS information to perform the operations
XQ	SPautomatically.



M                               6-32X

MCP/M Operating System Manual        6.12  Blocking and Deblocking


XQ	SPMOn each call to WRITE, the BDOS provides the following
XQ	SPinformation in register C:

Q	SP0   =   (normal sector write)
Q	SP1   =   (write to directory sector)
Q	SP2   =   (write to the first sector
Q	SP        of a new data block)

Q	SPMCondition 0 occurs whenever the next write operation is into a
XQ	SPMpreviously written area, such as a random mode record update; when
XQ	SPMthe write is to other than the first sector of an unallocated block;
XQ	SPMor when the write is not into the directory area.  Condition 1
XQ	SPMoccurs when a write into the directory area is performed.  Condition
XQ	SPM2 occurs when the first record (only) of a newly allocated data
XQ	SPMblock is written.  In most cases, application programs read or write
XQ	SPMmultiple 128-byte sectors in sequence; thus, there is little
XQ	SPMoverhead involved in either operation when blocking and deblocking
XQ	SPMrecords, because preread operations can be avoided when writing
XQ	SPrecords.

Q	SPMAppendix G lists the blocking and deblocking algorithms in
XQ	SPMskeletal form; this file is included on your CP/M disk.  Generally,
XQ	SPMthe algorithms map all CP/M sector read operations onto the host
XQ	SPMdisk through an intermediate buffer that is the size of the host
XQ	SPMdisk sector.  Throughout the program, values and variables that
XQ	SPMrelate to the CP/M sector involved in a seek operation are prefixed
XQ	SPMby sek, while those related to the host disk system are prefixed by
XQ	SPMhst.  The equate statements beginning on line 29 of Appendix G
XQ	SPMdefine the mapping between CP/M and the host system, and must be
XQ	SPchanged if other than the sample host system is involved.

Q	SPMThe entry points BOOT and WBOOT must contain the initialization
XQ	SPMcode starting on line 57, while the SELDSK entry point must be
XQ	SPMaugmented by the code starting on line 65.  Note that although the
XQ	SPMSELDSK entry point computes and returns the Disk Parameter Header
XQ	SPMaddress, it does not physically select the host disk at this point
XQ	SPM(it is selected later at READHST or WRITEHST).  Further, SETTRK,
XQ	SPMSETTRK, and SETMA simply store the values, but do not take any other
XQ	SPMaction at this point.  SECTRAN performs a trivial function of
XQ	SPreturning the physical sector number.

Q	SPMThe principal entry points are READ and WRITE, starting on
XQ	SPMlines 110 and 125, respectively.  These subroutines take the place
XQ	SPof your previous READ and WRITE operations.

Q	SPMThe actual physical read or write takes place at either
XQ	SPMWRITEHST or READHST, where all values have been prepared:  hstdsk is
XQ	SPMthe host disk number, hsttrk is the host track number, and hstsec is
XQ	SPMthe host sector number, which may require translation to physical
XQ	SPMsector number.  You must insert code at this point that performs the
XQ	SPMfull sector read or write into or out of the buffer at hstbuf of
XQ	SPMlength hstsiz.  All other mapping functions are performed by the
XQ	SPalgorithms.




M                               6-33X

MCP/M Operating System Manual        6.12  Blocking and Deblocking


XQ	SPMThis particular algorithm was tested using an 80-megabyte hard
XQ	SPMdisk unit that was originally configured for 128-byte sectors,
XQ	SPMproducing approximately 35 megabytes of formatted storage.  When
XQ	SPMconfigured for 512-byte host sectors, usable storage increased to 57
XQ	SPMmegabytes, with a corresponding 400% improvement in overall
XQ	SPMresponse.  In this situation, there is no apparent overhead involved
XQ	SPMin deblocking sectors, with the advantage that user programs still
XQ	SPMmaintain 128-byte sectors.  This is primarily because of the
XQ	SPMinformation provided by the BDOS, which eliminates the necessity for
XQ	SPpreread operations.


=End of Section 6












































M                               6-34X